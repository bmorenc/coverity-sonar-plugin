<rules>
    <rule>
        <key>STATIC_C_PW.PRINTF_ARG_MISMATCH_none</key>
        <name>API usage errors : Printf arg type mismatch</name>
        <internalKey>STATIC_C_PW.PRINTF_ARG_MISMATCH_none</internalKey>
        <description>A printf format string does not match the types of one of the arguments</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M17-0-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Library Introduction</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M17-0-5_none</internalKey>
        <description>The setjmp macro and the longjmp function shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M17-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Library Introduction</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M17-0-2_none</internalKey>
        <description>The names of standard library macros and objects shall not be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M17-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Library Introduction</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M17-0-3_none</internalKey>
        <description>The names of standard library functions shall not be overridden.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT32-C_OVERFLOW_CVR_AFTER_OP</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT32-C_OVERFLOW_CVR_AFTER_OP</internalKey>
        <description>Ensure that operations on signed integers do not result in overflow.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT32-C_OVERFLOW_ON_OP</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT32-C_OVERFLOW_ON_OP</internalKey>
        <description>Ensure that operations on signed integers do not result in overflow.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT32-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT32-C_none</internalKey>
        <description>Ensure that operations on signed integers do not result in overflow.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR59-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR59-CPP_none</internalKey>
        <description>Do not throw an exception across execution boundaries.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-2-3_none</internalKey>
        <description>Include guards shall be provided.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC37-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC37-C_none</internalKey>
        <description>Ensure that control never reaches the end of a non-void function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-7_DECLTYPE</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-7_DECLTYPE</internalKey>
        <description>A lambda shall not be an operand to decltype or typeid.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-7_TYPEID</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-7_TYPEID</internalKey>
        <description>A lambda shall not be an operand to decltype or typeid.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-7_none</internalKey>
        <description>A lambda shall not be an operand to decltype or typeid.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-6_none</internalKey>
        <description>Return type of a non-void return type lambda expression should be explicitly specified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M9-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M9-3-1_none</internalKey>
        <description>Const member functions shall not return non-const pointers or references to class-data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-4_none</internalKey>
        <description>A lambda expression object shall not outlive any of its reference-captured objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-3_none</internalKey>
        <description>Parameter list (possibly empty) shall be included in every lambda expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M9-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M9-3-3_none</internalKey>
        <description>If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-10_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-10_none</internalKey>
        <description>Placement new shall be used only with properly aligned pointers to sufficient storage capacity.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-2_none</internalKey>
        <description>Variables shall not be implicitly captured in a lambda expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-11_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-11_none</internalKey>
        <description>&quot;operator new&quot; and &quot;operator delete&quot; shall be defined together.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-1_none</internalKey>
        <description>Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.4_none</internalKey>
        <description>Sections of code should not be &quot;commented out&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.5_none</internalKey>
        <description>Identifiers in the same name space with overlapping visibility should be typographically unambiguous.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_RETURN_multiple_returns</key>
        <name>Code maintainability issues : Multiple return statements</name>
        <internalKey>STATIC_C_MISSING_RETURN_multiple_returns</internalKey>
        <description>Multiple return statements violates local coding standard</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_RETURN_none</key>
        <name>Uninitialized variables : Missing return statement</name>
        <internalKey>STATIC_C_MISSING_RETURN_none</internalKey>
        <description>Function that returns non-void is missing a return value</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_REVERSE_INULL_none</key>
        <name>Null pointer dereferences : Dereference before null check</name>
        <internalKey>STATIC_C_REVERSE_INULL_none</internalKey>
        <description>All paths that lead to this null pointer comparison already dereference the pointer earlier</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A14-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A14-5-3_none</internalKey>
        <description>A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M14-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M14-6-1_none</internalKey>
        <description>In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.6_none</internalKey>
        <description>Typedefs that indicate size and signedness should be used in place of the basic numerical types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM54-CPP_NEEDS_PROPER_ALIGNMENT</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM54-CPP_NEEDS_PROPER_ALIGNMENT</internalKey>
        <description>Provide placement new with properly aligned pointers to sufficient storage capacity.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM54-CPP_NEEDS_SUFFICIENT_STORAGE</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM54-CPP_NEEDS_SUFFICIENT_STORAGE</internalKey>
        <description>Provide placement new with properly aligned pointers to sufficient storage capacity.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM54-CPP_none</internalKey>
        <description>Provide placement new with properly aligned pointers to sufficient storage capacity.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.7_none</internalKey>
        <description>If a function returns error information, then that error information shall be tested.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_ASSIGN_none</key>
        <name>Memory - illegal accesses : Missing assignment operator</name>
        <internalKey>STATIC_C_MISSING_ASSIGN_none</internalKey>
        <description>Class that owns resources lacks a user-written assignment operator</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_ASSIGN_uncalled</key>
        <name>Rule violations : Missing assignment operator</name>
        <internalKey>STATIC_C_MISSING_ASSIGN_uncalled</internalKey>
        <description>Class that owns resources lacks a user-written assignment operator</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A14-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A14-5-1_none</internalKey>
        <description>A template constructor shall not participate in overload resolution for a single argument of the enclosing class type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-9_none</internalKey>
        <description>Identical unnamed lambda expressions shall be replaced with a named function or a named lambda expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-1-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-1-8_none</internalKey>
        <description>Lambda expressions should not be defined inside another lambda expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.3_none</internalKey>
        <description>Assembly language shall be encapsulated and isolated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL60-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL60-CPP_none</internalKey>
        <description>Obey the one-definition rule.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.6_none</internalKey>
        <description>For any iteration statement there shall be at most one break statement used for loop termination.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.5_none</internalKey>
        <description>The continue statement shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.8_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.8_none</internalKey>
        <description>The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO37-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO37-C_none</internalKey>
        <description>Do not assume that fgets() or fgetws() returns a nonempty string when successful.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.7_none</internalKey>
        <description>A function shall have a single point of exit at the end of the function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-1-2_none</internalKey>
        <description>A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.2_none</internalKey>
        <description>All non-null statements shall either: (a) have at least one side-effect however executed, or (b) cause control flow to change.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.8_none</internalKey>
        <description>If a pointer to a structure or union is never dereferenced within a Translation Unit, then the implementation of the object should be hidden.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.1_none</internalKey>
        <description>There shall be no unreachable code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.9_none</internalKey>
        <description>A function should be used in preference to a function-like macro where they are interchangeable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M8-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M8-5-2_none</internalKey>
        <description>Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.4_none</internalKey>
        <description>The goto statement shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-1-1_none</internalKey>
        <description>A variable that is not modified shall be const qualified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.3_none</internalKey>
        <description>Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-3-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-3-4_none</internalKey>
        <description>Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-3-3_none</internalKey>
        <description>Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-2_none</internalKey>
        <description>Macros shall only be #define&apos;d or #undef&apos;d in the global namespace.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-3-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-3-5_none</internalKey>
        <description>A class type exception shall be caught by reference or const reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-1_none</internalKey>
        <description>#include directives in a file shall only be preceded by other preprocessor directives or comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-4_none</internalKey>
        <description>Function-like macros shall not be defined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-3_none</internalKey>
        <description>#undef shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.9_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.9_none</internalKey>
        <description>An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-6_none</internalKey>
        <description>In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-5_none</internalKey>
        <description>Arguments to a function-like macro shall not contain tokens that look like preprocessing directives.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-8_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-8_none</internalKey>
        <description>If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-5-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-5-5_none</internalKey>
        <description>A loop-control-variable other than loop-counter shall not be modified within condition or expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-0-7_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-0-7_none</internalKey>
        <description>Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-5-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-5-6_none</internalKey>
        <description>A loop-control-variable other than the loop-counter which is modified in statement shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_ALLOC_STRLEN_none</key>
        <name>Memory - corruptions : String length miscalculation</name>
        <internalKey>STATIC_C_BAD_ALLOC_STRLEN_none</internalKey>
        <description>String length miscalculation</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR53-CPP_none</internalKey>
        <description>Use valid iterator ranges.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SECURE_CODING_none</key>
        <name>Security best practices violations : Calling risky function</name>
        <internalKey>STATIC_C_SECURE_CODING_none</internalKey>
        <description>Calling a function which may pose a security risk if it is used inappropriately</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON31-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON31-C_none</internalKey>
        <description>Do not destroy a mutex while it is locked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-5-1_none</internalKey>
        <description>A for loop shall contain a single loop-counter which shall not have floating type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-5-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-5-2_none</internalKey>
        <description>If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-4-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-4-1_none</internalKey>
        <description>If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-5-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-5-3_none</internalKey>
        <description>The loop-counter shall not be modified within condition or statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-5-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-5-4_none</internalKey>
        <description>The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT PRE32-C_none</key>
        <name>Coding standard violation : CERT-C Preprocessor</name>
        <internalKey>STATIC_C_CERT PRE32-C_none</internalKey>
        <description>Do not use preprocessor directives in invocations of function-like macros.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-6-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-6-2_none</internalKey>
        <description>The function chosen by overload resolution shall resolve to a function declared previously in the translation unit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-6-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-6-1_none</internalKey>
        <description>In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP58-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP58-CPP_none</internalKey>
        <description>Copy operations must not mutate the source object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.RETURN_PTR_TO_LOCAL_TEMP_none</key>
        <name>Memory - illegal accesses : Returning pointer to temp</name>
        <internalKey>STATIC_C_PW.RETURN_PTR_TO_LOCAL_TEMP_none</internalKey>
        <description>Returning a pointer to a temporary variable, which will be destroyed on function exit</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL52-CPP_none</internalKey>
        <description>Never qualify a reference type with const or volatile.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 nullref_none</key>
        <name>Coding standard violation : ISO TS17961 2013 nullref</name>
        <internalKey>STATIC_C_ISO TS17961 2013 nullref_none</internalKey>
        <description>Dereferencing an out-of-domain pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_VARARGS_none</key>
        <name>API usage errors : Missing varargs init or cleanup</name>
        <internalKey>STATIC_C_VARARGS_none</internalKey>
        <description>Incorrect usage of variable argument macros; use va_start or va_copy to begin processing and va_end to finish</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-3-2_none</internalKey>
        <description>Static and thread-local objects shall be constant-initialized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-3-1_none</internalKey>
        <description>Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR58-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR58-CPP_none</internalKey>
        <description>Handle all exceptions thrown before main() begins executing.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC50-CPP_none</internalKey>
        <description>Do not use std::rand() for generating pseudorandom numbers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT34-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT34-C_none</internalKey>
        <description>Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC39-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC39-C_none</internalKey>
        <description>Do not call va_arg() on a va_list that has an indeterminate value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO46-C_none</key>
        <name>CERT-C Input/Output : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO46-C_none</internalKey>
        <description>Do not access a closed file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-0-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-0-7_none</internalKey>
        <description>Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A9-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A9-6-1_none</internalKey>
        <description>Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-0-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-0-8_none</internalKey>
        <description>If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-0-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-0-5_none</internalKey>
        <description>Arguments to a function-like macro shall not contain tokens that look like pre-processing directives.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-0-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-0-6_none</internalKey>
        <description>In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 intptrconv_none</key>
        <name>Coding standard violation : ISO TS17961 2013 intptrconv</name>
        <internalKey>STATIC_C_ISO TS17961 2013 intptrconv_none</internalKey>
        <description>Converting a pointer to integer or integer to pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM30-C_none</key>
        <name>Coding standard violation : CERT-C Memory Management</name>
        <internalKey>STATIC_C_CERT MEM30-C_none</internalKey>
        <description>Do not access freed memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ARRAY_VS_SINGLETON_none</key>
        <name>Memory - corruptions : Out-of-bounds access</name>
        <internalKey>STATIC_C_ARRAY_VS_SINGLETON_none</internalKey>
        <description>Access of memory past the end of a memory buffer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-0-1_none</internalKey>
        <description>#include directives in a file shall only be preceded by other pre-processor directives or comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM53-CPP_none</internalKey>
        <description>Explicitly construct and destruct objects when manually managing object lifetime.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-0-2_none</internalKey>
        <description>Macros shall only be #define&apos;d or #undef&apos;d in the global namespace.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERLAPPING_COPY_assignment</key>
        <name>Memory - corruptions : Assignment of overlapping memory</name>
        <internalKey>STATIC_C_OVERLAPPING_COPY_assignment</internalKey>
        <description>Assignment to an object with overlapping storage without exact overlap and compatible types can cause undefined behavior.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERLAPPING_COPY_byte_copy</key>
        <name>Memory - corruptions : Copy of overlapping memory</name>
        <internalKey>STATIC_C_OVERLAPPING_COPY_byte_copy</internalKey>
        <description>Copying a memory region to an overlapping memory region, which may cause memory corruption.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERLAPPING_COPY_none</key>
        <name>Memory - corruptions : Copy of overlapping memory</name>
        <internalKey>STATIC_C_OVERLAPPING_COPY_none</internalKey>
        <description>Copying a memory region to an overlapping memory region, which may cause memory corruption.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PASS_BY_VALUE_none</key>
        <name>Performance inefficiencies : Big parameter passed by value</name>
        <internalKey>STATIC_C_PASS_BY_VALUE_none</internalKey>
        <description>A large function call parameter or exception catch statement is passed by value</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-8-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-8-2_none</internalKey>
        <description>The viable function set for a function call should either contain no function specializations, or only contain function specializations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-8-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-8-1_none</internalKey>
        <description>Overloaded function templates shall not be explicitly specialized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERRUN_illegal_address</key>
        <name>Memory - corruptions : Illegal address computation</name>
        <internalKey>STATIC_C_OVERRUN_illegal_address</internalKey>
        <description>An illegal address is computed, which either precedes a buffer or is more than just-past its end</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERRUN_none</key>
        <name>Memory - corruptions : Out-of-bounds access</name>
        <internalKey>STATIC_C_OVERRUN_none</internalKey>
        <description>Out-of-bounds access to a buffer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERRUN_read</key>
        <name>Memory - illegal accesses : Out-of-bounds read</name>
        <internalKey>STATIC_C_OVERRUN_read</internalKey>
        <description>Out-of-bounds read from a buffer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERRUN_strlen</key>
        <name>Memory - corruptions : Allocation size error</name>
        <internalKey>STATIC_C_OVERRUN_strlen</internalKey>
        <description>Allocation size does not include space for the null-terminator needed for a string</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERRUN_write</key>
        <name>Memory - corruptions : Out-of-bounds write</name>
        <internalKey>STATIC_C_OVERRUN_write</internalKey>
        <description>Out-of-bounds write to a buffer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M10-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M10-1-2_none</internalKey>
        <description>A base class shall only be declared virtual if it is used in a diamond hierarchy.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M10-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M10-1-3_none</internalKey>
        <description>An accessible base class shall not be both virtual and non-virtual in the same hierarchy.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-2-2_none</internalKey>
        <description>The One Definition Rule shall not be violated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.4_none</internalKey>
        <description>The identifiers used in the declaration and definition of a function shall be identical.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OVERFLOW_BEFORE_WIDEN_none</key>
        <name>Integer handling issues : Unintentional integer overflow</name>
        <internalKey>STATIC_C_OVERFLOW_BEFORE_WIDEN_none</internalKey>
        <description>An integer overflow occurs, with the result converted to a wider integer type</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-2-1_none</internalKey>
        <description>All declarations of an object or function shall have compatible types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.3_none</internalKey>
        <description>Identifiers shall be given for all of the parameters in a function prototype declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-2-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-2-4_none</internalKey>
        <description>An identifier with external linkage shall have exactly one definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.6_none</internalKey>
        <description>The number of arguments passed to a function shall match the number of parameters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-2-3_none</internalKey>
        <description>A type, object or function that is used in multiple translation units shall be declared in one and only one file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG31-C_ACCESS_SHARED_OBJ_ERRNO</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG31-C_ACCESS_SHARED_OBJ_ERRNO</internalKey>
        <description>Do not access shared objects in signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG31-C_ACCESS_SHARED_OBJ_EXCEPT_ERRNO</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG31-C_ACCESS_SHARED_OBJ_EXCEPT_ERRNO</internalKey>
        <description>Do not access shared objects in signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG31-C_none</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG31-C_none</internalKey>
        <description>Do not access shared objects in signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.5_none</internalKey>
        <description>Functions with no parameters shall be declared and defined with the parameter list void.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M10-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M10-1-1_none</internalKey>
        <description>Classes should not be derived from virtual bases.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Integers</name>
        <internalKey>STATIC_C_CERT INT50-CPP_none</internalKey>
        <description>Do not cast to an out-of-range enumeration value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHROOT_none</key>
        <name>API usage errors : Insecure chroot</name>
        <internalKey>STATIC_C_CHROOT_none</internalKey>
        <description>A call to chroot followed by an operation that may escape from the chroot jail</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISMATCHED_ITERATOR_mismatched_comparison</key>
        <name>Control flow issues : Invalid iterator comparison</name>
        <internalKey>STATIC_C_MISMATCHED_ITERATOR_mismatched_comparison</internalKey>
        <description>Iterators that point to different containers are compared</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISMATCHED_ITERATOR_none</key>
        <name>Memory - corruptions : Iterator container mismatch</name>
        <internalKey>STATIC_C_MISMATCHED_ITERATOR_none</internalKey>
        <description>Using iterator from one container in operations on another container</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISMATCHED_ITERATOR_splice_iterator_mismatch</key>
        <name>Memory - corruptions : Splice iterator mismatch</name>
        <internalKey>STATIC_C_MISMATCHED_ITERATOR_splice_iterator_mismatch</internalKey>
        <description>Using iterator from the wrong container as argument to the splice method</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.2_none</internalKey>
        <description>Functions shall not call themselves, either directly or indirectly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 chreof_none</key>
        <name>Coding standard violation : ISO TS17961 2013 chreof</name>
        <internalKey>STATIC_C_ISO TS17961 2013 chreof_none</internalKey>
        <description>Using character values that are indistinguishable from EOF.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.1_none</internalKey>
        <description>Functions shall not be defined with variable number of arguments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 9.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Initialisation</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 9.1_none</internalKey>
        <description>All automatic variables shall have been assigned a value before being used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-1-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-1-5_none</internalKey>
        <description>Exceptions shall not be thrown across execution boundaries.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 9.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Initialisation</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 9.2_none</internalKey>
        <description>Braces shall be used to indicate and match the structure in the non-zero initialisation of arrays and structures.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-1-2_none</internalKey>
        <description>An exception object shall not be a pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.8_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.8_none</internalKey>
        <description>All exit paths from a function with non-void return type shall have an explicit return statement with an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-1-1_none</internalKey>
        <description>Only instances of types derived from std::exception should be thrown.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.7_none</internalKey>
        <description>A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-1-4_none</internalKey>
        <description>If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 9.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Initialisation</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 9.3_none</internalKey>
        <description>In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-1-3_none</internalKey>
        <description>All thrown exceptions should be unique.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.9_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.9_none</internalKey>
        <description>A function identifier shall only be used with either a preceding &amp;, or with a parenthesized parameter list, which may be empty.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-7-1_none</internalKey>
        <description>If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.7_none</internalKey>
        <description>Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FLP36-C_none</key>
        <name>Coding standard violation : CERT-C Floating Point</name>
        <internalKey>STATIC_C_CERT FLP36-C_none</internalKey>
        <description>Preserve precision when converting integral values to floating-point type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.8_none</internalKey>
        <description>The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.5_none</internalKey>
        <description>#undef should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.6_none</internalKey>
        <description>Tokens that look like a preprocessing directive shall not occur within a macro argument.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.3_none</internalKey>
        <description>The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.4_none</internalKey>
        <description>A macro shall not be defined with the same name as a keyword.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.1_none</internalKey>
        <description>#include directives should only be preceded by preprocessor directives or comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.2_none</internalKey>
        <description>The &apos;, &quot; or \ characters and the /* or // character sequences shall not occur in a header file name.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-2-1_none</internalKey>
        <description>An object shall not be assigned to an overlapping object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON33-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON33-C_none</internalKey>
        <description>Avoid race conditions when using library functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-5-2_none</internalKey>
        <description>All user-defined conversion operators shall be defined explicit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-5-1_none</internalKey>
        <description>If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-5-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-5-4_none</internalKey>
        <description>If two opposite operators are defined, one shall be defined in terms of the other.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-5-3_none</internalKey>
        <description>User-defined conversion operators should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR52-CPP_none</internalKey>
        <description>Guarantee that library functions do not overflow.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-5-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-5-5_none</internalKey>
        <description>Comparison operators shall be non-member functions with identical parameter types and noexcept.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT PRE30-C_none</key>
        <name>Coding standard violation : CERT-C Preprocessor</name>
        <internalKey>STATIC_C_CERT PRE30-C_none</internalKey>
        <description>Do not create a universal character name through concatenation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Input/Output</name>
        <internalKey>STATIC_C_CERT FIO50-CPP_none</internalKey>
        <description>Do not alternately input and output from a file stream without an intervening positioning call.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.9_none</internalKey>
        <description>All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define&apos;d before evaluation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ARR38-C_none</key>
        <name>Coding standard violation : CERT-C Array</name>
        <internalKey>STATIC_C_CERT ARR38-C_none</internalKey>
        <description>Guarantee that library functions do not form invalid pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_CLASS_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_CLASS_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_ENUM_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_ENUM_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_FUC_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_FUC_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_GLOBALVAR_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_GLOBALVAR_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_LOCALOBJ_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_LOCALOBJ_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_MOCRO_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_MOCRO_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_NAMESPACE_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_NAMESPACE_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_PARAM_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_PARAM_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_TYPEDEF_WITH_RESERVED_NAMES</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_TYPEDEF_WITH_RESERVED_NAMES</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL51-CPP_none</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-18-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-18-1_none</internalKey>
        <description>The comma operator shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 diverr_none</key>
        <name>Coding standard violation : ISO TS17961 2013 diverr</name>
        <internalKey>STATIC_C_ISO TS17961 2013 diverr_none</internalKey>
        <description>Integer division errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-1-1_none</internalKey>
        <description>It shall be possible to include any header file in multiple translation units without violating the One Definition Rule.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_USER_POINTER_none</key>
        <name>Security best practices violations : User pointer dereference</name>
        <internalKey>STATIC_C_USER_POINTER_none</internalKey>
        <description>A user-land pointer is dereferenced without safety checks in the kernel</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC51-CPP_none</internalKey>
        <description>Ensure your random number generator is properly seeded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 invfmtstr_none</key>
        <name>Coding standard violation : ISO TS17961 2013 invfmtstr</name>
        <internalKey>STATIC_C_ISO TS17961 2013 invfmtstr_none</internalKey>
        <description>Using invalid format strings.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON50-CPP_none</internalKey>
        <description>Do not destroy a mutex while it is locked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM52-CPP_MEMORY_USE_WITHOUT_CHECK</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM52-CPP_MEMORY_USE_WITHOUT_CHECK</internalKey>
        <description>Detect and handle memory allocation errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM52-CPP_none</internalKey>
        <description>Detect and handle memory allocation errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR33-C_none</key>
        <name>Coding standard violation : CERT-C Error Handling</name>
        <internalKey>STATIC_C_CERT ERR33-C_none</internalKey>
        <description>Detect and handle standard library errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-1-4_none</internalKey>
        <description>When an array with external linkage is declared, its size shall be stated explicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-1-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-1-5_none</internalKey>
        <description>A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-1-2_none</internalKey>
        <description>Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL38-C_FLX_ARR_STRUCT</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL38-C_FLX_ARR_STRUCT</internalKey>
        <description>Use the correct syntax when declaring a flexible array member.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL38-C_FLX_LIKE_STRUCT</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL38-C_FLX_LIKE_STRUCT</internalKey>
        <description>Use the correct syntax when declaring a flexible array member.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL38-C_FLX_STRUCT_ARR</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL38-C_FLX_STRUCT_ARR</internalKey>
        <description>Use the correct syntax when declaring a flexible array member.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL38-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL38-C_none</internalKey>
        <description>Use the correct syntax when declaring a flexible array member.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-1-3_none</internalKey>
        <description>Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-1-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-1-6_none</internalKey>
        <description>Trivial accessor and mutator functions should be inlined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 syscall_none</key>
        <name>Coding standard violation : ISO TS17961 2013 syscall</name>
        <internalKey>STATIC_C_ISO TS17961 2013 syscall_none</internalKey>
        <description>Calling system.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL54-CPP_DCL54CPP_DEFECT</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL54-CPP_DCL54CPP_DEFECT</internalKey>
        <description>Overload allocation and deallocation functions as a pair in the same scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL54-CPP_DCL54CPP_EXCEPTION</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL54-CPP_DCL54CPP_EXCEPTION</internalKey>
        <description>Overload allocation and deallocation functions as a pair in the same scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL54-CPP_none</internalKey>
        <description>Overload allocation and deallocation functions as a pair in the same scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.10_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.10_none</internalKey>
        <description>The value of errno shall only be tested when the last function to be called was an errno-setting-function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_RESOURCE_LEAK_exceptional_path</key>
        <name>Exceptional resource leaks : Resource leak on an exceptional path</name>
        <internalKey>STATIC_C_RESOURCE_LEAK_exceptional_path</internalKey>
        <description>Leak of a system resource on an exception path (probably error handling)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_RESOURCE_LEAK_fds_handles</key>
        <name>Resource leaks : Integer handle or fd leak</name>
        <internalKey>STATIC_C_RESOURCE_LEAK_fds_handles</internalKey>
        <description>Leak of a system resource with an integer descriptor such as a file descriptor or a handle in Windows</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_RESOURCE_LEAK_none</key>
        <name>Resource leaks : Resource leak</name>
        <internalKey>STATIC_C_RESOURCE_LEAK_none</internalKey>
        <description>Leak of memory or pointers to system resources</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A14-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A14-1-1_none</internalKey>
        <description>A template should check if a specific template argument is suitable for this template.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-3-1_none</internalKey>
        <description>Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.9_none</internalKey>
        <description>An object should be defined at block scope if its identifier only appears in a single function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.5_none</internalKey>
        <description>An external object or function shall be declared once in one and only one file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.6_missing_definition</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.6_missing_definition</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.6_multiple_definitions</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.6_multiple_definitions</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.6_none</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.7_none</internalKey>
        <description>Functions and objects should not be defined with external linkage if they are referenced in only one translation unit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 alignconv_none</key>
        <name>Coding standard violation : ISO TS17961 2013 alignconv</name>
        <internalKey>STATIC_C_ISO TS17961 2013 alignconv_none</internalKey>
        <description>Converting pointer values to more strictly aligned pointer types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.8_none</internalKey>
        <description>The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR51-CPP_none</internalKey>
        <description>Use valid references, pointers, and iterators to reference elements of a container.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 10.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Arithmetic Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 10.2_none</internalKey>
        <description>The value of an expression of floating type shall not be implicitly converted to a different type if: (a) it is not a conversion to a wider floating type, or (b) the expression is complex, or (c) the expression is a function argument, or (d) the expression is a return expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.1_none</internalKey>
        <description>Types shall be explicitly specified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 10.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Arithmetic Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 10.1_none</internalKey>
        <description>The value of an expression of integer type shall not be implicitly converted to a different underlying type if: (a) it is not a conversion to a wider integer type of the same signedness, or (b) the expression is complex, or (c) the expression is not constant and is a function argument, or (d) the expression is not constant and is a return expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.2_none</internalKey>
        <description>Function types shall be in prototype form with named parameters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 10.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Arithmetic Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 10.4_none</internalKey>
        <description>The value of a complex expression of floating type shall only be cast to a floating type that is narrower or of the same size.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.3_none</internalKey>
        <description>All declarations of an object or function shall use the same names and type qualifiers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 10.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Arithmetic Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 10.3_none</internalKey>
        <description>The value of a complex expression of integer type shall only be cast to a type of the same signedness that is no wider than the underlying type of the expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.4_none</internalKey>
        <description>A compatible declaration shall be visible when an object or function with external linkage is defined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON40-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON40-C_none</internalKey>
        <description>Do not refer to an atomic variable twice in an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-5-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-5-2_none</internalKey>
        <description>The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-5-3_CONST_REFERENCE</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-5-3_CONST_REFERENCE</internalKey>
        <description>A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-5-3_NON_CONST_REFERENCE</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-5-3_NON_CONST_REFERENCE</internalKey>
        <description>A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-5-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-5-3_none</internalKey>
        <description>A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-5-1_none</internalKey>
        <description>A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 10.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Arithmetic Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 10.6_none</internalKey>
        <description>A &quot;U&quot; suffix shall be applied to all constants of unsigned type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_bit_and_with_zero</key>
        <name>Integer handling issues : Bitwise-and with zero</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_bit_and_with_zero</internalKey>
        <description>Bitwise-and (&apos;&amp;amp;&apos;) operation applied to zero always produces zero</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_extra_high_bits</key>
        <name>Integer handling issues : Extra high-order bits</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_extra_high_bits</internalKey>
        <description>In an operation, the high-order bits of wider operand do not affect the narrower operand</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_logical_vs_bitwise</key>
        <name>Integer handling issues : Logical vs. bitwise operator</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_logical_vs_bitwise</internalKey>
        <description>Logical operator used in place of bitwise operator or vice versa</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_missing_parentheses</key>
        <name>Incorrect expression : Missing parentheses</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_missing_parentheses</internalKey>
        <description>Missing parentheses caused unintended operator precedence</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_none</key>
        <name>Integer handling issues : Constant expression result</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_none</internalKey>
        <description>An operation with non-constant operands that computes a result with constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_operator_confusion</key>
        <name>Integer handling issues : Wrong operator used</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_operator_confusion</internalKey>
        <description>Wrong operator used in expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_pointless_string_compare</key>
        <name>Incorrect expression : Pointless string comparison</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_pointless_string_compare</internalKey>
        <description>A string is compared against itself with strcmp or strncmp.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_result_independent_of_operands</key>
        <name>Integer handling issues : Operands don&apos;t affect result</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_result_independent_of_operands</internalKey>
        <description>An operation with non-constant operands that computes a result with constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_same_on_both_sides</key>
        <name>Incorrect expression : Same on both sides</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_same_on_both_sides</internalKey>
        <description>The same expression occurs on both sides of an operator.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CONSTANT_EXPRESSION_RESULT_unnecessary_op_assign</key>
        <name>Integer handling issues : Suspicious &amp;= or |=</name>
        <internalKey>STATIC_C_CONSTANT_EXPRESSION_RESULT_unnecessary_op_assign</internalKey>
        <description>Using a bitwise assignment operator to assign a constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 10.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Arithmetic Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 10.5_none</internalKey>
        <description>If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.CONV_none</key>
        <name>Memory - corruptions : COM bad conversion to BSTR</name>
        <internalKey>STATIC_C_COM.BSTR.CONV_none</internalKey>
        <description>A wide character string cannot be converted to a BSTR because it lacks the hidden length field</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ALLOC_FREE_MISMATCH_none</key>
        <name>API usage errors : Incorrect deallocator used</name>
        <internalKey>STATIC_C_ALLOC_FREE_MISMATCH_none</internalKey>
        <description>A resource is freed using the wrong deallocator</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 sigcall_none</key>
        <name>Coding standard violation : ISO TS17961 2013 sigcall</name>
        <internalKey>STATIC_C_ISO TS17961 2013 sigcall_none</internalKey>
        <description>Calling signal from interruptible signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 7.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Constants</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 7.1_none</internalKey>
        <description>Octal constants (other than zero) and octal escape sequences shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_FORMAT_STRING_INJECTION_none</key>
        <name>Insecure data handling : Format string vulnerability</name>
        <internalKey>STATIC_C_FORMAT_STRING_INJECTION_none</internalKey>
        <description>An unscrutinized value from an untrusted source used to construct a format string</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_FORMAT_STRING_INJECTION_paranoid</key>
        <name>Security best practices violations : Format string warning</name>
        <internalKey>STATIC_C_FORMAT_STRING_INJECTION_paranoid</internalKey>
        <description>A non-constant string used to construct a format string</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-5-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-5-4_none</internalKey>
        <description>Functions should not call themselves, either directly or indirectly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-3-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-3-4_none</internalKey>
        <description>Using-directives shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP56-CPP_none</internalKey>
        <description>Honor replacement handler requirements.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-3-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-3-6_none</internalKey>
        <description>Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FLP34-C_none</key>
        <name>Coding standard violation : CERT-C Floating Point</name>
        <internalKey>STATIC_C_CERT FLP34-C_none</internalKey>
        <description>Ensure that floating-point conversions are within range of the new type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-3-1_none</internalKey>
        <description>The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-3-3_none</internalKey>
        <description>There shall be no unnamed namespaces in header files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-3-2_none</internalKey>
        <description>The identifier main shall not be used for a function other than the global function main.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_COPY_none</key>
        <name>Memory - illegal accesses : Missing copy constructor</name>
        <internalKey>STATIC_C_MISSING_COPY_none</internalKey>
        <description>Class that owns resources lacks a user-written copy constructor</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_COPY_uncalled</key>
        <name>Rule violations : Missing copy constructor</name>
        <internalKey>STATIC_C_MISSING_COPY_uncalled</internalKey>
        <description>Class that owns resources lacks a user-written copy constructor</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-5-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-5-6_none</internalKey>
        <description>A loop-control-variable other than the loop-counter which is modified in statement shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-3-1_none</internalKey>
        <description>A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-5-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-5-5_none</internalKey>
        <description>A loop-control-variable other than the loop-counter shall not be modified within condition or expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHECKED_RETURN_library_function</key>
        <name>Error handling issues : Unchecked return value from library</name>
        <internalKey>STATIC_C_CHECKED_RETURN_library_function</internalKey>
        <description>Value returned from a library function is not checked for errors before being used.  This value may indicate an error condition.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHECKED_RETURN_none</key>
        <name>Error handling issues : Unchecked return value</name>
        <internalKey>STATIC_C_CHECKED_RETURN_none</internalKey>
        <description>Value returned from a function is not checked for errors before being used</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHECKED_RETURN_returns_error_info</key>
        <name>Error handling issues : Unchecked error in return value</name>
        <internalKey>STATIC_C_CHECKED_RETURN_returns_error_info</internalKey>
        <description>Function may return error code, but value returned from this function is not checked for error condition.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHECKED_RETURN_short_read</key>
        <name>Error handling issues : Ignoring number of bytes read</name>
        <internalKey>STATIC_C_CHECKED_RETURN_short_read</internalKey>
        <description>Value returned from a function and indicating the number of bytes read is ignored.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHECKED_RETURN_unchecked_arg</key>
        <name>Error handling issues : Unchecked return value as arg</name>
        <internalKey>STATIC_C_CHECKED_RETURN_unchecked_arg</internalKey>
        <description>Value returned from a function is not checked for errors, and passed directly to another function as an argument</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHECKED_RETURN_user_required</key>
        <name>Error handling issues : Unchecked return value from user code</name>
        <internalKey>STATIC_C_CHECKED_RETURN_user_required</internalKey>
        <description>Value returned from a program function is not checked before being used.  It has been marked that its return value should always be checked.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-5-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-5-4_none</internalKey>
        <description>The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-5-3_none</internalKey>
        <description>The loop-counter shall not be modified within condition or statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-5-2_none</internalKey>
        <description>If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZEOF_MISMATCH_extra_sizeof</key>
        <name>Incorrect expression : Extra sizeof expression</name>
        <internalKey>STATIC_C_SIZEOF_MISMATCH_extra_sizeof</internalKey>
        <description>The sizeof operator is not required in the expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZEOF_MISMATCH_missing_parentheses</key>
        <name>Memory - illegal accesses : Missing parentheses</name>
        <internalKey>STATIC_C_SIZEOF_MISMATCH_missing_parentheses</internalKey>
        <description>Missing parentheses caused unintended operator precedence of casting before the pointer arithmetic</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZEOF_MISMATCH_none</key>
        <name>Incorrect expression : Misused sizeof</name>
        <internalKey>STATIC_C_SIZEOF_MISMATCH_none</internalKey>
        <description>The sizeof operator is used erroneously in an expression or is invoked on the wrong argument</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZEOF_MISMATCH_sizeof_punning</key>
        <name>Code maintainability issues : Sizeof not portable</name>
        <internalKey>STATIC_C_SIZEOF_MISMATCH_sizeof_punning</internalKey>
        <description>The sizeof operator is used on a wrong argument that incidentally has the same size</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZEOF_MISMATCH_wrong_size_value</key>
        <name>Incorrect expression : Wrong size argument</name>
        <internalKey>STATIC_C_SIZEOF_MISMATCH_wrong_size_value</internalKey>
        <description>The wrong size value is passed to a function</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZEOF_MISMATCH_wrong_sizeof</key>
        <name>Incorrect expression : Wrong sizeof argument</name>
        <internalKey>STATIC_C_SIZEOF_MISMATCH_wrong_sizeof</internalKey>
        <description>The sizeof operator is invoked on the wrong argument</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 swtchdflt_none</key>
        <name>Coding standard violation : ISO TS17961 2013 swtchdflt</name>
        <internalKey>STATIC_C_ISO TS17961 2013 swtchdflt_none</internalKey>
        <description>Use of an implied default in a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-1-1_none</internalKey>
        <description>Classes should not be derived from virtual bases.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-3-2_none</internalKey>
        <description>The unary minus operator shall not be applied to an expression whose underlying type is unsigned.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-3-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-3-3_none</internalKey>
        <description>The unary &amp; operator shall not be overloaded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-1-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-1-3_none</internalKey>
        <description>An accessible base class shall not be both virtual and non-virtual in the same hierarchy.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-1-2_none</internalKey>
        <description>A base class shall only be declared virtual if it is used in a diamond hierarchy.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-3-1_none</internalKey>
        <description>Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ARR36-C_none</key>
        <name>Coding standard violation : CERT-C Array</name>
        <internalKey>STATIC_C_CERT ARR36-C_none</internalKey>
        <description>Do not subtract or compare two pointers that do not refer to the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-3-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-3-4_none</internalKey>
        <description>Evaluation of the operand to the sizeof operator shall not contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_FREE_address</key>
        <name>Memory - corruptions : Free of address-of expression</name>
        <internalKey>STATIC_C_BAD_FREE_address</internalKey>
        <description>Free of an address-of expression, which can never be heap allocated</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_FREE_alloca</key>
        <name>Memory - corruptions : Free of stack-allocated memory</name>
        <internalKey>STATIC_C_BAD_FREE_alloca</internalKey>
        <description>Free of stack-allocated buffer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_FREE_array</key>
        <name>Memory - corruptions : Free of array-typed value</name>
        <internalKey>STATIC_C_BAD_FREE_array</internalKey>
        <description>Free of array-typed value</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_FREE_first_field_address</key>
        <name>Memory - corruptions : Free of address-of first field</name>
        <internalKey>STATIC_C_BAD_FREE_first_field_address</internalKey>
        <description>Free of an address-of the first field of a struct</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_FREE_function_pointer</key>
        <name>Memory - corruptions : Free of function pointer</name>
        <internalKey>STATIC_C_BAD_FREE_function_pointer</internalKey>
        <description>Free of function pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_FREE_none</key>
        <name>Memory - corruptions : Free of invalid pointer value</name>
        <internalKey>STATIC_C_BAD_FREE_none</internalKey>
        <description>Free of an pointer that was not returned from an allocation function</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DC.STREAM_BUFFER_none</key>
        <name>Security best practices violations : Calling risky function</name>
        <internalKey>STATIC_C_DC.STREAM_BUFFER_none</internalKey>
        <description>The called function is unsafe for security related code</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 4-5-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Standard Conversions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 4-5-3_none</internalKey>
        <description>Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_NULL_RETURNS_none</key>
        <name>Null pointer dereferences : Dereference null return value</name>
        <internalKey>STATIC_C_NULL_RETURNS_none</internalKey>
        <description>Return value of function which returns null is dereferenced without checking</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NULL_RETURNS_unimpl</key>
        <name>Null pointer dereferences : Dereference null return (stat)</name>
        <internalKey>STATIC_C_NULL_RETURNS_unimpl</internalKey>
        <description>Return value of function, which is statistically inferred to return null, but with no source code available, is dereferenced</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 4-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Standard Conversions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 4-5-1_none</internalKey>
        <description>Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, and !, the equality operators == and !=, the unary &amp; operator, and the conditional operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Input/Output</name>
        <internalKey>STATIC_C_CERT FIO51-CPP_none</internalKey>
        <description>Close files when they are no longer needed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC52-CPP_none</internalKey>
        <description>Value-returning functions must return a value from all exit paths.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 4-5-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Standard Conversions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 4-5-2_none</internalKey>
        <description>Expressions with type enum shall not be used as operands to built-in operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, and &gt;=.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_RETURN_LOCAL_escape_local_addr_to_fields_or_globals</key>
        <name>Memory - illegal accesses : Pointer to local outside scope</name>
        <internalKey>STATIC_C_RETURN_LOCAL_escape_local_addr_to_fields_or_globals</internalKey>
        <description>Pointer to a local stack variable stored in a field or global variable</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_RETURN_LOCAL_none</key>
        <name>Memory - illegal accesses : Pointer to local outside scope</name>
        <internalKey>STATIC_C_RETURN_LOCAL_none</internalKey>
        <description>Pointer to a local stack variable returned or used outside scope</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M18-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M18-2-1_none</internalKey>
        <description>The macro offsetof shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.8_none</internalKey>
        <description>Variable-length array types shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.5_none</internalKey>
        <description>Declarations should contain no more than two levels of pointer nesting.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.4_none</internalKey>
        <description>The +, -, += and -= operators should not be applied to an expression of pointer type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.SHIFT_COUNT_TOO_LARGE_none</key>
        <name>Integer handling issues : Integer overflow warning</name>
        <internalKey>STATIC_C_PW.SHIFT_COUNT_TOO_LARGE_none</internalKey>
        <description>An integer overflow occurs at compile time when parsing this expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.7_none</internalKey>
        <description>Flexible array members shall not be declared.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.6_none</internalKey>
        <description>The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.1_none</internalKey>
        <description>A pointer resulting from arithmetic on a pointer operand shall address an elements of the same array as that pointer operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-10-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-10-1_none</internalKey>
        <description>Only nullptr literal shall be used as the null-pointer-constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.3_none</internalKey>
        <description>The relational operators &gt;, &gt;=, &lt; and &lt;=  shall only be applied to pointers that point into the same object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 18.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 18.2_none</internalKey>
        <description>Subtraction between pointers shall only be applied to pointers that address elements of the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL53-CPP_none</internalKey>
        <description>Do not write syntactically ambiguous declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CTOR_DTOR_LEAK_none</key>
        <name>Resource leaks : Resource leak in object</name>
        <internalKey>STATIC_C_CTOR_DTOR_LEAK_none</internalKey>
        <description>Constructor allocates memory but destructor does not free it</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 liberr_none</key>
        <name>Coding standard violation : ISO TS17961 2013 liberr</name>
        <internalKey>STATIC_C_ISO TS17961 2013 liberr_none</internalKey>
        <description>Failing to detect and handle standard library errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-6-1_none</internalKey>
        <description>Functions declared with the [[noreturn]] attribute shall not return.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL36-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL36-C_none</internalKey>
        <description>Do not declare an identifier with conflicting linkage classifications.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-1_none</internalKey>
        <description>Functions shall not be defined using the ellipsis notation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-2_none</internalKey>
        <description>All exit paths from a function with non-void return type shall have an explicit return statement with an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-5_none</internalKey>
        <description>&quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-4_none</internalKey>
        <description>Multiple output values from a function should be returned as a struct or tuple.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-7_PASS_BY_REFERENCE</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-7_PASS_BY_REFERENCE</internalKey>
        <description>&quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-7_PASS_BY_VALUE</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-7_PASS_BY_VALUE</internalKey>
        <description>&quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-7_none</internalKey>
        <description>&quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-6_none</internalKey>
        <description>&quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT30-C_OVERFLOW_CVR_AFTER_OP</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT30-C_OVERFLOW_CVR_AFTER_OP</internalKey>
        <description>Ensure that unsigned integer operations do not wrap.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT30-C_OVERFLOW_ON_OP</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT30-C_OVERFLOW_ON_OP</internalKey>
        <description>Ensure that unsigned integer operations do not wrap.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT30-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT30-C_none</internalKey>
        <description>Ensure that unsigned integer operations do not wrap.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-9_none</internalKey>
        <description>&quot;in-out&quot; parameters declared as T &amp; shall be modified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-7-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-7-1_none</internalKey>
        <description>The signal handling facilities of &lt;csignal&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 27-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Input/Output Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 27-0-1_none</internalKey>
        <description>The stream input/output library &lt;cstdio&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-8_none</internalKey>
        <description>Output parameters shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_COMPARE_comparator_misuse</key>
        <name>API usage errors : Misuse of memcmp-style function</name>
        <internalKey>STATIC_C_BAD_COMPARE_comparator_misuse</internalKey>
        <description>A memcmp-style function is used assuming that it returns -1, 0, or 1.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_COMPARE_misuse_of_not</key>
        <name>Incorrect expression : Unintended comparison to logical negation</name>
        <internalKey>STATIC_C_BAD_COMPARE_misuse_of_not</internalKey>
        <description>Logical negation is applied to a comparison operand instead of the comparison result.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_COMPARE_none</key>
        <name>Incorrect expression : Function address comparison</name>
        <internalKey>STATIC_C_BAD_COMPARE_none</internalKey>
        <description>Address of function compared to zero</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_COMPARE_null_misuse</key>
        <name>Incorrect expression : Inequality comparison against NULL</name>
        <internalKey>STATIC_C_BAD_COMPARE_null_misuse</internalKey>
        <description>Comparing a pointer against NULL using an operator such as &lt; or &gt;=.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_COMPARE_string_lit_comparison</key>
        <name>Incorrect expression : Pointer comparison with string literal</name>
        <internalKey>STATIC_C_BAD_COMPARE_string_lit_comparison</internalKey>
        <description>Comparing against the address of a string literal.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.1_none</internalKey>
        <description>Identifiers (internal and external) shall not rely on the significance of more than 31 characters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.2_none</internalKey>
        <description>Identifiers in an inner scope shall not use the same name as an identfier in an outer scope, and therefore hide that identfier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 ptrcomp_none</key>
        <name>Coding standard violation : ISO TS17961 2013 ptrcomp</name>
        <internalKey>STATIC_C_ISO TS17961 2013 ptrcomp_none</internalKey>
        <description>Accessing an object through a pointer to an incompatible type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR50-CPP_none</internalKey>
        <description>Guarantee that container indices and iterators are within the valid range.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.11_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.11_none</internalKey>
        <description>The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.12_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.12_none</internalKey>
        <description>When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialization.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.2_none</internalKey>
        <description>The value of an expression shall be the same under any order of evaluation that the standard permits.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.1_none</internalKey>
        <description>Limited dependence should be placed on C&apos;s operator precedence rules in expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP30-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP30-C_none</internalKey>
        <description>Do not depend on the order of evaluation for side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-3-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-3-4_none</internalKey>
        <description>using-directives shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.8_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.8_none</internalKey>
        <description>The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M8-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M8-3-1_none</internalKey>
        <description>Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-3-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-3-5_none</internalKey>
        <description>Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.7_none</internalKey>
        <description>Bitwise operators shall not be applied to operands whose underlying type is signed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-3-2_none</internalKey>
        <description>The identifier main shall not be used for a function other than the global function main.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-3-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-3-3_none</internalKey>
        <description>There shall be no unnamed namespaces in header files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.9_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.9_none</internalKey>
        <description>The unary minus operator shall not be applied to an expression whose underlying type is unsigned.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.4_none</internalKey>
        <description>The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO39-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO39-C_none</internalKey>
        <description>Do not alternately input and output from a stream without an intervening flush or positioning call.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-3-1_none</internalKey>
        <description>The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.3_none</internalKey>
        <description>The sizeof operator shall not be used on expressions that contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.6_none</internalKey>
        <description>The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean. Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, != and ?:).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.5_none</internalKey>
        <description>The operands of a logical &amp;&amp; or || shall be primary-expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.5_none</internalKey>
        <description>No object or function identifier with static storage duration should be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.6_none</internalKey>
        <description>No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.3_none</internalKey>
        <description>A typedef name shall be a unique identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.4_none</internalKey>
        <description>A tag name shall be a unique identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-3-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-3-6_none</internalKey>
        <description>using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 5.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 5.7_none</internalKey>
        <description>No identifier name should be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-5-2_none</internalKey>
        <description>The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FLP32-C_none</key>
        <name>Coding standard violation : CERT-C Floating Point</name>
        <internalKey>STATIC_C_CERT FLP32-C_none</internalKey>
        <description>Prevent or detect domain and range errors in math functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-5-1_none</internalKey>
        <description>A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-3-1_none</internalKey>
        <description>The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-1-3_none</internalKey>
        <description>User defined literals operators shall only perform conversion of passed parameters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-3-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-3-3_none</internalKey>
        <description>A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-3-2_none</internalKey>
        <description>Each overriding virtual function shall be declared with the virtual keyword.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_DC.STRING_BUFFER_none</key>
        <name>Security best practices violations : Calling risky function</name>
        <internalKey>STATIC_C_DC.STRING_BUFFER_none</internalKey>
        <description>The called function is unsafe for security related code</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 taintstrcpy_none</key>
        <name>Coding standard violation : ISO TS17961 2013 taintstrcpy</name>
        <internalKey>STATIC_C_ISO TS17961 2013 taintstrcpy_none</internalKey>
        <description>Tainted strings are passed to a string copying function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 16.10_none</key>
        <name>Coding standard violation : MISRA C-2004 Functions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 16.10_none</internalKey>
        <description>If a function returns error information, then that error information shall be tested.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.10_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.10_none</internalKey>
        <description>All declarations and definitions of objects or functions at file scope shall have internal linkage unless external linkage is required.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.14_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.14_none</internalKey>
        <description>All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-3-1_none</internalKey>
        <description>There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP57-CPP_NON_TRIVIAL_NOR_STDLAYOUT</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP57-CPP_NON_TRIVIAL_NOR_STDLAYOUT</internalKey>
        <description>Prefer special member functions and overloaded operators to C Standard Library functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP57-CPP_TRIVIAL_OR_STDLAYOUT</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP57-CPP_TRIVIAL_OR_STDLAYOUT</internalKey>
        <description>Prefer special member functions and overloaded operators to C Standard Library functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP57-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP57-CPP_none</internalKey>
        <description>Prefer special member functions and overloaded operators to C Standard Library functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC53-CPP_none</internalKey>
        <description>Do not return from a function declared [[noreturn]].</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.10_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.10_none</internalKey>
        <description>The # and ## preprocessor operators should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_RESTORE_likely</key>
        <name>Control flow issues : Failure to restore non-local value</name>
        <internalKey>STATIC_C_MISSING_RESTORE_likely</internalKey>
        <description>Handles classes of flow where a function is either saving some external value, modifying the external value, and then clearly intending to restore it to its original state but failing to do so along one of many paths; or else is checking whether an external has some expected value, modifying the external value, then clearly intending to restore it to the expected value but failing to do so along a path.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_RESTORE_none</key>
        <name>Control flow issues : Failure to restore non-local value</name>
        <internalKey>STATIC_C_MISSING_RESTORE_none</internalKey>
        <description>Handles classes of flow where a function is either saving some external value, modifying the external value, and then clearly intending to restore it to its original state but failing to do so along one of many paths; or else is checking whether an external has some expected value, modifying the external value, then clearly intending to restore it to the expected value but failing to do so along a path.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_RESTORE_possible</key>
        <name>Possible Control flow issues : Possible failure to restore non-local value</name>
        <internalKey>STATIC_C_MISSING_RESTORE_possible</internalKey>
        <description>Handles classes of flow where a function is either saving some external value, modifying the external value, and then possibly intending to restore it to its original state but not doing so along one of many paths; or else is checking whether an external has some expected value, modifying the external value, then possibly intending to restore it to the expected value but not doing so along a path.  Such code is only incorrect if the intent really was to restore along all paths.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.11_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.11_none</internalKey>
        <description>A macro parameter immediately following a # operator shall not immediately be followed by a ## operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-1-2_none</internalKey>
        <description>User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.12_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.12_none</internalKey>
        <description>A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 20.13_none</key>
        <name>Coding standard violation : MISRA C-2012 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 20.13_none</internalKey>
        <description>A line whose first token is # shall be a valid preprocessing directive.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SECURE_TEMP_none</key>
        <name>Security best practices violations : Insecure temporary file</name>
        <internalKey>STATIC_C_SECURE_TEMP_none</internalKey>
        <description>Using an insecure temporary file creation function</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M2-13-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M2-13-4_none</internalKey>
        <description>Literal suffixes shall be upper case.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-2-1_none</internalKey>
        <description>An object shall not be assigned to an overlapping object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M2-13-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M2-13-2_none</internalKey>
        <description>Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M2-13-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M2-13-3_none</internalKey>
        <description>A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M18-0-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M18-0-5_none</internalKey>
        <description>The unbounded functions of library &lt;cstring&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM51-CPP_none</internalKey>
        <description>Properly deallocate dynamically allocated resources.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M18-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M18-0-3_none</internalKey>
        <description>The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M18-0-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M18-0-4_none</internalKey>
        <description>The time handling functions of library &lt;ctime&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR31-C_none</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR31-C_none</internalKey>
        <description>Guarantee that storage for strings has sufficient space for character data and the null terminator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-14-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-14-1_none</internalKey>
        <description>The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-9-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-9-1_none</internalKey>
        <description>The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 invptr_none</key>
        <name>Coding standard violation : ISO TS17961 2013 invptr</name>
        <internalKey>STATIC_C_ISO TS17961 2013 invptr_none</internalKey>
        <description>Forming or using out-of-bounds pointers or array subscripts.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-9-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-9-3_none</internalKey>
        <description>The underlying bit representations of floating-point values shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-9-2_INTEGER_TYPE</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-9-2_INTEGER_TYPE</internalKey>
        <description>typedefs that indicate size and signedness should be used in place of the basic numerical types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-9-2_NON_INTEGER_TYPE</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-9-2_NON_INTEGER_TYPE</internalKey>
        <description>typedefs that indicate size and signedness should be used in place of the basic numerical types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-9-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-9-2_none</internalKey>
        <description>typedefs that indicate size and signedness should be used in place of the basic numerical types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SLEEP_none</key>
        <name>Program hangs : Waiting while holding a lock</name>
        <internalKey>STATIC_C_SLEEP_none</internalKey>
        <description>A lock is held while waiting for a long running or blocking operation to complete</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM36-C_none</key>
        <name>Coding standard violation : CERT-C Memory Management</name>
        <internalKey>STATIC_C_CERT MEM36-C_none</internalKey>
        <description>Do not modify the alignment of objects by calling realloc().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINTENDED_INTEGER_DIVISION_none</key>
        <name>Incorrect expression : Result is not floating-point</name>
        <internalKey>STATIC_C_UNINTENDED_INTEGER_DIVISION_none</internalKey>
        <description>When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP43-C_OVERLAP</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP43-C_OVERLAP</internalKey>
        <description>Avoid undefined behavior when using restrict-qualified pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP43-C_RESTRICT_ASSIGNED_TO_RESTRICT</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP43-C_RESTRICT_ASSIGNED_TO_RESTRICT</internalKey>
        <description>Avoid undefined behavior when using restrict-qualified pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP43-C_RESTRICT_FORMAT_MODIFIED</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP43-C_RESTRICT_FORMAT_MODIFIED</internalKey>
        <description>Avoid undefined behavior when using restrict-qualified pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP43-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP43-C_none</internalKey>
        <description>Avoid undefined behavior when using restrict-qualified pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A26-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Algorithms Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A26-5-1_none</internalKey>
        <description>Pseudorandom numbers shall not be generated using std::rand().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A26-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Algorithms Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A26-5-2_none</internalKey>
        <description>Random number engines shall not be default-initialized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-5-1_none</internalKey>
        <description>Unions shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-2-3_none</internalKey>
        <description>Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-2-2_none</internalKey>
        <description>Floating-point expressions shall not be directly or indirectly tested for equality or inequality.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-2-1_none</internalKey>
        <description>Assignment operators shall not be used in sub-expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV30-C_ALLFUNC</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV30-C_ALLFUNC</internalKey>
        <description>Do not modify the object referenced by the return value of certain functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV30-C_NOASCTIME</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV30-C_NOASCTIME</internalKey>
        <description>Do not modify the object referenced by the return value of certain functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV30-C_none</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV30-C_none</internalKey>
        <description>Do not modify the object referenced by the return value of certain functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.2_CPP_STYLE_FUNCTION_CALL</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.2_CPP_STYLE_FUNCTION_CALL</internalKey>
        <description>The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.2_C_STYLE_FUNCTION_CALL</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.2_C_STYLE_FUNCTION_CALL</internalKey>
        <description>The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.2_FUNCTIONCALL_IN_ARGUMENTS</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.2_FUNCTIONCALL_IN_ARGUMENTS</internalKey>
        <description>The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.2_FUNCTION_BINARY_OPERATION</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.2_FUNCTION_BINARY_OPERATION</internalKey>
        <description>The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.2_READ_VOLATILE_TWICE</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.2_READ_VOLATILE_TWICE</internalKey>
        <description>The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.2_none</internalKey>
        <description>The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.1_none</internalKey>
        <description>Initializer lists shall not contain persistent side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-2_different_definitions</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-2_different_definitions</internalKey>
        <description>The One Definition Rule shall not be violated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-2_missing_definition</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-2_missing_definition</internalKey>
        <description>The One Definition Rule shall not be violated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-2_multiple_definitions</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-2_multiple_definitions</internalKey>
        <description>The One Definition Rule shall not be violated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-2_none</internalKey>
        <description>The One Definition Rule shall not be violated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.4_none</internalKey>
        <description>The result of an assignment operator should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-1_none</internalKey>
        <description>All declarations of an object or function shall have compatible types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.3_none</internalKey>
        <description>A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.*</key>
        <name>Coverity PW : Parse Warnings</name>
        <internalKey>STATIC_C_PW.*</internalKey>
        <description>Coverity PW : Parse Warnings</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>parse-warning</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_WARNING_no_null_terminator</key>
        <name>Memory - illegal accesses : Buffer not null terminated</name>
        <internalKey>STATIC_C_BUFFER_SIZE_WARNING_no_null_terminator</internalKey>
        <description>The string buffer may not have a null terminator if the source string&apos;s length is equal to the buffer size</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_WARNING_none</key>
        <name>Memory - illegal accesses : Buffer not null terminated</name>
        <internalKey>STATIC_C_BUFFER_SIZE_WARNING_none</internalKey>
        <description>The string buffer may not have a null terminator if the source string&apos;s length is equal to the buffer size</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 19-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Diagnostic Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 19-3-1_none</internalKey>
        <description>The error indicator errno shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP32-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP32-C_none</internalKey>
        <description>Do not access a volatile object through a nonvolatile reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 4.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Character Sets</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 4.1_none</internalKey>
        <description>Octal and hexadecimal escape sequences shall be terminated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_USELESS_CALL_none</key>
        <name>Incorrect expression : Useless call</name>
        <internalKey>STATIC_C_USELESS_CALL_none</internalKey>
        <description>A function is called that is only useful for its return value, and this value is ignored.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 4.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Character Sets</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 4.2_none</internalKey>
        <description>Trigraphs should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR32-C_none</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR32-C_none</internalKey>
        <description>Do not pass a non-null-terminated character sequence to a library function that expects a string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-1-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-1-3_none</internalKey>
        <description>All constructors that are callable with a single argument of fundamental type shall be declared explicit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-1-2_none</internalKey>
        <description>All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_STACK_USE_none</key>
        <name>Performance inefficiencies : Large stack use</name>
        <internalKey>STATIC_C_STACK_USE_none</internalKey>
        <description>Excessive use of stack memory by local variables or parameters</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-4_missing_definition</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-4_missing_definition</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-4_multiple_definitions</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-4_multiple_definitions</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-4_none</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.6_none</internalKey>
        <description>The operand of the sizeof operator shall not contain any expression which has potential side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-2-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-2-3_none</internalKey>
        <description>A type, object or function that is used in multiple translation units shall be declared in one and only one file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 13.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Side Effects</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 13.5_none</internalKey>
        <description>The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-1-1_CALL_VIRTUAL_FUNC_CDTOR_FINAL</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-1-1_CALL_VIRTUAL_FUNC_CDTOR_FINAL</internalKey>
        <description>An object&apos;s dynamic type shall not be used from the body of its constructor or destructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-1-1_CALL_VIRTUAL_FUNC_CDTOR_NONFINAL</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-1-1_CALL_VIRTUAL_FUNC_CDTOR_NONFINAL</internalKey>
        <description>An object&apos;s dynamic type shall not be used from the body of its constructor or destructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-1-1_USE_TYPEID_DYNAMIC_CASE_IN_CDTOR</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-1-1_USE_TYPEID_DYNAMIC_CASE_IN_CDTOR</internalKey>
        <description>An object&apos;s dynamic type shall not be used from the body of its constructor or destructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-1-1_none</internalKey>
        <description>An object&apos;s dynamic type shall not be used from the body of its constructor or destructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 intoflow_none</key>
        <name>Coding standard violation : ISO TS17961 2013 intoflow</name>
        <internalKey>STATIC_C_ISO TS17961 2013 intoflow_none</internalKey>
        <description>Overflowing signed integers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_SHIFT_none</key>
        <name>Integer handling issues : Bad bit shift operation</name>
        <internalKey>STATIC_C_BAD_SHIFT_none</internalKey>
        <description>A bit shift operation has a shift amount which is too large or has a negative value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_URL_MANIPULATION_none</key>
        <name>Medium impact security : URL manipulation</name>
        <internalKey>STATIC_C_URL_MANIPULATION_none</internalKey>
        <description>A user-controllable string is used to specify a URL that is used in a connection. An attacker can modify the URL scheme to access a local file. An attacker can also mount a phishing attack by modifying the URL value to point to a malicious website.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-1-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-1-6_none</internalKey>
        <description>Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-1-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-1-5_none</internalKey>
        <description>Common class initialization for non-constant members shall be done by a delegating constructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-1-4_none</internalKey>
        <description>All constructors that are callable with a single argument of fundamental type shall be declared explicit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-5-1_none</internalKey>
        <description>A function shall not return a reference or a pointer to a parameter that is passed by reference to const.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FLP30-C_none</key>
        <name>Coding standard violation : CERT-C Floating Point</name>
        <internalKey>STATIC_C_CERT FLP30-C_none</internalKey>
        <description>Do not use floating-point variables as loop counters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-5-2_none</internalKey>
        <description>Functions shall not call themselves, either directly or indirectly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-1-3_none</internalKey>
        <description>If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-1-2_none</internalKey>
        <description>Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-1-1_none</internalKey>
        <description>Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OPEN_ARGS_none</key>
        <name>API usage errors : Insecure file permissions</name>
        <internalKey>STATIC_C_OPEN_ARGS_none</internalKey>
        <description>The open system call may create a file, but no permissions are specified</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 xfilepos_none</key>
        <name>Coding standard violation : ISO TS17961 2013 xfilepos</name>
        <internalKey>STATIC_C_ISO TS17961 2013 xfilepos_none</internalKey>
        <description>Using a value for fsetpos other than a value returned from fgetpos.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.ALLOC_double_free</key>
        <name>Memory - illegal accesses : COM BSTR double free</name>
        <internalKey>STATIC_C_COM.BSTR.ALLOC_double_free</internalKey>
        <description>Violation of the COM coding standard by freeing a BSTR more than once</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.ALLOC_free_uninit</key>
        <name>Memory - illegal accesses : COM BSTR uninitialized var free</name>
        <internalKey>STATIC_C_COM.BSTR.ALLOC_free_uninit</internalKey>
        <description>Violation of the COM coding standard by freeing an uninitialized BSTR</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.ALLOC_leak</key>
        <name>Resource leaks : COM BSTR memory leak</name>
        <internalKey>STATIC_C_COM.BSTR.ALLOC_leak</internalKey>
        <description>Violation of the COM coding standard by not freeing a BSTR whose last reference is lost in this function</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.ALLOC_none</key>
        <name>Memory - illegal accesses : COM BSTR error</name>
        <internalKey>STATIC_C_COM.BSTR.ALLOC_none</internalKey>
        <description>Violation of the COM coding standard by not freeing a BSTR, or by freeing a non-owned BSTR</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.ALLOC_use_after_free</key>
        <name>Memory - illegal accesses : Freeing non-owned COM BSTR</name>
        <internalKey>STATIC_C_COM.BSTR.ALLOC_use_after_free</internalKey>
        <description>Violation of the COM coding standard by freeing a non-owned BSTR</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.ALLOC_use_uninit</key>
        <name>Memory - illegal accesses : COM BSTR uninitialized var use</name>
        <internalKey>STATIC_C_COM.BSTR.ALLOC_use_uninit</internalKey>
        <description>Violation of the COM coding standard by using an uninitialized BSTR</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.ADDROF_LEAK_none</key>
        <name>Resource leaks : Managed pointer overwrite</name>
        <internalKey>STATIC_C_COM.ADDROF_LEAK_none</internalKey>
        <description>A non-null pointer managed by a CComBSTR or CComPtr instance is passed by address to a function call. The value of the pointer can potentially be overwritten during the function call causing allocated memory to be leaked.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR55-CPP_none</internalKey>
        <description>Honor exception specifications.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM50-CPP_none</internalKey>
        <description>Do not access freed memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ENUM_AS_BOOLEAN_none</key>
        <name>Incorrect expression : Misuse of enum</name>
        <internalKey>STATIC_C_ENUM_AS_BOOLEAN_none</internalKey>
        <description>An enum-typed expression is used in a Boolean conditional context.  The enum type does not appear to have a distinguished false (zero) value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A11-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Member Access Control</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A11-3-1_none</internalKey>
        <description>Friend declarations shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP45-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP45-C_none</internalKey>
        <description>Do not perform assignments in selection statements.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_RISKY_CRYPTO_custom</key>
        <name>Medium impact security : Violation of user-specified RISKY_CRYPTO policy</name>
        <internalKey>STATIC_C_RISKY_CRYPTO_custom</internalKey>
        <description>A cryptographic function was used in such a way as to violate the user-specified RISKY_CRYPTO policy. This violation may indicate that an attacker could decrypt or otherwise interfere with the encrypted or hashed data.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_RISKY_CRYPTO_hashing</key>
        <name>Medium impact security : Risky cryptographic hashing function</name>
        <internalKey>STATIC_C_RISKY_CRYPTO_hashing</internalKey>
        <description>A risky hashing function was used. This may allow an attacker to produce collisions on the hash or execute length extension attacks.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_RISKY_CRYPTO_none</key>
        <name>Medium impact security : Risky cryptographic function</name>
        <internalKey>STATIC_C_RISKY_CRYPTO_none</internalKey>
        <description>A risky cryptographic function was used. This may allow an attacker to decrypt encrypted data as the quality of the cryptographic protection is suspect.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WRAPPER_ESCAPE_COM_deref_read_after_free</key>
        <name>Memory - illegal accesses : Freed COM internal read</name>
        <internalKey>STATIC_C_WRAPPER_ESCAPE_COM_deref_read_after_free</internalKey>
        <description>Reads target of a freed internal pointer of a COM object</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WRAPPER_ESCAPE_COM_deref_write_after_free</key>
        <name>Memory - corruptions : Freed COM internal write</name>
        <internalKey>STATIC_C_WRAPPER_ESCAPE_COM_deref_write_after_free</internalKey>
        <description>Write to target of a freed internal pointer of a COM object</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WRAPPER_ESCAPE_COM_use_after_free</key>
        <name>Memory - illegal accesses : COM object use after free</name>
        <internalKey>STATIC_C_WRAPPER_ESCAPE_COM_use_after_free</internalKey>
        <description>An internal pointer of a COM string object remains available after the object is freed</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WRAPPER_ESCAPE_deref_read_after_free</key>
        <name>Memory - illegal accesses : Freed internal location read</name>
        <internalKey>STATIC_C_WRAPPER_ESCAPE_deref_read_after_free</internalKey>
        <description>Reads target of a freed internal pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WRAPPER_ESCAPE_deref_write_after_free</key>
        <name>Memory - corruptions : Freed internal location write</name>
        <internalKey>STATIC_C_WRAPPER_ESCAPE_deref_write_after_free</internalKey>
        <description>Write to target of a freed internal pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WRAPPER_ESCAPE_none</key>
        <name>Memory - illegal accesses : Wrapper object use after free</name>
        <internalKey>STATIC_C_WRAPPER_ESCAPE_none</internalKey>
        <description>An internal pointer of a wrapper object remains available after the object is freed</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-1_none</internalKey>
        <description>The value of an expression shall be the same under any order of evaluation that the standard permits.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-2_none</internalKey>
        <description>Limited dependence should be placed on C++ operator precedence rules in expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-11_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-11_none</internalKey>
        <description>A smart pointer shall only be used as a parameter type if it expresses lifetime semantics.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-7_none</internalKey>
        <description>The condition of a switch statement shall not have bool type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.CONVERSION_TO_POINTER_LOSES_BITS_none</key>
        <name>Integer handling issues : Lossy integer to pointer</name>
        <internalKey>STATIC_C_PW.CONVERSION_TO_POINTER_LOSES_BITS_none</internalKey>
        <description>A cast from an integer to a pointer of narrower precision</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-12_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-12_none</internalKey>
        <description>A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-6_none</internalKey>
        <description>The final clause of a switch statement shall be the default-clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-5_none</internalKey>
        <description>An unconditional throw or break statement shall terminate every non-empty switch-clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-10_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-10_none</internalKey>
        <description>A parameter shall be passed by reference if it can&apos;t be NULL.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-4_none</internalKey>
        <description>A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP51-CPP_none</internalKey>
        <description>Do not delete an array through a pointer of the incorrect type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-3_none</internalKey>
        <description>A switch statement shall be a well-formed switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-3-2_none</internalKey>
        <description>Member functions shall not return non-const handles to class-data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-2_none</internalKey>
        <description>All if ... else if constructs shall be terminated with an else clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-3-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-3-3_none</internalKey>
        <description>If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-4-13_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-4-13_none</internalKey>
        <description>A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-4-1_none</internalKey>
        <description>An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_array_index_read</key>
        <name>Memory - illegal accesses : Overflowed array index read</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_array_index_read</internalKey>
        <description>Read from array at integer overflowed index</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_array_index_write</key>
        <name>Memory - corruptions : Overflowed array index write</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_array_index_write</internalKey>
        <description>Write to array at integer-overflowed index</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_const_overflow</key>
        <name>Integer handling issues : Overflowed constant</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_const_overflow</internalKey>
        <description>Integer overflow  occurs in arithmetic on constant operands</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_critical_argument</key>
        <name>Insecure data handling : Integer overflowed argument</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_critical_argument</internalKey>
        <description>An integer overflow occurs, with the overflowed value used as an argument to a function</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_none</key>
        <name>Insecure data handling : Integer overflow</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_none</internalKey>
        <description>An integer overflow occurs, with the overflowed value used in a sensitive operation</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_pointer_deref_read</key>
        <name>Memory - illegal accesses : Overflowed pointer read</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_pointer_deref_read</internalKey>
        <description>Reads target of an integer-overflowed pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_pointer_deref_write</key>
        <name>Memory - corruptions : Overflowed pointer write</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_pointer_deref_write</internalKey>
        <description>Write to target of an integer-overflowed pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INTEGER_OVERFLOW_return_value_error</key>
        <name>Insecure data handling : Overflowed return value</name>
        <internalKey>STATIC_C_INTEGER_OVERFLOW_return_value_error</internalKey>
        <description>An integer overflow occurs, with the overflowed value used as the return value of the function</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-3-1_none</internalKey>
        <description>const member functions shall not return non-const pointers or references to class-data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-5_none</internalKey>
        <description>There shall be no implicit floating-integral conversions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-6_none</internalKey>
        <description>An implicit integral or floating-point conversion shall not reduce the size of the underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-3_none</internalKey>
        <description>A cvalue expression shall not be implicitly converted to a different underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-4_none</internalKey>
        <description>An implicit integral conversion shall not change the signedness of the underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-9_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-9_none</internalKey>
        <description>An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-7_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-7_none</internalKey>
        <description>There shall be no explicit floating-integral conversions of a cvalue expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-8_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-8_none</internalKey>
        <description>An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 1.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Environment</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 1.1_none</internalKey>
        <description>All code shall conform to ISO/IEC 9899:1990 &quot;Programming languages -- C&quot;, amended and corrected by ISO/IEC 9899/COR1:1995, ISO/IEC 9899/AMD1:1995, and ISO/IEC 9899/COR2:1996.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-10-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-10-1_none</internalKey>
        <description>An identifier declared in an inner scope shall not hide an identifier declared in an outer scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-14-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-14-1_none</internalKey>
        <description>The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP34-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP34-C_none</internalKey>
        <description>Do not dereference null pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-5-1_none</internalKey>
        <description>All variables shall have a defined value before they are used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.2_none</internalKey>
        <description>The goto statement shall jump to a label declared later in the same function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-5-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-5-2_none</internalKey>
        <description>Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.1_none</internalKey>
        <description>The goto statement should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-10-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-10-6_none</internalKey>
        <description>A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-10-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-10-5_none</internalKey>
        <description>An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-10-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-10-4_none</internalKey>
        <description>The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 14.10_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 14.10_none</internalKey>
        <description>All if ... else if constructs shall be terminated with an else clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COPY_PASTE_ERROR_none</key>
        <name>Incorrect expression : Copy-paste error</name>
        <internalKey>STATIC_C_COPY_PASTE_ERROR_none</internalKey>
        <description>A copied piece of code is inconsistent with the original</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-5-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-5-3_none</internalKey>
        <description>In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 strmod_none</key>
        <name>Coding standard violation : ISO TS17961 2013 strmod</name>
        <internalKey>STATIC_C_ISO TS17961 2013 strmod_none</internalKey>
        <description>Modifying string literals.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 6.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Types</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 6.1_none</internalKey>
        <description>Bit-fields shall only be declared with an appropriate type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 6.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Types</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 6.2_none</internalKey>
        <description>Single-bit named bit fields shall not be of a signed type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-5-2_none</internalKey>
        <description>A for loop shall contain a single loop-counter which shall not have floating-point type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-5-1_none</internalKey>
        <description>A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR34-C_none</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR34-C_none</internalKey>
        <description>Cast characters to unsigned char before converting to larger integer sizes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.7_none</internalKey>
        <description>All if ... else if constructs shall be terminated with an else statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-5-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-5-4_none</internalKey>
        <description>For-init-statement and expression should not perform actions other than loop-counter initialization and modification.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.4_none</internalKey>
        <description>There should be no more than one break or goto statement used to terminate any iteration statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-5-3_none</internalKey>
        <description>Do statements should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-4-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-4-1_none</internalKey>
        <description>An identifier declared to be an object or type shall be defined in a block that minimizes its visibility.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.3_none</internalKey>
        <description>Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.6_RULE_REPORTS_IF</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.6_RULE_REPORTS_IF</internalKey>
        <description>The body of an iteration-statement or a selection-statement shall be a compound-statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.6_RULE_REPORTS_OTHER</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.6_RULE_REPORTS_OTHER</internalKey>
        <description>The body of an iteration-statement or a selection-statement shall be a compound-statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.6_none</internalKey>
        <description>The body of an iteration-statement or a selection-statement shall be a compound-statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 15.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 15.5_none</internalKey>
        <description>A function should have a single point of exit at the end.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-3-1_none</internalKey>
        <description>All overloads of a function shall be visible from where it is called.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_NEGATIVE_RETURNS_array_index_read</key>
        <name>Memory - illegal accesses : Negative array index read</name>
        <internalKey>STATIC_C_NEGATIVE_RETURNS_array_index_read</internalKey>
        <description>Negative value used to index an array in a read operation</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NEGATIVE_RETURNS_array_index_write</key>
        <name>Memory - corruptions : Negative array index write</name>
        <internalKey>STATIC_C_NEGATIVE_RETURNS_array_index_write</internalKey>
        <description>Negative value used to index an array in a write operation</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NEGATIVE_RETURNS_critical_argument</key>
        <name>Error handling issues : Argument cannot be negative</name>
        <internalKey>STATIC_C_NEGATIVE_RETURNS_critical_argument</internalKey>
        <description>Negative value used as  argument to a function expecting a positive value (for example, size of buffer or allocation)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NEGATIVE_RETURNS_loop_bound</key>
        <name>Program hangs : Negative loop bound</name>
        <internalKey>STATIC_C_NEGATIVE_RETURNS_loop_bound</internalKey>
        <description>Negative value used as a loop upper bound</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NEGATIVE_RETURNS_none</key>
        <name>Integer handling issues : Improper use of negative value</name>
        <internalKey>STATIC_C_NEGATIVE_RETURNS_none</internalKey>
        <description>Negative value can be returned from function is not being checked before being used improperly</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 sizeofptr_none</key>
        <name>Coding standard violation : ISO TS17961 2013 sizeofptr</name>
        <internalKey>STATIC_C_ISO TS17961 2013 sizeofptr_none</internalKey>
        <description>Taking the size of a pointer to determine the size of the pointed-to type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A17-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Library Introduction</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A17-6-1_none</internalKey>
        <description>Non-standard entities shall not be added to standard namespaces.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP50-CPP_none</internalKey>
        <description>Do not depend on the order of evaluation for side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.EXPR_HAS_NO_EFFECT_none</key>
        <name>Incorrect expression : Expression with no effect</name>
        <internalKey>STATIC_C_PW.EXPR_HAS_NO_EFFECT_none</internalKey>
        <description>An expression with no side-effect or unintended effect indicates a possible logic flaw</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-3-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-3-5_none</internalKey>
        <description>A user-defined assignment operator shall not be virtual.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 taintnoproto_none</key>
        <name>Coding standard violation : ISO TS17961 2013 taintnoproto</name>
        <internalKey>STATIC_C_ISO TS17961 2013 taintnoproto_none</internalKey>
        <description>Using a tainted value as an argument to an unprototyped function pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 uninitref_none</key>
        <name>Coding standard violation : ISO TS17961 2013 uninitref</name>
        <internalKey>STATIC_C_ISO TS17961 2013 uninitref_none</internalKey>
        <description>Referencing uninitialized memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.INTEGER_OVERFLOW_none</key>
        <name>Integer handling issues : Integer overflow warning</name>
        <internalKey>STATIC_C_PW.INTEGER_OVERFLOW_none</internalKey>
        <description>An integer overflow occurs at compile time when parsing this expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_RW.*</key>
        <name>Coverity RW : Recovery Warnings</name>
        <internalKey>STATIC_C_RW.*</internalKey>
        <description>Coverity RW : Recovery Warnings</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>recovery-warning</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-3-3_none</internalKey>
        <description>Virtual functions shall not be introduced in a final class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-3-2_none</internalKey>
        <description>Each overriding virtual function shall be declared with the override or final specifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-3-1_none</internalKey>
        <description>Virtual function declaration shall contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR54-CPP_none</internalKey>
        <description>Catch handlers should order their parameter types from most derived to least derived.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-3-1_none</internalKey>
        <description>Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M8-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M8-0-1_none</internalKey>
        <description>An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_LOCK_none</key>
        <name>Concurrent data access violations : Data race condition</name>
        <internalKey>STATIC_C_MISSING_LOCK_none</internalKey>
        <description>Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-9-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-9-1_none</internalKey>
        <description>Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 fileclose_none</key>
        <name>Coding standard violation : ISO TS17961 2013 fileclose</name>
        <internalKey>STATIC_C_ISO TS17961 2013 fileclose_none</internalKey>
        <description>Failing to close files or free dynamic memory when they are no longer needed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIGN_EXTENSION_none</key>
        <name>Integer handling issues : Unintended sign extension</name>
        <internalKey>STATIC_C_SIGN_EXTENSION_none</internalKey>
        <description>Value may be sign extended unintentionally</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-2_none</internalKey>
        <description>Limited dependence should be placed on C++ operator precedence rules in expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-4_none</internalKey>
        <description>An implicit integral conversion shall not change the signedness of the underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV34-C_none</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV34-C_none</internalKey>
        <description>Do not store pointers returned by certain functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.TOO_MANY_PRINTF_ARGS_none</key>
        <name>API usage errors : Printf arg count mismatch</name>
        <internalKey>STATIC_C_PW.TOO_MANY_PRINTF_ARGS_none</internalKey>
        <description>The number of arguments to printf does not match the format string</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-3_none</internalKey>
        <description>A cvalue expression shall not be implicitly converted to a different underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT36-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT36-C_none</internalKey>
        <description>Converting a pointer to integer or integer to pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-6_none</internalKey>
        <description>An implicit integral or floating-point conversion shall not reduce the size of the underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-5_none</internalKey>
        <description>There shall be no implicit floating-integral conversions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-8_none</internalKey>
        <description>An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-7_none</internalKey>
        <description>There shall be no explicit floating-integral conversions of a cvalue expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC33-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC33-C_none</internalKey>
        <description>Do not pass invalid data to the asctime() function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-9_none</internalKey>
        <description>An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-7-1_DATA_LOSS</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-7-1_DATA_LOSS</internalKey>
        <description>An integer expression shall not lead to data loss.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-7-1_INCREASE_SIZE</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-7-1_INCREASE_SIZE</internalKey>
        <description>An integer expression shall not lead to data loss.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-7-1_none</internalKey>
        <description>An integer expression shall not lead to data loss.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP36-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP36-C_none</internalKey>
        <description>Do not cast pointers into more strictly aligned pointer types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_cookie</key>
        <name>High impact security : Cleartext sensitive data in a cookie</name>
        <internalKey>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_cookie</internalKey>
        <description>Reading unencrypted sensitive data from a cookie.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_database</key>
        <name>Medium impact security : Cleartext sensitive data in a database</name>
        <internalKey>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_database</internalKey>
        <description>Reading unencrypted sensitive data from a database.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_file</key>
        <name>Low impact security : Cleartext sensitive data in a file</name>
        <internalKey>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_file</internalKey>
        <description>Reading unencrypted sensitive data from a file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_transmission</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_cleartext_transmission</internalKey>
        <description>Receiving sensitive data in cleartext from the network.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_none</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>STATIC_C_UNENCRYPTED_SENSITIVE_DATA_none</internalKey>
        <description>Receiving sensitive data in cleartext from the network.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-5-1_none</internalKey>
        <description>A pointer to member shall not access non-existent class members.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 libmod_none</key>
        <name>Coding standard violation : ISO TS17961 2013 libmod</name>
        <internalKey>STATIC_C_ISO TS17961 2013 libmod_none</internalKey>
        <description>Modifying the string returned by getenv, localeconv, setlocale, and strerror.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-13-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-13-3_none</internalKey>
        <description>A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M10-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M10-3-3_none</internalKey>
        <description>A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-13-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-13-2_none</internalKey>
        <description>Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot;) shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-0-1_none</internalKey>
        <description>The C library facilities shall only be accessed through C++ library headers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-13-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-13-5_none</internalKey>
        <description>Narrow and wide string literals shall not be concatenated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-0-2_none</internalKey>
        <description>The error state of a conversion from string to a numeric value shall be checked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-13-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-13-4_none</internalKey>
        <description>Literal suffixes shall be upper case.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-0-3_none</internalKey>
        <description>The library &lt;clocale&gt; (locale.h) and the setlocale function shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-4-1_none</internalKey>
        <description>An identifier declared to be an object or type shall be defined in a block that minimizes its visibility.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON37-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON37-C_none</internalKey>
        <description>Do not call signal() in a multithreaded program.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-13-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-13-1_none</internalKey>
        <description>Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_coverity-cov-cpp</key>
        <name>Coverity General COV-CPP</name>
        <internalKey>STATIC_C_coverity-cov-cpp</internalKey>
        <description>Coverity General COV-CPP</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR57-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR57-CPP_none</internalKey>
        <description>Do not leak resources when handling exceptions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-1_none</internalKey>
        <description>Constexpr or const specifiers shall be used for immutable data declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.5_none</internalKey>
        <description>A pointer to a FILE object shall not be dereferenced.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.6_none</internalKey>
        <description>The value of a pointer to a FILE shall not be used after the associated stream has been closed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.3_none</internalKey>
        <description>The same file shall not be open for read and write access at the same time on different streams.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.4_none</internalKey>
        <description>There shall be no attempt to write to a stream which has been opened as read-only.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-5_none</internalKey>
        <description>The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.1_none</internalKey>
        <description>All resources obtained dynamically by means of Standard Library functions shall be explicitly released.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-4_none</internalKey>
        <description>The register keyword shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.2_none</internalKey>
        <description>A block of memory shall only be freed if it was allocated by means of a Standard Library function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-3_none</internalKey>
        <description>CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-2_none</internalKey>
        <description>The constexpr specifier shall be used for values that can be determined at compile time.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-9_none</internalKey>
        <description>A class, structure, or enumeration shall not be declared in the definition of its type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON35-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON35-C_none</internalKey>
        <description>Avoid deadlock by locking in a predefined order.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-8_none</internalKey>
        <description>A non-type specifier shall be placed before a type specifier in a declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-7_none</internalKey>
        <description>Each expression statement and identifier declaration shall be placed on a separate line.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-1-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-1-6_none</internalKey>
        <description>The typedef specifier shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A16-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A16-6-1_none</internalKey>
        <description>#error directive shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_EVALUATION_ORDER_none</key>
        <name>Incorrect expression : Evaluation order violation</name>
        <internalKey>STATIC_C_EVALUATION_ORDER_none</internalKey>
        <description>Statement contains multiple side-effects on the same value with an undefined evaluation order</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_array_null</key>
        <name>Incorrect expression : Array compared against 0</name>
        <internalKey>STATIC_C_NO_EFFECT_array_null</internalKey>
        <description>Array compared against NULL pointer</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_bad_memset_fill_value</key>
        <name>Memory - illegal accesses : Memset fill value of &apos;0&apos;</name>
        <internalKey>STATIC_C_NO_EFFECT_bad_memset_fill_value</internalKey>
        <description>A memset fill value of ASCII character &apos;0&apos; is likely intended to be 0</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_bad_memset_truncated_fill</key>
        <name>Memory - illegal accesses : Memset fill truncated</name>
        <internalKey>STATIC_C_NO_EFFECT_bad_memset_truncated_fill</internalKey>
        <description>The memset fill value must be between -1 and 255, other values will be truncated</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_bad_memset_zero_size</key>
        <name>Memory - illegal accesses : Memset buffer size of 0</name>
        <internalKey>STATIC_C_NO_EFFECT_bad_memset_zero_size</internalKey>
        <description>A memset buffer size of 0 may indicate confusing the size and fill parameters</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_extra_comma</key>
        <name>Incorrect expression : Misused comma operator</name>
        <internalKey>STATIC_C_NO_EFFECT_extra_comma</internalKey>
        <description>Comma operator has a left sub-expression with no side-effects</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_incomplete_delete</key>
        <name>Resource leaks : Incomplete delete</name>
        <internalKey>STATIC_C_NO_EFFECT_incomplete_delete</internalKey>
        <description>Delete operator only applies to one argument in a comma expression, may cause memory leak</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_no_effect_deref</key>
        <name>Incorrect expression : Incorrect pointer increment</name>
        <internalKey>STATIC_C_NO_EFFECT_no_effect_deref</internalKey>
        <description>Increment (or decrement) of pointer value, not the value pointed-to</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_no_effect_test</key>
        <name>Incorrect expression : Test should be assignment</name>
        <internalKey>STATIC_C_NO_EFFECT_no_effect_test</internalKey>
        <description>A test that is an isolated statement with no effect is likely an intended assignment</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_self_assign</key>
        <name>Incorrect expression : Self assignment</name>
        <internalKey>STATIC_C_NO_EFFECT_self_assign</internalKey>
        <description>Assignment of a variable or expression to itself has no effect</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_static_through_instance</key>
        <name>Miscellaneous : Unnecessary instance object usage</name>
        <internalKey>STATIC_C_NO_EFFECT_static_through_instance</internalKey>
        <description>A static field or method is accessed using an instance object</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_unsigned_compare</key>
        <name>Control flow issues : Unsigned compared against 0</name>
        <internalKey>STATIC_C_NO_EFFECT_unsigned_compare</internalKey>
        <description>An unsigned value can never be less than 0</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_unsigned_compare_macros</key>
        <name>Integer handling issues : Macro compares unsigned to 0</name>
        <internalKey>STATIC_C_NO_EFFECT_unsigned_compare_macros</internalKey>
        <description>An unsigned value can never be less than 0</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_unsigned_enums</key>
        <name>Integer handling issues : Enum compared against 0</name>
        <internalKey>STATIC_C_NO_EFFECT_unsigned_enums</internalKey>
        <description>An enumeration value is usually not less than 0</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NO_EFFECT_none</key>
        <name>Integer handling issues : Enum compared against 0</name>
        <internalKey>STATIC_C_NO_EFFECT_none</internalKey>
        <description>An enumeration value is usually not less than 0</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ATOMICITY_none</key>
        <name>Concurrent data access violations : Value not atomically updated</name>
        <internalKey>STATIC_C_ATOMICITY_none</internalKey>
        <description>Non-atomic update of a concurrently shared value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.9_none</internalKey>
        <description>The value of errno shall be tested against zero after calling an errno-setting-function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL50-CPP_none</internalKey>
        <description>Do not define a C-style variadic function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.7_none</internalKey>
        <description>The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 22.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Resources</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 22.8_none</internalKey>
        <description>The value of errno shall be set to zero prior to a call to an errno-setting-function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.13_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.13_none</internalKey>
        <description>The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.12_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.12_none</internalKey>
        <description>The underlying bit representations of floating-point values shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.11_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.11_none</internalKey>
        <description>Evaluation of constant unsigned integer expressions should not lead to wrap-around.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_VIRTUAL_DTOR_empty_dtor</key>
        <name>Code maintainability issues : Empty virtual destructor</name>
        <internalKey>STATIC_C_VIRTUAL_DTOR_empty_dtor</internalKey>
        <description>The correct derived class destructor that happens to be empty is not invoked due to the absence of a virtual destructor in the base class</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_VIRTUAL_DTOR_none</key>
        <name>Resource leaks : No virtual destructor</name>
        <internalKey>STATIC_C_VIRTUAL_DTOR_none</internalKey>
        <description>The correct derived class destructor is not invoked due to the absence of a virtual destructor in the base class</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL40-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL40-C_none</internalKey>
        <description>Do not create incompatible declarations of the same function or object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 12.10_none</key>
        <name>Coding standard violation : MISRA C-2004 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 12.10_none</internalKey>
        <description>The comma operator shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_XPATH_INJECTION_none</key>
        <name>Medium impact security : XML Path (XPath) Language injection</name>
        <internalKey>STATIC_C_XPATH_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into an XPath query.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_REVERSE_NEGATIVE_array_index_read</key>
        <name>Memory - illegal accesses : Negative array index read</name>
        <internalKey>STATIC_C_REVERSE_NEGATIVE_array_index_read</internalKey>
        <description>Read from array at negative index</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_REVERSE_NEGATIVE_array_index_write</key>
        <name>Memory - corruptions : Negative array index write</name>
        <internalKey>STATIC_C_REVERSE_NEGATIVE_array_index_write</internalKey>
        <description>Write to array at negative index</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_REVERSE_NEGATIVE_critical_argument</key>
        <name>Memory - corruptions : Argument cannot be negative</name>
        <internalKey>STATIC_C_REVERSE_NEGATIVE_critical_argument</internalKey>
        <description>Negative value used as argument to a function expecting a positive value (for example, size of buffer or allocation)</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_REVERSE_NEGATIVE_none</key>
        <name>Integer handling issues : Improper use of negative value</name>
        <internalKey>STATIC_C_REVERSE_NEGATIVE_none</internalKey>
        <description>Negative value used incorrectly where positive value is expected</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-1-1_none</internalKey>
        <description>Class shall not be derived from more than one base class which is not an interface class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.1_none</internalKey>
        <description>#include statements in a file should only be preceded by other preprocessor directives or comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.3_none</internalKey>
        <description>The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.2_none</internalKey>
        <description>Non-standard characters should not occur in header file names in #include directives.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.9_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.9_none</internalKey>
        <description>Arguments to a function-like macro shall not contain tokens that look like preprocessing directives.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.8_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.8_none</internalKey>
        <description>A function-like macro shall not be invoked without all of its arguments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO32-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO32-C_none</internalKey>
        <description>Do not perform operations on devices that are only appropriate for files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 dblfree_none</key>
        <name>Coding standard violation : ISO TS17961 2013 dblfree</name>
        <internalKey>STATIC_C_ISO TS17961 2013 dblfree_none</internalKey>
        <description>Freeing memory multiple times.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-3-1_none</internalKey>
        <description>There shall be at most one occurrence of the # or ## operators in a single macro definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.5_none</internalKey>
        <description>Macros shall not be #define&apos;d or #undef&apos;d within a block.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.4_none</internalKey>
        <description>C macros shall only expand to a braced initializer, a constant, a string literal, a parenthesized expression, a type qualifier, a storage class specifier, or a do-while-zero construct.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-5-1_none</internalKey>
        <description>Trigraphs shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.7_none</internalKey>
        <description>A function should be used in preference to a function-like macro.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-5-2_none</internalKey>
        <description>Digraphs shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-3-2_none</internalKey>
        <description>The # and ## operators should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.6_none</internalKey>
        <description>#undef shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM34-C_none</key>
        <name>Coding standard violation : CERT-C Memory Management</name>
        <internalKey>STATIC_C_CERT MEM34-C_none</internalKey>
        <description>Only free memory allocated dynamically.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M12-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M12-1-1_none</internalKey>
        <description>An object&apos;s dynamic type shall not be used from the body of its constructor or destructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-1-2_none</internalKey>
        <description>NULL shall not be thrown explicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-1-1_none</internalKey>
        <description>The assignment-expression of a throw statement shall not itself cause an exception to be thrown.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A25-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Algorithms Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A25-1-1_none</internalKey>
        <description>Non-static data members or captured values of predicate function objects that are state related to this object&apos;s identity shall not be copied.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-1-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-1-3_none</internalKey>
        <description>An empty throw (throw;) shall only be used in the compound-statement of a catch handler.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 ptrobj_none</key>
        <name>Coding standard violation : ISO TS17961 2013 ptrobj</name>
        <internalKey>STATIC_C_ISO TS17961 2013 ptrobj_none</internalKey>
        <description>Subtracting or comparing two pointers that do not refer to the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-2_none</internalKey>
        <description>A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV32-C_none</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV32-C_none</internalKey>
        <description>All exit handlers must return normally.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-3_none</internalKey>
        <description>Casts from a base class to a derived class should not be performed on polymorphic types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-6_none</internalKey>
        <description>A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-8_none</internalKey>
        <description>An object with integer type or pointer to void type shall not be converted to an object with pointer type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 argcomp_none</key>
        <name>Coding standard violation : ISO TS17961 2013 argcomp</name>
        <internalKey>STATIC_C_ISO TS17961 2013 argcomp_none</internalKey>
        <description>Calling functions with incorrect arguments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-5-1_BUILT_IN_OPERATOR</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-5-1_BUILT_IN_OPERATOR</internalKey>
        <description>Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-5-1_OVERLOAD_OPERATOR</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-5-1_OVERLOAD_OPERATOR</internalKey>
        <description>Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A4-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A4-5-1_none</internalKey>
        <description>Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-9_none</internalKey>
        <description>A cast shall not convert a pointer type to an integral type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.4_none</internalKey>
        <description>A conversion should not be performed between a pointer to object and an integer type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.3_none</internalKey>
        <description>A cast shall not be performed between a pointer to object type and a pointer to a different object type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-3-3_none</internalKey>
        <description>Pointers to incomplete class types shall not be deleted.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.6_none</internalKey>
        <description>A cast shall not be performed between pointer to void and an arithmetic type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-3-2_none</internalKey>
        <description>Null pointers shall not be dereferenced.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.5_none</internalKey>
        <description>A conversion should not be performed from pointer to void into pointer to object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-3-1_none</internalKey>
        <description>Evaluation of the operand to the typeid operator shall not contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNUSED_VALUE_adjacent</key>
        <name>Incorrect expression : Unused value</name>
        <internalKey>STATIC_C_UNUSED_VALUE_adjacent</internalKey>
        <description>A value assigned to a variable is never used.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNUSED_VALUE_none</key>
        <name>Code maintainability issues : Unused value</name>
        <internalKey>STATIC_C_UNUSED_VALUE_none</internalKey>
        <description>A value assigned to a variable is never used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.2_none</internalKey>
        <description>Conversions shall not be performed between a pointer to an incomplete type and any other type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.1_none</internalKey>
        <description>Conversions shall not be performed between a pointer to a function and any other type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.7_none</internalKey>
        <description>There should be no unused parameters in functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR38-C_none</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR38-C_none</internalKey>
        <description>Do not confuse narrow and wide character strings and functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SELF_ASSIGN_none</key>
        <name>Rule violations : Unsafe assignment operator</name>
        <internalKey>STATIC_C_SELF_ASSIGN_none</internalKey>
        <description>Assignment operator does not check for self-assignment</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR56-CPP_GLOBAL_SIDE_EFFECT</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR56-CPP_GLOBAL_SIDE_EFFECT</internalKey>
        <description>Guarantee exception safety.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR56-CPP_none</internalKey>
        <description>Guarantee exception safety.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.3_none</internalKey>
        <description>A project should not contain unused type declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-10-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-10-1_none</internalKey>
        <description>A pointer to member virtual function shall only be tested for equality with null-pointer-constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.4_none</internalKey>
        <description>A project should not contain unused tag declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-18-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-18-1_none</internalKey>
        <description>The comma operator shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.5_none</internalKey>
        <description>A project should not contain unused macro declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.6_none</internalKey>
        <description>A function should not contain unused label declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.1_none</internalKey>
        <description>A project shall not contain unreachable code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 2.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Unused Code</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 2.2_none</internalKey>
        <description>There shall be no dead code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON39-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON39-C_none</internalKey>
        <description>Do not join or detach a thread that was previously joined or detached.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG35-C_none</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG35-C_none</internalKey>
        <description>Do not return from a computational exception signal handler.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.8_none</internalKey>
        <description>A cast shall not remove any const or volatile qualification from the type pointed to by a pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.7_none</internalKey>
        <description>A cast shall not be performed between pointer to object and a non-integer arithmetic type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 11.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 11.9_none</internalKey>
        <description>The macro NULL shall be the only permitted form of integer null pointer constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO41-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO41-C_none</internalKey>
        <description>Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.BRANCH_PAST_INITIALIZATION_none</key>
        <name>Control flow issues : Branch past initialization</name>
        <internalKey>STATIC_C_PW.BRANCH_PAST_INITIALIZATION_none</internalKey>
        <description>A goto jumps past the initialization of a variable</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP63-CPP_RELY_ON_MOVED_FROM_OBJECT</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP63-CPP_RELY_ON_MOVED_FROM_OBJECT</internalKey>
        <description>Do not rely on the value of a moved-from object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP63-CPP_RELY_ON_REMOVED_VERTOR</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP63-CPP_RELY_ON_REMOVED_VERTOR</internalKey>
        <description>Do not rely on the value of a moved-from object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP63-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP63-CPP_none</internalKey>
        <description>Do not rely on the value of a moved-from object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A14-8-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A14-8-2_none</internalKey>
        <description>Explicit specializations of function templates shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-7_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-7_none</internalKey>
        <description>Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-6_none</internalKey>
        <description>Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-5_NON_TRIVIAL_CLASS</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-5_NON_TRIVIAL_CLASS</internalKey>
        <description>A class type exception shall always be caught by reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-5_TRIVIAL_CLASS</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-5_TRIVIAL_CLASS</internalKey>
        <description>A class type exception shall always be caught by reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-5_none</internalKey>
        <description>A class type exception shall always be caught by reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-7-1_none</internalKey>
        <description>The character \ shall not occur as a last character of a C++ comment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-7-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-7-2_none</internalKey>
        <description>Sections of code shall not be &quot;commented out&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-7-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-7-3_none</internalKey>
        <description>All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO30-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO30-C_none</internalKey>
        <description>Exclude user input from format strings.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-1-1_none</internalKey>
        <description>The defined preprocessor operator shall only be used in one of the two standard forms.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-1-2_none</internalKey>
        <description>All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.BAD_CAST_none</key>
        <name>Integer handling issues : Lossy integer to pointer</name>
        <internalKey>STATIC_C_PW.BAD_CAST_none</internalKey>
        <description>A cast from an integer to a pointer of narrower precision</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-6_none</internalKey>
        <description>The final clause of a switch statement shall be the default-clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-7_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-7_none</internalKey>
        <description>The condition of a switch statement shall not have bool type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-8_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-8_none</internalKey>
        <description>Every switch statement shall have at least one case-clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP51-CPP_none</internalKey>
        <description>Do not slice derived objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-2_none</internalKey>
        <description>A project shall not contain infeasible paths.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-1_none</internalKey>
        <description>A project shall not contain unreachable code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-1_none</internalKey>
        <description>An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-6_none</internalKey>
        <description>A project shall not contain instances of non-volatile variables being given values that are never subsequently used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-4_none</internalKey>
        <description>Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-2_none</internalKey>
        <description>All if ... else if constructs shall be terminated with an else clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON32-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON32-C_none</internalKey>
        <description>Prevent data races when accessing bit-fields from multiple threads.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-5_none</internalKey>
        <description>A project shall not contain unused type declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-3_none</internalKey>
        <description>Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-3_none</internalKey>
        <description>A switch statement shall be a well-formed switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FLP37-C_none</key>
        <name>Coding standard violation : CERT-C Floating Point</name>
        <internalKey>STATIC_C_CERT FLP37-C_none</internalKey>
        <description>Do not use object representations to compare floating-point values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-4_none</internalKey>
        <description>A project shall not contain non-volatile POD variables having only one use.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-2_none</internalKey>
        <description>There should be at least one exception handler to catch all otherwise unhandled exceptions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-4_none</internalKey>
        <description>A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-3_none</internalKey>
        <description>A project shall not contain unused variables.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-3-1_none</internalKey>
        <description>Exceptions shall be raised only after start-up and before termination of the program.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-4-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-4-5_none</internalKey>
        <description>An unconditional throw or break statement shall terminate every non-empty switch-clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-9_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-9_none</internalKey>
        <description>There shall be no dead code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-8_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-8_none</internalKey>
        <description>All functions with void return type shall have external side effect(s).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-7_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-7_none</internalKey>
        <description>The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A21-8-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Strings Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A21-8-1_none</internalKey>
        <description>Arguments to character-handling functions shall be representable as an unsigned char.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-5-1_none</internalKey>
        <description>A non-member generic function shall only be declared in a namespace that is not an associated namespace.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-10_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-10_none</internalKey>
        <description>The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-11_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-11_none</internalKey>
        <description>The comma operator, &amp;&amp; operator and the || operator shall not be overloaded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-5-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-5-3_none</internalKey>
        <description>A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-12_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-12_none</internalKey>
        <description>An identifier with array type passed as a function argument shall not decay to a pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-5-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-5-2_none</internalKey>
        <description>A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ARR39-C_none</key>
        <name>Coding standard violation : CERT-C Array</name>
        <internalKey>STATIC_C_CERT ARR39-C_none</internalKey>
        <description>Do not add or subtract a scaled integer to a pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.INCLUDE_RECURSION_none</key>
        <name>Build system issues : Recursion in included headers</name>
        <internalKey>STATIC_C_PW.INCLUDE_RECURSION_none</internalKey>
        <description>Recursion in included header files</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-19-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-19-1_none</internalKey>
        <description>Evaluation of constant unsigned integer expressions should not lead to wrap-around.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BAD_FREE_none</key>
        <name>Memory - illegal accesses : Explicit free of COM interface</name>
        <internalKey>STATIC_C_COM.BAD_FREE_none</internalKey>
        <description>A COM interface is explicitly freed instead of using the recommended Release method</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 boolasgn_none</key>
        <name>Coding standard violation : ISO TS17961 2013 boolasgn</name>
        <internalKey>STATIC_C_ISO TS17961 2013 boolasgn_none</internalKey>
        <description>No assignment in conditional expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_HARDCODED_CREDENTIALS_hardcoded_credential_crypto</key>
        <name>Medium impact security : Use of hard-coded cryptographic key</name>
        <internalKey>STATIC_C_HARDCODED_CREDENTIALS_hardcoded_credential_crypto</internalKey>
        <description>A cryptographic key is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_HARDCODED_CREDENTIALS_hardcoded_credential_passwd</key>
        <name>Medium impact security : Use of hard-coded password</name>
        <internalKey>STATIC_C_HARDCODED_CREDENTIALS_hardcoded_credential_passwd</internalKey>
        <description>A password is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_HARDCODED_CREDENTIALS_hardcoded_credential_token</key>
        <name>Medium impact security : Use of hard-coded security token</name>
        <internalKey>STATIC_C_HARDCODED_CREDENTIALS_hardcoded_credential_token</internalKey>
        <description>A security token is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_HARDCODED_CREDENTIALS_none</key>
        <name>Medium impact security : Use of hard-coded credentials</name>
        <internalKey>STATIC_C_HARDCODED_CREDENTIALS_none</internalKey>
        <description>Credentials are stored directly in the source code</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_HARDCODED_CREDENTIALS_uri</key>
        <name>Medium impact security : Use of hard-coded URI password</name>
        <internalKey>STATIC_C_HARDCODED_CREDENTIALS_uri</internalKey>
        <description>A URI with a password component is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INVALIDATE_ITERATOR_none</key>
        <name>API usage errors : Using invalid iterator</name>
        <internalKey>STATIC_C_INVALIDATE_ITERATOR_none</internalKey>
        <description>An invalid or past-the-end iterator is being used</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-12_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-12_none</internalKey>
        <description>An identifier with array type passed as a function argument shall not decay to a pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR52-CPP_none</internalKey>
        <description>Use valid references, pointers, and iterators to reference elements of a basic_string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP54-CPP_none</internalKey>
        <description>Do not access an object outside of its lifetime.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-11_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-11_none</internalKey>
        <description>The comma operator, &amp;&amp; operator and the || operator shall not be overloaded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-2-10_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-2-10_none</internalKey>
        <description>The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_INFINITE_LOOP_no_escape</key>
        <name>Program hangs : Infinite loop with no exit</name>
        <internalKey>STATIC_C_INFINITE_LOOP_no_escape</internalKey>
        <description>Infinite loop with no exit condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INFINITE_LOOP_none</key>
        <name>Program hangs : Infinite loop</name>
        <internalKey>STATIC_C_INFINITE_LOOP_none</internalKey>
        <description>Infinite loop with unsatisfiable exit condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_BREAK_none</key>
        <name>Control flow issues : Missing break in switch</name>
        <internalKey>STATIC_C_MISSING_BREAK_none</internalKey>
        <description>Missing break statement between cases in switch statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_STRING_OVERFLOW_fixed_size_dest</key>
        <name>Security best practices violations : Copy into fixed size buffer</name>
        <internalKey>STATIC_C_STRING_OVERFLOW_fixed_size_dest</internalKey>
        <description>A source buffer of statically unknown size is copied into a fixed-size destination buffer</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_STRING_OVERFLOW_likely_overflow</key>
        <name>Memory - corruptions : Destination buffer too small</name>
        <internalKey>STATIC_C_STRING_OVERFLOW_likely_overflow</internalKey>
        <description>Size of destination buffer is smaller than the size of the source buffer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_STRING_OVERFLOW_none</key>
        <name>Memory - corruptions : Buffer overflow</name>
        <internalKey>STATIC_C_STRING_OVERFLOW_none</internalKey>
        <description>Size of destination buffer is smaller than the size of the source buffer or size of the source buffer is unknown</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR30-C_none</key>
        <name>Coding standard violation : CERT-C Error Handling</name>
        <internalKey>STATIC_C_CERT ERR30-C_none</internalKey>
        <description>Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A16-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A16-2-1_none</internalKey>
        <description>The &apos;, &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL59-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL59-CPP_none</internalKey>
        <description>Do not define an unnamed namespace in a header file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC38-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC38-C_none</internalKey>
        <description>Do not treat a predefined identifier as an object if it might only be implemented as a macro.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_SIZEOF_none</key>
        <name>Incorrect expression : Incorrect sizeof expression</name>
        <internalKey>STATIC_C_BAD_SIZEOF_none</internalKey>
        <description>The sizeof operator was applied to an unintended variable or expression, such as a pointer variable instead of its target</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_SIZEOF_sizeof_ptr_expr</key>
        <name>Incorrect expression : Sizeof pointer expression</name>
        <internalKey>STATIC_C_BAD_SIZEOF_sizeof_ptr_expr</internalKey>
        <description>The sizeof operator was applied to a pointer expression, which may not be intended</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO47-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO47-C_none</internalKey>
        <description>Use valid format strings.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M4-10-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M4-10-1_none</internalKey>
        <description>NULL shall not be used as an integer value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M4-10-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M4-10-2_none</internalKey>
        <description>Literal zero (0) shall not be used as the null-pointer-constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-3-1_none</internalKey>
        <description>Exceptions shall be raised only after start-up and before termination.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A17-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Library Introduction</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A17-0-1_none</internalKey>
        <description>Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-3-3_none</internalKey>
        <description>Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-1-2_none</internalKey>
        <description>All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-3-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-3-4_none</internalKey>
        <description>Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-3-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-3-6_none</internalKey>
        <description>Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-1-1_none</internalKey>
        <description>The defined pre-processor operator shall only be used in one of the two standard forms.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-3-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-3-7_none</internalKey>
        <description>Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT31-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT31-C_none</internalKey>
        <description>Ensure that integer conversions do not result in lost or misinterpreted data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR51-CPP_none</internalKey>
        <description>Handle all exceptions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_fixed_size_dest</key>
        <name>Security best practices violations : Copy into fixed size buffer</name>
        <internalKey>STATIC_C_BUFFER_SIZE_fixed_size_dest</internalKey>
        <description>A source buffer of statically unknown size is copied into a fixed-size destination buffer</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_likely_overflow</key>
        <name>Memory - corruptions : Destination buffer too small</name>
        <internalKey>STATIC_C_BUFFER_SIZE_likely_overflow</internalKey>
        <description>Size of destination buffer is smaller than the size argument specified</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_no_null_terminator</key>
        <name>Memory - illegal accesses : Buffer not null terminated</name>
        <internalKey>STATIC_C_BUFFER_SIZE_no_null_terminator</internalKey>
        <description>The string buffer may not have a null terminator if the source string&apos;s length is equal to the buffer size</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_none</key>
        <name>Security best practices violations : Possible buffer overflow</name>
        <internalKey>STATIC_C_BUFFER_SIZE_none</internalKey>
        <description>Incorrect buffer manipulation may result in buffer overflow</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_overflow</key>
        <name>Memory - corruptions : Destination buffer too small</name>
        <internalKey>STATIC_C_BUFFER_SIZE_overflow</internalKey>
        <description>Size of destination buffer is smaller than the required size</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BUFFER_SIZE_overlapping_buffer</key>
        <name>API usage errors : Overlapping buffer in memory copy</name>
        <internalKey>STATIC_C_BUFFER_SIZE_overlapping_buffer</internalKey>
        <description>Buffers may be overlapping in a string copy function</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-0-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-0-4_none</internalKey>
        <description>Pointer arithmetic shall not be used with pointers to non-final classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-7-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-7-3_none</internalKey>
        <description>All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-0-3_none</internalKey>
        <description>The declaration of objects shall contain no more than two levels of pointer indirection.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-7-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-7-2_none</internalKey>
        <description>For any given template specialization, an explicit instantiation of the template with the template-arguments used in the specialization shall not render the program ill-formed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-0-2_none</internalKey>
        <description>The condition of an if-statement and the condition of an iteration statement shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-0-1_none</internalKey>
        <description>The value of an expression shall be the same under any order of evaluation that the standard permits.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-19-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-19-1_none</internalKey>
        <description>Evaluation of constant unsigned integer expressions shall not lead to wrap-around.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M14-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M14-5-3_none</internalKey>
        <description>A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_READLINK_none</key>
        <name>Memory - illegal accesses : Readlink used insecurely</name>
        <internalKey>STATIC_C_READLINK_none</internalKey>
        <description>The readlink system call may return a value equal to the buffer size, which causes an access one past the end</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA.*</key>
        <name>Coverity MISRA : Coding Standard Violation</name>
        <internalKey>STATIC_C_MISRA.*</internalKey>
        <description>Coverity MISRA : Coding Standard Violation</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>misra</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP62-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP62-CPP_none</internalKey>
        <description>Do not access the bits of an object representation that are not part of the object&apos;s value representation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 15.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 15.5_none</internalKey>
        <description>Every switch statement shall have at least one case clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 15.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 15.4_none</internalKey>
        <description>A switch expression shall not represent a value that is effectively Boolean.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-5-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-5-3_none</internalKey>
        <description>The terminate() function shall not be called implicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 15.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 15.1_none</internalKey>
        <description>A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 15.0_none</key>
        <name>Coding standard violation : MISRA C-2004 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 15.0_none</internalKey>
        <description>The MISRA C switch syntax shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG34-C_none</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG34-C_none</internalKey>
        <description>Do not call signal() from within interruptible signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CHAR_IO_none</key>
        <name>API usage errors : Truncated stdio return value</name>
        <internalKey>STATIC_C_CHAR_IO_none</internalKey>
        <description>Stdio character-oriented I/O functions return int values such as EOF not representable by char variables</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 15.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 15.3_none</internalKey>
        <description>The final clause of a switch statement shall be the default clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 15.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 15.2_none</internalKey>
        <description>An unconditional break statement shall terminate every non-empty switch clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-4-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-4-3_none</internalKey>
        <description>The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-4-2_none</internalKey>
        <description>If a function is declared to be noexcept, noexcept(true) or noexcept(&amp;lt;true condition&amp;gt;), then it shall not exit with an exception.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-4-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-4-5_none</internalKey>
        <description>Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-4-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-4-4_none</internalKey>
        <description>A declaration of non-throwing function shall contain noexcept specification.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SQLI_none</key>
        <name>High impact security : SQL injection</name>
        <internalKey>STATIC_C_SQLI_none</internalKey>
        <description>Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-4-1_none</internalKey>
        <description>Dynamic exception-specification shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_DELETE_ARRAY_non_array_delete</key>
        <name>Memory - illegal accesses : Array delete misuse</name>
        <internalKey>STATIC_C_DELETE_ARRAY_non_array_delete</internalKey>
        <description>Using array delete on a non-array</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DELETE_ARRAY_none</key>
        <name>Memory - illegal accesses : Incorrect delete operator</name>
        <internalKey>STATIC_C_DELETE_ARRAY_none</internalKey>
        <description>Using non-array delete on an array of objects, scalars, or pointers allocated with new[]</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DELETE_ARRAY_object</key>
        <name>Resource leaks : Non-array delete for objects</name>
        <internalKey>STATIC_C_DELETE_ARRAY_object</internalKey>
        <description>Using non-array delete on an array of objects; should be using delete[]</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DELETE_ARRAY_scalar</key>
        <name>Compiler dependency : Non-array delete for scalars</name>
        <internalKey>STATIC_C_DELETE_ARRAY_scalar</internalKey>
        <description>Using non-array delete on an array of scalars or pointers allocated with new[]</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-18_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-18_none</internalKey>
        <description>&gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-6-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-6-4_none</internalKey>
        <description>For any iteration statement there shall be no more than one break or goto statement used for loop termination.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-6-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-6-5_none</internalKey>
        <description>A function shall have a single point of exit at the end of the function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-4_none</internalKey>
        <description>Move constructor shall not initialize its class members and base classes using copy semantics.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-14_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-14_none</internalKey>
        <description>The first operand of a conditional-operator shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-3_none</internalKey>
        <description>Moved-from object shall not be read-accessed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-15_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-15_none</internalKey>
        <description>Array indexing shall be the only form of pointer arithmetic.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-2_none</internalKey>
        <description>User-defined copy and move assignment operators should use user-defined no-throw swap function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-16_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-16_none</internalKey>
        <description>A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-1_none</internalKey>
        <description>Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-17_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-17_none</internalKey>
        <description>Subtraction between pointers shall only be applied to pointers that address elements of the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP61-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP61-CPP_none</internalKey>
        <description>A lambda object must not outlive any of its reference captured objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.17_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.17_none</internalKey>
        <description>All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.15_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.15_none</internalKey>
        <description>Precautions shall be taken in order to prevent the contents of a header file being included twice.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON34-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON34-C_none</internalKey>
        <description>Declare objects shared between threads with appropriate storage durations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR53-CPP_none</internalKey>
        <description>Range check element access.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.16_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.16_none</internalKey>
        <description>Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-5-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-5-2_none</internalKey>
        <description>Where a function&apos;s declaration includes an exception specification, the function shall only be capable of throwing exceptions of the indicated type(s).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-5-1_none</internalKey>
        <description>A class destructor shall not exit with an exception.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-6-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-6-1_none</internalKey>
        <description>Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-3-2_none</internalKey>
        <description>If a function returns error information, then that error information shall be tested.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-6-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-6-2_none</internalKey>
        <description>The goto statement shall jump to a label declared later in the same function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-6-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-6-3_none</internalKey>
        <description>The continue statement shall only be used within a well-formed for loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_DELETE_VOID_none</key>
        <name>Memory - illegal accesses : Deleting void pointer</name>
        <internalKey>STATIC_C_DELETE_VOID_none</internalKey>
        <description>Deleting a void pointer (void*)</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-6-1_none</internalKey>
        <description>Digit sequences separators &apos; shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-21_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-21_none</internalKey>
        <description>Bitwise operators shall only be applied to operands of unsigned underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M9-6-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M9-6-4_none</internalKey>
        <description>Named bit-fields with signed integer type shall have a length of more than one bit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_bitwise_op_bad_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_bitwise_op_bad_cast</internalKey>
        <description>Bitwise operator &amp;lt;&amp;lt; applies to operand with underlying type unsigned short is cast to int (MISRA 2004 Rule 10.5)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_bitwise_op_no_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_bitwise_op_no_cast</internalKey>
        <description>Bitwise operator &amp;lt;&amp;lt; applies to operand with underlying type unsigned short is not being immediately cast to that type (MISRA 2004 Rule 10.5)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_complex_conversion</key>
        <name>Integer handling issues : Implicit floating conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_float_complex_conversion</internalKey>
        <description>Implicitly converting complex expression from float to double (MISRA 2004 Rule 10.2)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_narrowing_conversion</key>
        <name>Integer handling issues : Implicit floating conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_float_narrowing_conversion</internalKey>
        <description>Implicitly converting a double expression to narrower float type may lose precision (MISRA 2004 Rule 10.2)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_non_constant_arg_conversion</key>
        <name>Integer handling issues : Implicit floating conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_float_non_constant_arg_conversion</internalKey>
        <description>Implicit conversion from float to double in a function argument (MISRA 2004 Rule 10.2)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_non_constant_conversion</key>
        <name>Integer handling issues : Implicit floating conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_float_non_constant_conversion</internalKey>
        <description>Implicit conversion from float to double in a function argument (MISRA-2008 Rule 5-0-3)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_non_constant_rtn_conversion</key>
        <name>Integer handling issues : Implicit floating conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_float_non_constant_rtn_conversion</internalKey>
        <description>Implicit conversion from float to double in a return expression (MISRA 2004 Rule 10.2)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_to_integer_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_float_to_integer_cast</internalKey>
        <description>Complex expression cast from 64-bit float to 16-bit int (MISRA 2004 Rule 10.4)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_to_integer_conversion</key>
        <name>Integer handling issues : Implicit floating conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_float_to_integer_conversion</internalKey>
        <description>Implicit conversion from float to 16-bit integer type (MISRA 2004 Rule 10.2)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_float_widening_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_float_widening_cast</internalKey>
        <description>Complex expression cast from 32-bit float to 64-bit float (MISRA 2004 Rule 10.4)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_complex_conversion</key>
        <name>Integer handling issues : Implicit integer conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_complex_conversion</internalKey>
        <description>Implicitly converting the type of a complex expression (MISRA 2004 Rule 10.1)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_narrowing_conversion</key>
        <name>Integer handling issues : Implicit integer conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_narrowing_conversion</internalKey>
        <description>Implicitly converting an integer expression to a narrower integer type may truncate value (MISRA 2004 Rule 10.1)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_non_constant_arg_conversion</key>
        <name>Integer handling issues : Implicit integer conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_non_constant_arg_conversion</internalKey>
        <description>Implicitly converting the integer type of a non-constant function argument expression (MISRA 2004 Rule 10.1)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_non_constant_conversion</key>
        <name>Integer handling issues : Implicit integer conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_non_constant_conversion</internalKey>
        <description>Implicitly converting the integer type of a non-constant function argument expression (MISRA-2008 Rule 5-0-3)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_non_constant_rtn_conversion</key>
        <name>Integer handling issues : Implicit integer conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_non_constant_rtn_conversion</internalKey>
        <description>Implicitly converting the integer type of a non-constant return expression (MISRA 2004 Rule 10.1)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_signedness_changing_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_signedness_changing_cast</internalKey>
        <description>Complex expression cast from 32-bit int to 32-bit unsigned int (MISRA 2004 Rule 10.3)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_signedness_changing_conversion</key>
        <name>Integer handling issues : Implicit integer conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_signedness_changing_conversion</internalKey>
        <description>Implicitly converting the signedness of an integer value (MISRA 2004 Rule 10.1)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_to_float_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_to_float_cast</internalKey>
        <description>Complex expression cast from int to 64-bit float (MISRA 2004 Rule 10.3)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_to_float_conversion</key>
        <name>Integer handling issues : Implicit conversion</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_to_float_conversion</internalKey>
        <description>Implicitly converting complex expression with integer type to floating type (MISRA 2004 Rule 10.1)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_integer_widening_cast</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_integer_widening_cast</internalKey>
        <description>Complex expression with underlying type 16-bit unsigned value cast to wider type 32-bit unsigned value (MISRA 2004 Rule 10.3)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA_CAST_none</key>
        <name>Integer handling issues : Misra violating cast</name>
        <internalKey>STATIC_C_MISRA_CAST_none</internalKey>
        <description>Cast operation violates MISRA standard (MISRA 2004 Rules 10.1 - 10.5)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-7_none</internalKey>
        <description>Assignment operators should be declared with the ref-qualifier &amp;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-6_none</internalKey>
        <description>Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 14-7-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Templates</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 14-7-1_none</internalKey>
        <description>All class templates, function templates, class template member functions and class template static members shall be instantiated at least once.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-8-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-8-5_none</internalKey>
        <description>A copy assignment and a move assignment operators shall handle self-assignment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-8-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-8-1_none</internalKey>
        <description>The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT PRE31-C_none</key>
        <name>Coding standard violation : CERT-C Preprocessor</name>
        <internalKey>STATIC_C_CERT PRE31-C_none</internalKey>
        <description>Avoid side effects in arguments to unsafe macros.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-20_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-20_none</internalKey>
        <description>Non-constant operands to a binary bitwise operator shall have the same underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ARR37-C_none</key>
        <name>Coding standard violation : CERT-C Array</name>
        <internalKey>STATIC_C_CERT ARR37-C_none</internalKey>
        <description>Do not add or subtract an integer to a pointer to a non-array object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 4-10-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Standard Conversions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 4-10-2_none</internalKey>
        <description>Literal zero (0) shall not be used as the null-pointer-constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 4-10-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Standard Conversions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 4-10-1_none</internalKey>
        <description>NULL shall not be used as an integer value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP55-CPP_none</internalKey>
        <description>Do not access a cv-qualified object through a cv-unqualified type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.10_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.10_none</internalKey>
        <description>The library functions atof, atoi and atol from library &lt;stdlib.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.11_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.11_none</internalKey>
        <description>The library functions abort, exit, getenv, and system from library &lt;stdlib.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.12_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.12_none</internalKey>
        <description>The time handling functions of library &lt;time.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON56-CPP_none</internalKey>
        <description>Do not speculatively lock a non-recursive mutex that is already owned by the calling thread.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_TOCTOU_none</key>
        <name>Security best practices violations : Time of check time of use</name>
        <internalKey>STATIC_C_TOCTOU_none</internalKey>
        <description>A check occurs on a file&apos;s attributes before the file is used in a privileged operation, but things may have changed</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL31-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL31-C_none</internalKey>
        <description>Declare identifiers before using them.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON55-CPP_none</internalKey>
        <description>Preserve thread safety and liveness when using condition variables.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M11-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Member Access Control</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M11-0-1_none</internalKey>
        <description>Member data in non-POD class types shall be private.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR32-C_C_INDETERMINATE_ERRNO</key>
        <name>Coding standard violation : CERT-C Error Handling</name>
        <internalKey>STATIC_C_CERT ERR32-C_C_INDETERMINATE_ERRNO</internalKey>
        <description>Do not rely on indeterminate values of errno.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR32-C_POSIX_INDETERMINATE_ERRNO</key>
        <name>Coding standard violation : CERT-C Error Handling</name>
        <internalKey>STATIC_C_CERT ERR32-C_POSIX_INDETERMINATE_ERRNO</internalKey>
        <description>Do not rely on indeterminate values of errno.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR32-C_none</key>
        <name>Coding standard violation : CERT-C Error Handling</name>
        <internalKey>STATIC_C_CERT ERR32-C_none</internalKey>
        <description>Do not rely on indeterminate values of errno.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A16-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A16-0-1_none</internalKey>
        <description>The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.NE_NON_BSTR_none</key>
        <name>API usage errors : COM BSTR inequality with non-BSTR</name>
        <internalKey>STATIC_C_COM.BSTR.NE_NON_BSTR_none</internalKey>
        <description>Comparison of BSTR to other than BSTR</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_nested_memory_access</key>
        <name>Low impact security : Nested memory access</name>
        <internalKey>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_nested_memory_access</internalKey>
        <description>Accessing memory using a memory access as an index.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_sensitive_data_comparison</key>
        <name>High impact security : Speculative execution data leak</name>
        <internalKey>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_sensitive_data_comparison</internalKey>
        <description>Equality comparing speculative out-of-bounds memory access against a value.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_speculative_execution_data_leak</key>
        <name>High impact security : Speculative execution data leak</name>
        <internalKey>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_speculative_execution_data_leak</internalKey>
        <description>Accessing memory based on a speculative out-of-bounds access.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_speculative_uninitialized_use</key>
        <name>Low impact security : Speculative uninitialized use</name>
        <internalKey>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_speculative_uninitialized_use</internalKey>
        <description>Speculative execution may access uninitialized memory and use it in a subsequent load.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_none</key>
        <name>Low impact security : Speculative uninitialized use</name>
        <internalKey>STATIC_C_AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK_none</internalKey>
        <description>Speculative execution may access uninitialized memory and use it in a subsequent load.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT33-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT33-C_none</internalKey>
        <description>Ensure that division and remainder operations do not result in divide-by-zero errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-1-1_none</internalKey>
        <description>The assignment-expression of a throw statement shall not itself cause an exception to be thrown.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR60-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR60-CPP_none</internalKey>
        <description>Exception objects must be nothrow copy constructible.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-1-2_none</internalKey>
        <description>NULL shall not be thrown explicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-1-3_none</internalKey>
        <description>An empty throw (throw;) shall only be used in the compound statement of a catch handler.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 inverrno_none</key>
        <name>Coding standard violation : ISO TS17961 2013 inverrno</name>
        <internalKey>STATIC_C_ISO TS17961 2013 inverrno_none</internalKey>
        <description>Incorrectly setting and using errno.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 funcdecl_none</key>
        <name>Coding standard violation : ISO TS17961 2013 funcdecl</name>
        <internalKey>STATIC_C_ISO TS17961 2013 funcdecl_none</internalKey>
        <description>Declaring the same function or object in incompatible ways.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO45-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO45-C_none</internalKey>
        <description>Avoid TOCTOU race conditions while accessing files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M10-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M10-2-1_none</internalKey>
        <description>All accessible entity names within a multiple inheritance hierarchy should be unique.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 17.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 17.3_none</internalKey>
        <description>&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-1-2_none</internalKey>
        <description>Functions shall not be declared at block scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP50-CPP_none</internalKey>
        <description>Do not invoke virtual functions from constructors or destructors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 17.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 17.2_none</internalKey>
        <description>Pointer subtraction shall only be applied to pointers that address elements of the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.10_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.10_none</internalKey>
        <description>In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ## .</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 17.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 17.5_none</internalKey>
        <description>The declaration of objects should contain no more than 2 levels of pointer indirection.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 17.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 17.4_none</internalKey>
        <description>Array indexing shall be the only allowed form of pointer arithmetic.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.13_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.13_none</internalKey>
        <description>The # and ## operators should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.14_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.14_none</internalKey>
        <description>The defined preprocessor operator shall only be used in one of the two standard forms.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COPY_WITHOUT_ASSIGN_none</key>
        <name>Rule violations : Copy without assign</name>
        <internalKey>STATIC_C_COPY_WITHOUT_ASSIGN_none</internalKey>
        <description>Class has user-written copy constructor but no user-written assignment operator</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 17.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 17.1_none</internalKey>
        <description>Pointer arithmetic shall only be applied to pointers that address an array or array element.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.11_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.11_none</internalKey>
        <description>All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_DEADCODE_dead_case_in_switch</key>
        <name>Possible Control flow issues : Dead case in switch</name>
        <internalKey>STATIC_C_DEADCODE_dead_case_in_switch</internalKey>
        <description>Switch never goes directly to this case</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DEADCODE_dead_default_in_switch</key>
        <name>Possible Control flow issues : Dead default in switch</name>
        <internalKey>STATIC_C_DEADCODE_dead_default_in_switch</internalKey>
        <description>Default in switch statement is dead code</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DEADCODE_effectively_constant</key>
        <name>Possible Control flow issues : &apos;Constant&apos; variable guards dead code</name>
        <internalKey>STATIC_C_DEADCODE_effectively_constant</internalKey>
        <description>Variable assigned once to a constant guards dead code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DEADCODE_none</key>
        <name>Control flow issues : Logically dead code</name>
        <internalKey>STATIC_C_DEADCODE_none</internalKey>
        <description>Code can never be reached because of a logical contradiction</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DEADCODE_redundant_test</key>
        <name>Possible Control flow issues : Redundant test</name>
        <internalKey>STATIC_C_DEADCODE_redundant_test</internalKey>
        <description>Test always evaluates the same</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 19.12_none</key>
        <name>Coding standard violation : MISRA C-2004 Preprocessing Directives</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 19.12_none</internalKey>
        <description>There shall be at most one occurrence of the # or ## operators in a single macro definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_STRING_NULL_none</key>
        <name>Memory - illegal accesses : String not null terminated</name>
        <internalKey>STATIC_C_STRING_NULL_none</internalKey>
        <description>A character buffer that has not been null terminated is passed to a function expecting a null terminated string</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-2-1_none</internalKey>
        <description>Constructors that are not noexcept shall not be invoked before program startup.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 17.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointers and Arrays</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 17.6_none</internalKey>
        <description>The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO34-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO34-C_none</internalKey>
        <description>Distinguish between characters read from a file and EOF or WEOF.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-2-2_none</internalKey>
        <description>If a constructor is not noexcept and the constructor cannot finish object initialization, then it shall deallocate the object&apos;s resources and it shall throw an exception.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-6-1_none</internalKey>
        <description>All class data members that are initialized by the constructor shall be initialized using member initializers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-4-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-4-3_none</internalKey>
        <description>Assembly language shall be encapsulated and isolated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 resident_none</key>
        <name>Coding standard violation : ISO TS17961 2013 resident</name>
        <internalKey>STATIC_C_ISO TS17961 2013 resident_none</internalKey>
        <description>Using identifiers that are reserved for the implementation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-4-2_none</internalKey>
        <description>Assembler instructions shall only be introduced using the asm declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_LOCK_double_lock</key>
        <name>Program hangs : Double lock</name>
        <internalKey>STATIC_C_LOCK_double_lock</internalKey>
        <description>Attempt to acquire a non-recursive lock that is already held</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_LOCK_lock_assert</key>
        <name>API usage errors : Lock assertion failure</name>
        <internalKey>STATIC_C_LOCK_lock_assert</internalKey>
        <description>A lock assertion fails because a lock is not held on a path where it is asserted</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_LOCK_missing_unlock</key>
        <name>Program hangs : Missing unlock</name>
        <internalKey>STATIC_C_LOCK_missing_unlock</internalKey>
        <description>Missing a release of a lock on a path</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_LOCK_none</key>
        <name>Program hangs : Double lock or missing unlock</name>
        <internalKey>STATIC_C_LOCK_none</internalKey>
        <description>Missing a release of a lock on a path, or an attempt to acquire a lock more than once</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_ALLOC_ARITHMETIC_none</key>
        <name>Memory - corruptions : Stray pointer arithmetic</name>
        <internalKey>STATIC_C_BAD_ALLOC_ARITHMETIC_none</internalKey>
        <description>Pointer arithmetic performed on freshly allocated memory</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 11-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Member Access Control</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 11-0-1_none</internalKey>
        <description>Member data in non-POD class types shall be private.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-6-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-6-3_none</internalKey>
        <description>The continue statement shall only be used within a well-formed for loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-9_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-9_none</internalKey>
        <description>A cast should not convert a pointer type to an integral type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-6-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-6-2_none</internalKey>
        <description>The goto statement shall jump to a label declared later in the same function body.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-6-1_none</internalKey>
        <description>Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP60-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP60-CPP_none</internalKey>
        <description>Do not pass a nonstandard-layout type object across execution boundaries.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-3_none</internalKey>
        <description>Casts from a base class to a derived class should not be performed on polymorphic types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-4_none</internalKey>
        <description>C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-1_BINARY_OPERATOR_SUBEXPR</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-1_BINARY_OPERATOR_SUBEXPR</internalKey>
        <description>Each operand of a logical &amp;&amp; or || shall be a postfix-expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-1_LOGICAL_OPERATOR_SUBEXPR</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-1_LOGICAL_OPERATOR_SUBEXPR</internalKey>
        <description>Each operand of a logical &amp;&amp; or || shall be a postfix-expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-1_UNARY_OPERATOR_SUBEXPR</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-1_UNARY_OPERATOR_SUBEXPR</internalKey>
        <description>Each operand of a logical &amp;&amp; or || shall be a postfix-expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-1_none</internalKey>
        <description>Each operand of a logical &amp;&amp; or || shall be a postfix-expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP52-CPP_NON_TYPEID_SIDE_EFFECT</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP52-CPP_NON_TYPEID_SIDE_EFFECT</internalKey>
        <description>Do not rely on side effects in unevaluated operands.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP52-CPP_TYPEID_SIDE_EFFECT</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP52-CPP_TYPEID_SIDE_EFFECT</internalKey>
        <description>Do not rely on side effects in unevaluated operands.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP52-CPP_none</internalKey>
        <description>Do not rely on side effects in unevaluated operands.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 10-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Derived Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 10-2-1_none</internalKey>
        <description>All accessible entity names within a multiple inheritance hierarchy should be unique.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-2_none</internalKey>
        <description>A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-7_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-7_none</internalKey>
        <description>An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-8-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-8-1_none</internalKey>
        <description>The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-8_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-8_none</internalKey>
        <description>An object with integer type or pointer to void type shall not be converted to an object with pointer type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-5_none</internalKey>
        <description>A cast shall not remove any const or volatile qualification from the type of a pointer or reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-2-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-2-6_none</internalKey>
        <description>A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR50-CPP_none</internalKey>
        <description>Do not abruptly terminate the program.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-16-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-16-1_none</internalKey>
        <description>The ternary conditional operator shall not be used as a sub-expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.ASSIGN_WHERE_COMPARE_MEANT_none</key>
        <name>Incorrect expression : Assign instead of compare</name>
        <internalKey>STATIC_C_PW.ASSIGN_WHERE_COMPARE_MEANT_none</internalKey>
        <description>An assignment (=) occurs where compare (==) is probably intended</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-3-2_none</internalKey>
        <description>If a function generates error information, then that error information shall be tested.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNCAUGHT_EXCEPT_none</key>
        <name>Error handling issues : Uncaught exception</name>
        <internalKey>STATIC_C_UNCAUGHT_EXCEPT_none</internalKey>
        <description>A C++ exception is thrown but never caught</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 signconv_none</key>
        <name>Coding standard violation : ISO TS17961 2013 signconv</name>
        <internalKey>STATIC_C_ISO TS17961 2013 signconv_none</internalKey>
        <description>Conversion of signed characters to wider integer types before a check for EOF.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 taintformatio_none</key>
        <name>Coding standard violation : ISO TS17961 2013 taintformatio</name>
        <internalKey>STATIC_C_ISO TS17961 2013 taintformatio_none</internalKey>
        <description>Using a tainted value to write to an object using a formatted input or output function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ORDER_REVERSAL_none</key>
        <name>Program hangs : Thread deadlock</name>
        <internalKey>STATIC_C_ORDER_REVERSAL_none</internalKey>
        <description>Threads may try to acquire two locks in different orders, potentially causing deadlock</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.6_none</internalKey>
        <description>The declaration of an array parameter shall not contain the static keyword between the [ ].</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.5_none</internalKey>
        <description>The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.8_none</internalKey>
        <description>A function parameter should not be modified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 ioileave_none</key>
        <name>Coding standard violation : ISO TS17961 2013 ioileave</name>
        <internalKey>STATIC_C_ISO TS17961 2013 ioileave_none</internalKey>
        <description>Interleaving stream inputs and outputs without a flush or positioning call.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.7_none</internalKey>
        <description>The value returned by a function having non-void return type shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR58-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR58-CPP_none</internalKey>
        <description>Predicate function objects should not be mutable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.2_none</internalKey>
        <description>Functions shall not call themselves, either directly or indirectly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.1_none</internalKey>
        <description>The features of &lt;stdarg.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.4_none</internalKey>
        <description>All exit paths from a function with non-void return type shall have an explicit return statement with an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 17.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Functions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 17.3_none</internalKey>
        <description>A function shall not be declared implicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 nonnullcs_none</key>
        <name>Coding standard violation : ISO TS17961 2013 nonnullcs</name>
        <internalKey>STATIC_C_ISO TS17961 2013 nonnullcs_none</internalKey>
        <description>Passing a non-null-terminated character sequence to a library function that expects a string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP40-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP40-C_none</internalKey>
        <description>Do not modify constant objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.TOO_FEW_PRINTF_ARGS_none</key>
        <name>API usage errors : Printf arg count mismatch</name>
        <internalKey>STATIC_C_PW.TOO_FEW_PRINTF_ARGS_none</internalKey>
        <description>The number of arguments to printf does not match the format string</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL37-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL37-C_none</internalKey>
        <description>Do not declare or define a reserved identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.20_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.20_none</internalKey>
        <description>The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A9-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A9-5-1_none</internalKey>
        <description>Unions shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-5_none</internalKey>
        <description>There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-6_none</internalKey>
        <description>There should be no unused type declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 asyncsig_none</key>
        <name>Coding standard violation : ISO TS17961 2013 asyncsig</name>
        <internalKey>STATIC_C_ISO TS17961 2013 asyncsig_none</internalKey>
        <description>Calling functions in the C Standard Library other than abort, _Exit, and signal from within a signal handler</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.19_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.19_none</internalKey>
        <description>The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 11.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 11.1_none</internalKey>
        <description>Conversions shall not be performed between a pointer to a function and any type other than an integral type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 7.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Literals and Constants</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 7.2_none</internalKey>
        <description>A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 7.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Literals and Constants</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 7.3_none</internalKey>
        <description>The lowercase character &quot;l&quot; shall not be used in a literal suffix.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 11.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 11.3_none</internalKey>
        <description>A cast should not be performed between a pointer type and an integral type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 7.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Literals and Constants</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 7.4_none</internalKey>
        <description>A string literal shall not be assigned to an object unless the object&apos;s type is &quot;pointer to const-qualified char&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 11.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 11.2_none</internalKey>
        <description>Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 7.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Literals and Constants</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 7.1_none</internalKey>
        <description>Octal constants shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-4-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-4-3_none</internalKey>
        <description>Assembly language shall be encapsulated and isolated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SWAPPED_ARGUMENTS_none</key>
        <name>API usage errors : Arguments in wrong order</name>
        <internalKey>STATIC_C_SWAPPED_ARGUMENTS_none</internalKey>
        <description>The arguments to a function call are provided in the wrong order.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG30-C_ASYNC_SAFE_POSIX_FUNC</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG30-C_ASYNC_SAFE_POSIX_FUNC</internalKey>
        <description>Call only asynchronous-safe functions within signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG30-C_NON_ASYNC_SAFE_FUNC</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG30-C_NON_ASYNC_SAFE_FUNC</internalKey>
        <description>Call only asynchronous-safe functions within signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT SIG30-C_none</key>
        <name>Coding standard violation : CERT-C Signals</name>
        <internalKey>STATIC_C_CERT SIG30-C_none</internalKey>
        <description>Call only asynchronous-safe functions within signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.8_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.8_none</internalKey>
        <description>An external object or function shall be declared in one and only one file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.10_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.10_none</internalKey>
        <description>The Standard Library time and date functions shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-4-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-4-2_none</internalKey>
        <description>Assembler instructions shall only be introduced using the asm declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.9_missing_definition</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.9_missing_definition</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.9_multiple_definitions</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.9_multiple_definitions</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.9_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.9_none</internalKey>
        <description>An identifier with external linkage shall have exactly one external definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 11.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 11.5_none</internalKey>
        <description>A cast shall not be performed that removes any const or volatile qualification from the type addressed by a pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 11.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Pointer Type Conversions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 11.4_none</internalKey>
        <description>A cast should not be performed between a pointer to object type and a different pointer to object type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-10_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-10_none</internalKey>
        <description>If the bitwise operators ~and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.2_none</internalKey>
        <description>Whenever an object or function is declared or defined, its type shall be explicitly stated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.16_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.16_none</internalKey>
        <description>The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-11_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-11_none</internalKey>
        <description>The plain char type shall only be used for the storage and use of character values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.3_none</internalKey>
        <description>For each function parameter the type given in the declaration and definition shall be identical, and the return types shall also be identical.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.15_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.15_none</internalKey>
        <description>The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-0-12_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-0-12_none</internalKey>
        <description>Signed char and unsigned char type shall only be used for the storage and use of numeric values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.18_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.18_none</internalKey>
        <description>The size_t argument passed to any function in &lt;string.h&gt; shall have an appropriate value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.1_none</internalKey>
        <description>Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.17_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.17_none</internalKey>
        <description>Use of the string handling functions from &amp;lt;string.h&amp;gt; shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-0-3_none</internalKey>
        <description>Exception safety guarantee of a called function shall be considered.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.6_none</internalKey>
        <description>Functions shall be declared at file scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.12_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.12_none</internalKey>
        <description>The exception handling features of &lt;fenv.h&gt; should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-0-2_none</internalKey>
        <description>At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.7_none</internalKey>
        <description>Objects shall be defined at block scope if they are only accessed from within a single function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.11_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.11_none</internalKey>
        <description>The standard header file &lt;tgmath.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.4_none</internalKey>
        <description>If objects or functions are declared more than once their types shall be compatible.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.14_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.14_none</internalKey>
        <description>The Standard Library function memcmp shall not be used to compare null terminated strings.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR53-CPP_none</internalKey>
        <description>Do not reference base classes or class data members in a constructor or destructor function-try-block handler.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 8.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 8.5_none</internalKey>
        <description>There shall be no definitions of objects or functions in a header file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.13_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.13_none</internalKey>
        <description>Any value passed to a function in &amp;lt;ctype.h&amp;gt; shall be representable as an unsigned char or be the value EOF.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-4-2_none</internalKey>
        <description>If a public destructor of a class is non-virtual, then the class should be declared final.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-4-1_none</internalKey>
        <description>Destructor of a base class shall be public virtual, public override or protected non-virtual.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP53-CPP_none</internalKey>
        <description>Do not read uninitialized memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-2-1_none</internalKey>
        <description>Assignment operators shall not be used in sub-expressions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-2-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-2-2_none</internalKey>
        <description>Floating-point expressions shall not be directly or indirectly tested for equality or inequality.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 6-2-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Statements</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 6-2-3_none</internalKey>
        <description>Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON30-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON30-C_none</internalKey>
        <description>Clean up thread-specific storage.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-2-3_none</internalKey>
        <description>A relational operator shall return a boolean value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-2-2_none</internalKey>
        <description>A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_USE_AFTER_FREE_deref_read_after_free</key>
        <name>Memory - illegal accesses : Read from pointer after free</name>
        <internalKey>STATIC_C_USE_AFTER_FREE_deref_read_after_free</internalKey>
        <description>Reads target of a freed pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_USE_AFTER_FREE_deref_write_after_free</key>
        <name>Memory - corruptions : Write to pointer after free</name>
        <internalKey>STATIC_C_USE_AFTER_FREE_deref_write_after_free</internalKey>
        <description>Write to target of a freed pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_USE_AFTER_FREE_double_close</key>
        <name>API usage errors : Double close</name>
        <internalKey>STATIC_C_USE_AFTER_FREE_double_close</internalKey>
        <description>A resource handle or descriptor is closed more than once</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_USE_AFTER_FREE_double_free</key>
        <name>Memory - corruptions : Double free</name>
        <internalKey>STATIC_C_USE_AFTER_FREE_double_free</internalKey>
        <description>Memory is deallocated more than once</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_USE_AFTER_FREE_none</key>
        <name>Memory - illegal accesses : Use after free</name>
        <internalKey>STATIC_C_USE_AFTER_FREE_none</internalKey>
        <description>A pointer to freed memory is  dereferenced, used as a function argument, or otherwise used</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_USE_AFTER_FREE_use_after_close</key>
        <name>API usage errors : Use after close</name>
        <internalKey>STATIC_C_USE_AFTER_FREE_use_after_close</internalKey>
        <description>A resource handle or descriptor is used after being closed</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-1_none</internalKey>
        <description>A project shall not contain instances of non-volatile variables being given values that are not subsequently used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-2_none</internalKey>
        <description>The value returned by a function having a non-void return type that is not an overloaded operator shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-3_none</internalKey>
        <description>Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A13-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Overloading</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A13-2-1_none</internalKey>
        <description>An assignment operator shall return a reference to &quot;this&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-4_NON_VIRTUAL_FUNC_PARAM</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-4_NON_VIRTUAL_FUNC_PARAM</internalKey>
        <description>There shall be no unused named parameters in non-virtual functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-4_VIRTUAL_FUNC_PARAM</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-4_VIRTUAL_FUNC_PARAM</internalKey>
        <description>There shall be no unused named parameters in non-virtual functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-1-4_none</internalKey>
        <description>There shall be no unused named parameters in non-virtual functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR51-CPP_none</internalKey>
        <description>Do not attempt to create a std::string from a null pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 libuse_none</key>
        <name>Coding standard violation : ISO TS17961 2013 libuse</name>
        <internalKey>STATIC_C_ISO TS17961 2013 libuse_none</internalKey>
        <description>Using an object overwritten by getenv, localeconv, setlocale, and strerror.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-9_none</internalKey>
        <description>There shall be no dead code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_FORWARD_NULL_deref_constant_null</key>
        <name>Null pointer dereferences : Explicit null dereferenced</name>
        <internalKey>STATIC_C_FORWARD_NULL_deref_constant_null</internalKey>
        <description>Dereference of an explicit null value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_FORWARD_NULL_dynamic_cast</key>
        <name>Null pointer dereferences : Unchecked dynamic_cast</name>
        <internalKey>STATIC_C_FORWARD_NULL_dynamic_cast</internalKey>
        <description>Dynamic_cast may fail and return null if the type cast is incompatible</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_FORWARD_NULL_none</key>
        <name>Null pointer dereferences : Dereference after null check</name>
        <internalKey>STATIC_C_FORWARD_NULL_none</internalKey>
        <description>Pointer is checked against null but then dereferenced anyway</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_FORWARD_NULL_throws_on_null</key>
        <name>Null pointer dereferences : Null value leads to thrown exception</name>
        <internalKey>STATIC_C_FORWARD_NULL_throws_on_null</internalKey>
        <description>A null value is passed to a function that throws an exception in that case</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 accfree_none</key>
        <name>Coding standard violation : ISO TS17961 2013 accfree</name>
        <internalKey>STATIC_C_ISO TS17961 2013 accfree_none</internalKey>
        <description>Accessing freed memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-3_none</internalKey>
        <description>A project shall not contain unused variables.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-4_none</internalKey>
        <description>A project shall not contain non-volatile POD variables having only one use.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-1_none</internalKey>
        <description>A project shall not contain unreachable code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-2_none</internalKey>
        <description>A project shall not contain infeasible paths.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 filecpy_none</key>
        <name>Coding standard violation : ISO TS17961 2013 filecpy</name>
        <internalKey>STATIC_C_ISO TS17961 2013 filecpy_none</internalKey>
        <description>Copying a FILE object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-8_none</internalKey>
        <description>All functions with void return type shall have external side effect(s).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_MOVE_ASSIGNMENT_none</key>
        <name>Low impact quality : Missing move assignment operator</name>
        <internalKey>STATIC_C_MISSING_MOVE_ASSIGNMENT_none</internalKey>
        <description>Class lacks a user-written move assignment operator</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR30-C_MODIFY_STRING_LITERALS</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR30-C_MODIFY_STRING_LITERALS</internalKey>
        <description>Do not attempt to modify string literals.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR30-C_STRING_LITERALS_TO_NONCONST</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR30-C_STRING_LITERALS_TO_NONCONST</internalKey>
        <description>Do not attempt to modify string literals.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR30-C_none</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR30-C_none</internalKey>
        <description>Do not attempt to modify string literals.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 19.2_HANDLE_TAGGED_UNION</key>
        <name>Coding standard violation : MISRA C-2012 Overlapping Storage</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 19.2_HANDLE_TAGGED_UNION</internalKey>
        <description>The union keyword should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 19.2_NON_TAGGED_UNION</key>
        <name>Coding standard violation : MISRA C-2012 Overlapping Storage</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 19.2_NON_TAGGED_UNION</internalKey>
        <description>The union keyword should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 19.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Overlapping Storage</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 19.2_none</internalKey>
        <description>The union keyword should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 19.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Overlapping Storage</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 19.1_none</internalKey>
        <description>An object shall not be assigned or copied to an overlapping object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR52-CPP_none</internalKey>
        <description>Do not use setjmp() or longjmp().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.UNSIGNED_COMPARE_WITH_NEGATIVE_none</key>
        <name>Integer handling issues : Unsigned compared with neg</name>
        <internalKey>STATIC_C_PW.UNSIGNED_COMPARE_WITH_NEGATIVE_none</internalKey>
        <description>An unsigned value, which can never be less than 0, is compared with a negative value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PATH_MANIPULATION_none</key>
        <name>High impact security : Filesystem path, filename, or URI manipulation</name>
        <internalKey>STATIC_C_PATH_MANIPULATION_none</internalKey>
        <description>A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier).</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP42-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP42-C_none</internalKey>
        <description>Do not compare padding data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-5-0_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-5-0_none</internalKey>
        <description>All memory shall be initialized before it is read.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-3-2_none</internalKey>
        <description>The # and ## operators should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-5-2_none</internalKey>
        <description>Braced-initialization {}, without equals sign, shall be used for variable initialization.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A9-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A9-3-1_none</internalKey>
        <description>Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-5-1_none</internalKey>
        <description>In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M16-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M16-3-1_none</internalKey>
        <description>There shall be at most one occurrence of the # or ## operators in a single macro definition.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-5-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-5-4_none</internalKey>
        <description>If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-5-3_none</internalKey>
        <description>A variable of type auto shall not be initialized using {} or ={} braced-initialization.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR50-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR50-CPP_none</internalKey>
        <description>Guarantee that storage for strings has sufficient space for character data and the null terminator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNEXPECTED_CONTROL_FLOW_continue_in_do_while_false</key>
        <name>Control flow issues : Unexpected control flow</name>
        <internalKey>STATIC_C_UNEXPECTED_CONTROL_FLOW_continue_in_do_while_false</internalKey>
        <description>Loop body does not re-execute on &apos;continue&apos; statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNEXPECTED_CONTROL_FLOW_none</key>
        <name>Control flow issues : Unexpected control flow</name>
        <internalKey>STATIC_C_UNEXPECTED_CONTROL_FLOW_none</internalKey>
        <description>Loop body does not re-execute on &apos;continue&apos; statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 9.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Initializers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 9.4_none</internalKey>
        <description>An element of an object shall not be initialized more than once.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-0-1_none</internalKey>
        <description>An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 6.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Types</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 6.1_none</internalKey>
        <description>The plain char type shall be used only for the storage and use of character values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 9.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Initializers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 9.5_none</internalKey>
        <description>Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 9.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Initializers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 9.1_none</internalKey>
        <description>The value of an object with automatic storage duration shall not be read before it has been set.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.1_none</internalKey>
        <description>Assignment operators shall not be used in expressions that yield a Boolean value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 9.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Initializers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 9.2_none</internalKey>
        <description>The initializer for an aggregate or union shall be enclosed in braces.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 9.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Initializers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 9.3_none</internalKey>
        <description>Arrays shall not be partially initialized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON41-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON41-C_none</internalKey>
        <description>Wrap functions that can fail spuriously in a loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 addrescape_none</key>
        <name>Coding standard violation : ISO TS17961 2013 addrescape</name>
        <internalKey>STATIC_C_ISO TS17961 2013 addrescape_none</internalKey>
        <description>Escaping of the address of an automatic object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.7_none</internalKey>
        <description>Boolean operations whose results are invariant shall not be permitted.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.6_none</internalKey>
        <description>Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO38-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO38-C_none</internalKey>
        <description>Do not copy a FILE object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-9-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-9-1_none</internalKey>
        <description>The std::bind shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_COM.BSTR.BAD_COMPARE_none</key>
        <name>API usage errors : Bad COM BSTR comparison</name>
        <internalKey>STATIC_C_COM.BSTR.BAD_COMPARE_none</internalKey>
        <description>Comparison of two BSTRs for other than equality</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.DIVIDE_BY_ZERO_none</key>
        <name>Integer handling issues : Divide by zero</name>
        <internalKey>STATIC_C_PW.DIVIDE_BY_ZERO_none</internalKey>
        <description>Divide by zero</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-9-2_FWD_REF</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-9-2_FWD_REF</internalKey>
        <description>Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-9-2_R_VAL_REF</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-9-2_R_VAL_REF</internalKey>
        <description>Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-9-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-9-2_none</internalKey>
        <description>Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 7-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarations</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 7-2-1_none</internalKey>
        <description>An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.3_none</internalKey>
        <description>Floating-point expressions shall not be tested for equality or inequality.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-9-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-9-3_none</internalKey>
        <description>The std::move shall not be used on objects declared const or const&amp;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M8-4-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M8-4-4_none</internalKey>
        <description>A function identifier shall either be used to call the function or it shall be preceded by &amp;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.2_none</internalKey>
        <description>Tests of a value against zero should be made explicit, unless the operand is effectively Boolean.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-9-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-9-4_none</internalKey>
        <description>An argument to std::forward shall not be subsequently used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.5_none</internalKey>
        <description>The three expressions of a for statement shall be concerned only with loop control.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M8-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M8-4-2_none</internalKey>
        <description>The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 13.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Control Statement Expressions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 13.4_none</internalKey>
        <description>The controlling expression of a for statement shall not contain any objects of floating type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 6.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Types</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 6.4_none</internalKey>
        <description>Bit fields shall only be defined to be of type unsigned int or signed int.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 6.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Types</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 6.5_none</internalKey>
        <description>Bit fields of signed type shall be at least 2 bits long.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 6.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Types</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 6.2_none</internalKey>
        <description>signed and unsigned char type shall be used only for the storage and use of numeric values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 6.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Types</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 6.3_none</internalKey>
        <description>typedefs that indicate size and signedness should be used in place of the basic numerical types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC40-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC40-C_none</internalKey>
        <description>Do not violate constraints.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-4-1_none</internalKey>
        <description>The asm declaration shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-5-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-5-1_none</internalKey>
        <description>Digraphs should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A8-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarators</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A8-2-1_none</internalKey>
        <description>When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO40-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO40-C_none</internalKey>
        <description>Reset strings on fgets() or fgetws() failure.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR56-CPP_none</internalKey>
        <description>Do not use pointer arithmetic on polymorphic objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_VCALL_IN_CTOR_DTOR_none</key>
        <name>Bad call to a virtual method : Bad call to a virtual method</name>
        <internalKey>STATIC_C_VCALL_IN_CTOR_DTOR_none</internalKey>
        <description>A virtual method is called from a constructor/destructor.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-4-2_DEDUCED_LONG_DOUBLE_TYPE</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-4-2_DEDUCED_LONG_DOUBLE_TYPE</internalKey>
        <description>Type long double shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-4-2_INSTANTIATED_LONG_DOUBLE_TYPE</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-4-2_INSTANTIATED_LONG_DOUBLE_TYPE</internalKey>
        <description>Type long double shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-4-2_LONG_DOUBLE_PLAINTEXT_TYPE</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-4-2_LONG_DOUBLE_PLAINTEXT_TYPE</internalKey>
        <description>Type long double shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-4-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-4-2_none</internalKey>
        <description>Type long double shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M2-10-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M2-10-1_none</internalKey>
        <description>Different identifiers shall be typographically unambiguous.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A0-4-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A0-4-4_none</internalKey>
        <description>Range, domain and pole errors shall be checked when using math functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M19-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Diagnostic Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M19-3-1_none</internalKey>
        <description>The error indicator errno shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MIXED_ENUMS_inferred</key>
        <name>Incorrect expression : Inferred misuse of enum</name>
        <internalKey>STATIC_C_MIXED_ENUMS_inferred</internalKey>
        <description>An integer expression which was inferred to have an enum type is mixed with a different enum type</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MIXED_ENUMS_none</key>
        <name>Incorrect expression : Mixing enum types</name>
        <internalKey>STATIC_C_MIXED_ENUMS_none</internalKey>
        <description>An enum-typed expression is mixed with a different enum type</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP55-CPP_none</internalKey>
        <description>Do not use pointer-to-member operators to access nonexistent members.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL56-CPP_none</internalKey>
        <description>Avoid cycles during initialization of static objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_STRING_none</key>
        <name>Insecure data handling : Use of untrusted string value</name>
        <internalKey>STATIC_C_TAINTED_STRING_none</internalKey>
        <description>An unscrutinized string from an untrusted source used in a trusted context</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC54-CPP_none</internalKey>
        <description>A signal handler must be a plain old function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM35-C_none</key>
        <name>Coding standard violation : CERT-C Memory Management</name>
        <internalKey>STATIC_C_CERT MEM35-C_none</internalKey>
        <description>Allocate sufficient memory for an object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_PASSWORD_HASH_none</key>
        <name>High impact security : Weak password hashing</name>
        <internalKey>STATIC_C_WEAK_PASSWORD_HASH_none</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive, and/or without using a random and unique salt as part of the input.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_PASSWORD_HASH_weak_hash</key>
        <name>Medium impact security : Hashing a password with a weak hash function</name>
        <internalKey>STATIC_C_WEAK_PASSWORD_HASH_weak_hash</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_PASSWORD_HASH_weak_hash_no_salt</key>
        <name>High impact security : Very weak password hashing</name>
        <internalKey>STATIC_C_WEAK_PASSWORD_HASH_weak_hash_no_salt</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive, and without using any salt as part of the input.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_PASSWORD_HASH_weak_hash_weak_salt</key>
        <name>High impact security : Weak password hashing</name>
        <internalKey>STATIC_C_WEAK_PASSWORD_HASH_weak_hash_weak_salt</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive, and without using a random and unique salt as part of the input.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_PASSWORD_HASH_weak_salt</key>
        <name>Low impact security : Hashing a password with a weak salt</name>
        <internalKey>STATIC_C_WEAK_PASSWORD_HASH_weak_salt</internalKey>
        <description>Hashing a password without using a random and unique salt as part of the input.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP44-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP44-C_none</internalKey>
        <description>Do not rely on side effects in operands to sizeof, _Alignof, or _Generic.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 xfree_none</key>
        <name>Coding standard violation : ISO TS17961 2013 xfree</name>
        <internalKey>STATIC_C_ISO TS17961 2013 xfree_none</internalKey>
        <description>Reallocating or freeing memory that was not dynamically allocated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_array_index_read</key>
        <name>Memory - illegal accesses : Uninitialized array index read</name>
        <internalKey>STATIC_C_UNINIT_array_index_read</internalKey>
        <description>Read from array at uninitialized index</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_array_index_write</key>
        <name>Memory - corruptions : Uninitialized array index write</name>
        <internalKey>STATIC_C_UNINIT_array_index_write</internalKey>
        <description>Write to array at uninitialized index</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_none</key>
        <name>Uninitialized variables : Uninitialized scalar variable</name>
        <internalKey>STATIC_C_UNINIT_none</internalKey>
        <description>Use of an uninitialized variable</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_pointer_deref_read</key>
        <name>Memory - illegal accesses : Uninitialized pointer read</name>
        <internalKey>STATIC_C_UNINIT_pointer_deref_read</internalKey>
        <description>Reads an uninitialized pointer or its target</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_pointer_deref_write</key>
        <name>Memory - corruptions : Uninitialized pointer write</name>
        <internalKey>STATIC_C_UNINIT_pointer_deref_write</internalKey>
        <description>Write to target of an uninitialized pointer</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-3-1_none</internalKey>
        <description>Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-3-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-3-3_none</internalKey>
        <description>The unary &amp; operator shall not be overloaded.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC30-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC30-C_none</internalKey>
        <description>Do not use the rand() function for generating pseudorandom numbers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-3-2_none</internalKey>
        <description>The unary minus operator shall not be applied to an expression whose underlying type is unsigned.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ARR32-C_none</key>
        <name>Coding standard violation : CERT-C Array</name>
        <internalKey>STATIC_C_CERT ARR32-C_none</internalKey>
        <description>Ensure size arguments for variable length arrays are in a valid range.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M5-3-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M5-3-4_none</internalKey>
        <description>Evaluation of the operand to the sizeof operator shall not contain side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-4-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-4-1_none</internalKey>
        <description>Dynamic heap memory allocation shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM57-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM57-CPP_none</internalKey>
        <description>Avoid using default operator new for over-aligned types.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 14.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 14.1_none</internalKey>
        <description>A loop counter shall not have essentially floating type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZECHECK_ampersand_in_size</key>
        <name>Memory - corruptions : Allocation size with &apos;&amp;&apos;</name>
        <internalKey>STATIC_C_SIZECHECK_ampersand_in_size</internalKey>
        <description>Allocation size is computed using the bitwise-and operator (&amp;amp;), which is likely to be a typo</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZECHECK_improper_new</key>
        <name>Memory - corruptions : Incorrect operator new syntax</name>
        <internalKey>STATIC_C_SIZECHECK_improper_new</internalKey>
        <description>This invocation of operator new only creates one value, not an array of values</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZECHECK_incorrect_multiplication</key>
        <name>Memory - corruptions : Allocation size mismatch</name>
        <internalKey>STATIC_C_SIZECHECK_incorrect_multiplication</internalKey>
        <description>Allocation size is not a multiple of the target pointer&apos;s pointed-to type</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZECHECK_likely_overflow</key>
        <name>Memory - corruptions : Allocation too small for type</name>
        <internalKey>STATIC_C_SIZECHECK_likely_overflow</internalKey>
        <description>Allocation size is too small for the type of object being allocated</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZECHECK_no_null_terminator</key>
        <name>Memory - corruptions : Allocation too small for string</name>
        <internalKey>STATIC_C_SIZECHECK_no_null_terminator</internalKey>
        <description>Allocation size for a string is equal to the strlen of another string, which does not include extra byte for null termination</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_SIZECHECK_none</key>
        <name>Memory - illegal accesses : Allocation size error</name>
        <internalKey>STATIC_C_SIZECHECK_none</internalKey>
        <description>The allocation size is computed incorrectly</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-3-1_none</internalKey>
        <description>Objects or functions with external linkage shall be declared in a header file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 14.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 14.3_none</internalKey>
        <description>Controlling expressions shall not be invariant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 14.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 14.2_none</internalKey>
        <description>A for loop shall be well-formed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 4.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Character Sets</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 4.2_none</internalKey>
        <description>Trigraphs shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.NON_CONST_PRINTF_FORMAT_STRING_none</key>
        <name>Security best practices violations : Non-constant format string</name>
        <internalKey>STATIC_C_PW.NON_CONST_PRINTF_FORMAT_STRING_none</internalKey>
        <description>A non-constant printf format string may be susceptible to format string attacks</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 4.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Character Sets</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 4.1_none</internalKey>
        <description>Only those escape sequences that are defined in the ISO C standard shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M4-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M4-5-3_none</internalKey>
        <description>Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M4-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Standard Conversions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M4-5-1_none</internalKey>
        <description>Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 3.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Comments</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 3.2_none</internalKey>
        <description>Line-splicing shall not be used in // comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP33-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP33-C_none</internalKey>
        <description>Do not read uninitialized memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-6-1_none</internalKey>
        <description>The goto statement shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 3.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Comments</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 3.1_none</internalKey>
        <description>The character sequences /* and // shall not be used within a comment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON52-CPP_none</internalKey>
        <description>Prevent data races when accessing bit-fields from multiple threads.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP58-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP58-CPP_none</internalKey>
        <description>Pass an object of the correct type to va_start.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-3-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-3-2_none</internalKey>
        <description>If a function has internal linkage then all re-declarations shall include the static storage class specifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 14.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Control Flow Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 14.4_none</internalKey>
        <description>The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNREACHABLE_none</key>
        <name>Control flow issues : Structurally dead code</name>
        <internalKey>STATIC_C_UNREACHABLE_none</internalKey>
        <description>Code block is unreachable because of the syntactic structure of the code</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-2-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-2-4_none</internalKey>
        <description>In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-2-3_none</internalKey>
        <description>Enumerations shall be declared as scoped enum classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-2-2_none</internalKey>
        <description>Enumeration underlying base type shall be explicitly defined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A7-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A7-2-1_none</internalKey>
        <description>An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR57-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR57-CPP_none</internalKey>
        <description>Provide a valid ordering predicate.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-7-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-7-3_none</internalKey>
        <description>Sections of code should not be &quot;commented out&quot; using C++ comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A16-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Preprocessor Directives</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A16-7-1_none</internalKey>
        <description>The #pragma directive shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-7-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-7-2_none</internalKey>
        <description>Sections of code should not be &quot;commented out&quot; using C-style comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-7-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-7-1_none</internalKey>
        <description>The character sequence /* shall not be used within a C-style comment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-0-2_none</internalKey>
        <description>Bitwise operations and operations that assume data representation in memory shall not be performed on objects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISSING_COMMA_none</key>
        <name>Incorrect expression : Missing comma in a string array initialization</name>
        <internalKey>STATIC_C_MISSING_COMMA_none</internalKey>
        <description>A comma is suspiciously missing between lines in a string array initialization.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A12-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Special Member Functions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A12-0-1_none</internalKey>
        <description>If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 chrsgnext_none</key>
        <name>Coding standard violation : ISO TS17961 2013 chrsgnext</name>
        <internalKey>STATIC_C_ISO TS17961 2013 chrsgnext_none</internalKey>
        <description>Passing arguments to character-handling functions that are not representable as unsigned char.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_STRAY_SEMICOLON_none</key>
        <name>Control flow issues : Stray semicolon</name>
        <internalKey>STATIC_C_STRAY_SEMICOLON_none</internalKey>
        <description>The code contains a semicolon where it is probably not intended, such as between a &apos;for&apos;, &apos;while&apos;, or &apos;if&apos; and a code block.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-2-1_none</internalKey>
        <description>The macro offsetof shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL55-CPP_none</internalKey>
        <description>Avoid information leakage when passing a class object across a trust boundary.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP54-CPP_COPY_ASSIGNMENT</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP54-CPP_COPY_ASSIGNMENT</internalKey>
        <description>Gracefully handle self-copy assignment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP54-CPP_MOVE_ASSIGNMENT</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP54-CPP_MOVE_ASSIGNMENT</internalKey>
        <description>Gracefully handle self-copy assignment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP54-CPP_none</internalKey>
        <description>Gracefully handle self-copy assignment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_NESTING_INDENT_MISMATCH_bad_indentation</key>
        <name>Code maintainability issues : Indentation does not match nesting level</name>
        <internalKey>STATIC_C_NESTING_INDENT_MISMATCH_bad_indentation</internalKey>
        <description>The indentation of this code does not reflect its syntactic nesting level.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_NESTING_INDENT_MISMATCH_none</key>
        <name>Control flow issues : Nesting level does not match indentation</name>
        <internalKey>STATIC_C_NESTING_INDENT_MISMATCH_none</internalKey>
        <description>The indentation of this code suggests it is nested when it is not.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 insufmem_none</key>
        <name>Coding standard violation : ISO TS17961 2013 insufmem</name>
        <internalKey>STATIC_C_ISO TS17961 2013 insufmem_none</internalKey>
        <description>Allocating insufficient memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M0-1-10_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Independent Issues</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M0-1-10_none</internalKey>
        <description>Every defined function should be called at least once.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A25-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Algorithms Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A25-4-1_none</internalKey>
        <description>Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP46-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP46-C_none</internalKey>
        <description>Do not use a bitwise operator with a Boolean-like operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M7-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Declarations</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M7-1-2_none</internalKey>
        <description>A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_OS_CMD_INJECTION_none</key>
        <name>High impact security : OS Command Injection</name>
        <internalKey>STATIC_C_OS_CMD_INJECTION_none</internalKey>
        <description>Untrusted user-supplied data is inserted into an operating system command without adequate validation, escaping, or filtering. This inserted data can change the intent of the operating system command. The change to the operating system command may result in the unauthorized disclosure, destruction, or modification of sensitive data or operating system resources.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.3_none</internalKey>
        <description>The validity of values passed to library functions shall be checked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.2_none</internalKey>
        <description>The names of standard library macros, objects and functions shall not be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.5_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.5_none</internalKey>
        <description>The error indicator errno shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL39-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL39-C_none</internalKey>
        <description>Avoid information leakage when passing a structure across a trust boundary.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.4_none</internalKey>
        <description>Dynamic heap memory allocation shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.1_none</internalKey>
        <description>Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.7_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.7_none</internalKey>
        <description>The setjmp macro and the longjmp function shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.6_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.6_none</internalKey>
        <description>The macro offsetof, in library &lt;stddef.h&gt;, shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.9_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.9_none</internalKey>
        <description>The input/output library &lt;stdio.h&gt; shall not be used in production code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M6-3-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M6-3-1_none</internalKey>
        <description>The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 20.8_none</key>
        <name>Coding standard violation : MISRA C-2004 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 20.8_none</internalKey>
        <description>The signal handling facilities of &lt;signal.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ARR30-C_none</key>
        <name>Coding standard violation : CERT-C Array</name>
        <internalKey>STATIC_C_CERT ARR30-C_none</internalKey>
        <description>Do not form or use out-of-bounds pointers or array subscripts.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MSC32-C_none</key>
        <name>Coding standard violation : CERT-C Miscellaneous</name>
        <internalKey>STATIC_C_CERT MSC32-C_none</internalKey>
        <description>Properly seed pseudorandom number generators.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_INCOMPATIBLE_CAST_endianness</key>
        <name>Integer handling issues : Reliance on integer endianness</name>
        <internalKey>STATIC_C_INCOMPATIBLE_CAST_endianness</internalKey>
        <description>Reliance on integer endianness</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INCOMPATIBLE_CAST_float_vs_integral</key>
        <name>Integer handling issues : Incompatible cast</name>
        <internalKey>STATIC_C_INCOMPATIBLE_CAST_float_vs_integral</internalKey>
        <description>Cast between floating-point and integral pointers</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INCOMPATIBLE_CAST_none</key>
        <name>Integer handling issues : Incompatible pointer cast</name>
        <internalKey>STATIC_C_INCOMPATIBLE_CAST_none</internalKey>
        <description>Cast between incompatible pointer types</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_INCOMPATIBLE_CAST_overrun</key>
        <name>Memory - illegal accesses : Out-of-bounds access</name>
        <internalKey>STATIC_C_INCOMPATIBLE_CAST_overrun</internalKey>
        <description>Out-of-bounds access to a scalar</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-6-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-6-1_none</internalKey>
        <description>The right hand operand of the integer division or remainder operators shall not be equal to zero.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-4-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-4-1_none</internalKey>
        <description>Functions shall not be defined using the ellipsis notation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 2.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Language Extensions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 2.1_none</internalKey>
        <description>Assembly language shall be encapsulated and isolated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-4-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-4-2_none</internalKey>
        <description>The identifiers used for the parameters in a redeclaration of a function shall be identical to those in the declaration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.1_none</internalKey>
        <description>All switch statements shall be well-formed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP35-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP35-C_none</internalKey>
        <description>Do not modify objects with temporary lifetime.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-4-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-4-3_none</internalKey>
        <description>All exit paths from a function with non-void return type shall have an explicit return statement with an expression.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 2.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Language Extensions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 2.4_none</internalKey>
        <description>Sections of code should not be &quot;commented out&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.8_none</internalKey>
        <description>Identifiers that define objects or functions with external linkage shall be unique.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.9_none</internalKey>
        <description>Identifiers that define objects or functions with internal linkage should be unique.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 2.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Language Extensions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 2.2_none</internalKey>
        <description>Source code shall only use /* ... */ style comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 2.3_none</key>
        <name>Coding standard violation : MISRA C-2004 Language Extensions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 2.3_none</internalKey>
        <description>The character sequence /* shall not be used within a comment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.4_none</internalKey>
        <description>Macro identifiers shall be distinct.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.5_none</internalKey>
        <description>Identifiers shall be distinct from macro names.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP59-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP59-CPP_none</internalKey>
        <description>Use offsetof() on valid types and members.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.6_none</internalKey>
        <description>A typedef name shall be a unique identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.7_none</internalKey>
        <description>A tag name shall be a unique identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A27-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Input/Output Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A27-0-3_none</internalKey>
        <description>Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 8-4-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Declarators</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 8-4-4_none</internalKey>
        <description>A function identifier shall either be used to call the function or it shall be preceded by &amp;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A27-0-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Input/Output Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A27-0-4_none</internalKey>
        <description>C-style strings shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.1_none</internalKey>
        <description>External identifiers shall be distinct.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.2_none</internalKey>
        <description>Identifiers declared in the same scope and name space shall be distinct.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-1_none</internalKey>
        <description>Functions malloc, calloc, realloc and free shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A27-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Input/Output Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A27-0-2_none</internalKey>
        <description>A C-style string shall guarantee sufficient space for data and the null terminator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 5.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Identifiers</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 5.3_none</internalKey>
        <description>An identifier declared in an inner scope shall not hide an identifier declared in an outer scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-2_none</internalKey>
        <description>Non-placement new or delete expressions shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-4-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-4-1_none</internalKey>
        <description>A switch statement shall have at least two case-clauses, distinct from the default label.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-3_none</internalKey>
        <description>The form of the delete expression shall match the form of the new expression used to allocate the memory.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-4_none</internalKey>
        <description>If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-5_none</internalKey>
        <description>Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-8_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-8_none</internalKey>
        <description>Objects that do not outlive a function shall have automatic storage duration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-5-9_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-5-9_none</internalKey>
        <description>Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-9-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-9-3_none</internalKey>
        <description>The underlying bit representations of floating-point values shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.7_none</internalKey>
        <description>A switch-expression shall not have an essentially Boolean type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON51-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON51-CPP_none</internalKey>
        <description>Ensure actively held locks are released on exceptional conditions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.6_none</internalKey>
        <description>Every switch statement shall have at least two switch-clauses.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 accsig_none</key>
        <name>Coding standard violation : ISO TS17961 2013 accsig</name>
        <internalKey>STATIC_C_ISO TS17961 2013 accsig_none</internalKey>
        <description>Accessing shared objects in signal handlers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.3_none</internalKey>
        <description>An unconditional break statement shall terminate every switch-clause.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.2_none</internalKey>
        <description>A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-9-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-9-1_none</internalKey>
        <description>The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.5_none</internalKey>
        <description>A default label shall appear as either the first or the last switch label of a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.BAD_PRINTF_FORMAT_STRING_none</key>
        <name>API usage errors : Printf format string issue</name>
        <internalKey>STATIC_C_PW.BAD_PRINTF_FORMAT_STRING_none</internalKey>
        <description>A printf format string contains an unrecognized format specifier</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 16.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Switch Statements</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 16.4_none</internalKey>
        <description>Every switch statement shall have a default label.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.6_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.6_none</internalKey>
        <description>The Standard Library input/output functions shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.7_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.7_none</internalKey>
        <description>The Standard Library functions atof, atoi, atol and atoll of &lt;stdlib.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL30-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL30-C_none</internalKey>
        <description>Declare objects with appropriate storage durations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_HFA_none</key>
        <name>Build system issues : Unnecessary header file</name>
        <internalKey>STATIC_C_HFA_none</internalKey>
        <description>A header file was included but none of its contents were used in the rest of the source file</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.4_none</internalKey>
        <description>The standard header file &lt;setjmp.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.5_none</internalKey>
        <description>The standard header file &lt;signal.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.2_none</internalKey>
        <description>A reserved identifier or reserved macro name shall not be declared.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.3_none</internalKey>
        <description>The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-12_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-12_none</internalKey>
        <description>There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.1_none</internalKey>
        <description>#define and #undef shall not be used on a reserved identifier or reserved macro name.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_SW.*</key>
        <name>Coverity SW : Semantic Warnings</name>
        <internalKey>STATIC_C_SW.*</internalKey>
        <description>Coverity SW : Semantic Warnings</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>semantic-warning</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-11_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-11_none</internalKey>
        <description>There shall be no unused parameters (named or unnamed) in non-virtual functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON36-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON36-C_none</internalKey>
        <description>Wrap functions that can spuriously wake up in a loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 0-1-10_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Independent Issues</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 0-1-10_none</internalKey>
        <description>Every defined function shall be called at least once.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 libptr_none</key>
        <name>Coding standard violation : ISO TS17961 2013 libptr</name>
        <internalKey>STATIC_C_ISO TS17961 2013 libptr_none</internalKey>
        <description>Forming invalid pointers by library function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M2-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M2-7-1_none</internalKey>
        <description>The character sequence /* shall not be used within a C-style comment.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 padcomp_none</key>
        <name>Coding standard violation : ISO TS17961 2013 padcomp</name>
        <internalKey>STATIC_C_ISO TS17961 2013 padcomp_none</internalKey>
        <description>Comparison of padding data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M15-0-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M15-0-3_none</internalKey>
        <description>Control shall not be transferred into a try or catch block using a goto or a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP53-CPP_none</internalKey>
        <description>Write constructor member initializers in the canonical order.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_DC.WEAK_CRYPTO_none</key>
        <name>Security best practices violations : Calling risky function</name>
        <internalKey>STATIC_C_DC.WEAK_CRYPTO_none</internalKey>
        <description>The called function is unsafe for security related code</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_allocation</key>
        <name>Insecure data handling : Untrusted allocation size</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_allocation</internalKey>
        <description>An unscrutinized value from an untrusted source is used as allocation size</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_array_index_read</key>
        <name>Insecure data handling : Untrusted array index read</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_array_index_read</internalKey>
        <description>Read from array at index computed using an unscrutinized value from an untrusted source</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_array_index_write</key>
        <name>Insecure data handling : Untrusted array index write</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_array_index_write</internalKey>
        <description>Write to array at index computed using an unscrutinized value from an untrusted source</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_critical_argument</key>
        <name>Insecure data handling : Untrusted value as argument</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_critical_argument</internalKey>
        <description>An unscrutinized value from an untrusted source used as argument to a function (for example, a buffer size)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_divisor</key>
        <name>Insecure data handling : Untrusted divisor</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_divisor</internalKey>
        <description>An unscrutinized value from an untrusted source used as a divisor</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_loop_bound</key>
        <name>Insecure data handling : Untrusted loop bound</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_loop_bound</internalKey>
        <description>An unscrutinized value from an untrusted source used as a loop bound</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_none</key>
        <name>Insecure data handling : Use of untrusted scalar value</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_none</internalKey>
        <description>An unscrutinized value from an untrusted source used in a trusted context</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_pointer_deref_read</key>
        <name>Insecure data handling : Untrusted pointer read</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_pointer_deref_read</internalKey>
        <description>Reads target of a pointer computed using an unscrutinized value from an untrusted source</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_TAINTED_SCALAR_pointer_deref_write</key>
        <name>Insecure data handling : Untrusted pointer write</name>
        <internalKey>STATIC_C_TAINTED_SCALAR_pointer_deref_write</internalKey>
        <description>Write to target of pointer computed using an unscrutinized value from an untrusted source</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-6_none</internalKey>
        <description>Universal character names shall be used only inside character or string literals.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-5_none</internalKey>
        <description>Hexadecimal constants should be upper case.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-4_none</internalKey>
        <description>String literals shall not be assigned to non-constant pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PARSE_ERROR_none</key>
        <name>Parse warnings : Unrecoverable parse warning</name>
        <internalKey>STATIC_C_PARSE_ERROR_none</internalKey>
        <description>A parse error caused an entire compilation unit to be skipped by Coverity Static Analysis</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO44-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO44-C_none</internalKey>
        <description>Only use values for fsetpos() that are returned from fgetpos().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.8_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.8_none</internalKey>
        <description>The Standard Library functions abort, exit and system of &lt;stdlib.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 21.9_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard Libraries</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 21.9_none</internalKey>
        <description>The Standard Library functions bsearch and qsort of &lt;stdlib.h&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-0-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-0-2_none</internalKey>
        <description>The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-0-1_none</internalKey>
        <description>The C library shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL41-C_none</key>
        <name>Coding standard violation : CERT-C Declarations and Initialization</name>
        <internalKey>STATIC_C_CERT DCL41-C_none</internalKey>
        <description>Do not declare variables inside a switch statement before the first case label.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-0-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-0-4_none</internalKey>
        <description>The time handling functions of library &lt;ctime&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-0-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-0-3_none</internalKey>
        <description>The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M27-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Input/Output Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M27-0-1_none</internalKey>
        <description>The stream input/output library &lt;cstdio&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_STREAM_FORMAT_STATE_none</key>
        <name>API usage errors : Not restoring ostream format</name>
        <internalKey>STATIC_C_STREAM_FORMAT_STATE_none</internalKey>
        <description>Not restoring the stream format state of an ostream</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_STREAM_FORMAT_STATE_suspicious_setf_mask</key>
        <name>API usage errors : Unknown mask in setf</name>
        <internalKey>STATIC_C_STREAM_FORMAT_STATE_suspicious_setf_mask</internalKey>
        <description>setf (or a similar) was called, but the argument was not recognized as being composed of valid format state bits</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A23-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Containers Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A23-0-1_none</internalKey>
        <description>An iterator shall not be implicitly converted to const_iterator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-2-1_CLASS_DEFINITION</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-2-1_CLASS_DEFINITION</internalKey>
        <description>Non-virtual public or protected member functions shall not be redefined in derived classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-2-1_GLOBALVAR_TEMPLATE_INIT</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-2-1_GLOBALVAR_TEMPLATE_INIT</internalKey>
        <description>Non-virtual public or protected member functions shall not be redefined in derived classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-2-1_LOCALVAR_TEMPLATE_INIT</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-2-1_LOCALVAR_TEMPLATE_INIT</internalKey>
        <description>Non-virtual public or protected member functions shall not be redefined in derived classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A10-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Derived Classes</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A10-2-1_none</internalKey>
        <description>Non-virtual public or protected member functions shall not be redefined in derived classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A23-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Containers Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A23-0-2_none</internalKey>
        <description>Elements of a container shall only be accessed via valid references, iterators, and pointers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 18.2_none</key>
        <name>Coding standard violation : MISRA C-2004 Structures and Unions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 18.2_none</internalKey>
        <description>An object shall not be assigned to an overlapping object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 18.1_none</key>
        <name>Coding standard violation : MISRA C-2004 Structures and Unions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 18.1_none</internalKey>
        <description>All structure and union types shall be complete at the end of a translation unit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2004 Rule 18.4_none</key>
        <name>Coding standard violation : MISRA C-2004 Structures and Unions</name>
        <internalKey>STATIC_C_MISRA C-2004 Rule 18.4_none</internalKey>
        <description>Unions shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PW.INTEGER_TOO_LARGE_none</key>
        <name>Integer handling issues : Integer overflow warning</name>
        <internalKey>STATIC_C_PW.INTEGER_TOO_LARGE_none</internalKey>
        <description>An integer overflow occurs at compile time when parsing this expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.10_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.10_none</internalKey>
        <description>Precautions shall be taken in order to prevent the contents of a header file being included more than once.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.14_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.14_none</internalKey>
        <description>The validity of values received from external sources shall be checked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A11-0-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Member Access Control</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A11-0-2_none</internalKey>
        <description>A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.13_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.13_none</internalKey>
        <description>Functions which are designed to provide operations on a resource should be called in an appropriate sequence.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.12_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.12_none</internalKey>
        <description>Dynamic memory allocation shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Directive 4.11_none</key>
        <name>Coding standard violation : MISRA C-2012 Code Design</name>
        <internalKey>STATIC_C_MISRA C-2012 Directive 4.11_none</internalKey>
        <description>The validity of values passed to library functions shall be checked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A11-0-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Member Access Control</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A11-0-1_none</internalKey>
        <description>A non-POD type should be defined as class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR61-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR61-CPP_none</internalKey>
        <description>Catch exceptions by lvalue reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-0-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-0-3_none</internalKey>
        <description>Control shall not be transferred into a try or catch block using a goto or a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 15-0-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Exception Handling</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 15-0-2_none</internalKey>
        <description>An exception object should not have pointer type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A3-8-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A3-8-1_none</internalKey>
        <description>An object shall not be accessed outside of its lifetime.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON54-CPP_none</internalKey>
        <description>Wrap functions that can spuriously wake up in a loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT INT35-C_none</key>
        <name>Coding standard violation : CERT-C Integers</name>
        <internalKey>STATIC_C_CERT INT35-C_none</internalKey>
        <description>Use correct integer precisions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM31-C_none</key>
        <name>Coding standard violation : CERT-C Memory Management</name>
        <internalKey>STATIC_C_CERT MEM31-C_none</internalKey>
        <description>Free dynamically allocated memory when no longer needed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV33-C_SYSTEM_WITH_NONNULL_POINTER</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV33-C_SYSTEM_WITH_NONNULL_POINTER</internalKey>
        <description>Do not call system().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV33-C_SYSTEM_WITH_NULL_POINTER</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV33-C_SYSTEM_WITH_NULL_POINTER</internalKey>
        <description>Do not call system().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV33-C_none</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV33-C_none</internalKey>
        <description>Do not call system().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 18-0-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Language Support Library</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 18-0-5_none</internalKey>
        <description>The unbounded functions of library &lt;cstring&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP56-CPP_none</internalKey>
        <description>Do not call a function with a mismatched language linkage.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-11-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-11-1_none</internalKey>
        <description>Volatile keyword shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.5_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.5_none</internalKey>
        <description>The value of an expression should not be cast to an inappropriate essential type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP37-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP37-C_none</internalKey>
        <description>Call functions with the correct number and type of arguments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.4_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.4_none</internalKey>
        <description>Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.7_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.7_none</internalKey>
        <description>If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR55-CPP_none</internalKey>
        <description>Do not use an additive operator on an iterator if the result would overflow.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.6_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.6_none</internalKey>
        <description>The value of a composite expression shall not be assigned to an object with wider essential type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.1_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.1_none</internalKey>
        <description>Operands shall not be of an inappropriate essential type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.3_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.3_none</internalKey>
        <description>The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.2_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.2_none</internalKey>
        <description>Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-2-2_none</internalKey>
        <description>Expression statements shall not be explicit calls to constructors of temporary objects only.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M3-3-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Basic Concepts</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M3-3-2_none</internalKey>
        <description>If a function has internal linkage then all re-declarations shall include the static storage class specifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT STR37-C_none</key>
        <name>Coding standard violation : CERT-C Characters and Strings</name>
        <internalKey>STATIC_C_CERT STR37-C_none</internalKey>
        <description>Arguments to character-handling functions must be representable as an unsigned char.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A6-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Statements</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A6-2-1_none</internalKey>
        <description>Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_PRINTF_ARGS_extra_printf_arg</key>
        <name>API usage errors : Extra argument to printf format specifier</name>
        <internalKey>STATIC_C_PRINTF_ARGS_extra_printf_arg</internalKey>
        <description>An extraneous argument was passed to a printf function.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_PRINTF_ARGS_invalid_printf_format_string</key>
        <name>API usage errors : Invalid printf format string</name>
        <internalKey>STATIC_C_PRINTF_ARGS_invalid_printf_format_string</internalKey>
        <description>The format string passed to printf contains errors.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_PRINTF_ARGS_invalid_type_printf_arg</key>
        <name>API usage errors : Invalid type in argument to printf format specifier</name>
        <internalKey>STATIC_C_PRINTF_ARGS_invalid_type_printf_arg</internalKey>
        <description>An argument with the wrong type was passed to a print format specifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_PRINTF_ARGS_missing_printf_arg</key>
        <name>API usage errors : Missing argument to printf format specifier</name>
        <internalKey>STATIC_C_PRINTF_ARGS_missing_printf_arg</internalKey>
        <description>A printf format string requires an argument that was not provided.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_PRINTF_ARGS_none</key>
        <name>API usage errors : Missing argument to printf format specifier</name>
        <internalKey>STATIC_C_PRINTF_ARGS_none</internalKey>
        <description>A printf format string requires an argument that was not provided.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 10.8_none</key>
        <name>Coding standard violation : MISRA C-2012 The Essential Type Model</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 10.8_none</internalKey>
        <description>The value of a composite expression shall not be cast to a different essential type category or a wider essential type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_STRING_SIZE_none</key>
        <name>Memory - corruptions : Unbounded source buffer</name>
        <internalKey>STATIC_C_STRING_SIZE_none</internalKey>
        <description>A source buffer of arbitrarily large size is used where a fixed-size destination buffer is expected</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DC.PREDICTABLE_KEY_PASSWORD_none</key>
        <name>Security best practices violations : Calling risky function</name>
        <internalKey>STATIC_C_DC.PREDICTABLE_KEY_PASSWORD_none</internalKey>
        <description>The called function is unsafe for security related code</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DIVIDE_BY_ZERO_float_divisor</key>
        <name>Incorrect expression : Division or modulo by float zero</name>
        <internalKey>STATIC_C_DIVIDE_BY_ZERO_float_divisor</internalKey>
        <description>An expression which may be zero is used as a divisor in floating-point arithmetic.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_DIVIDE_BY_ZERO_none</key>
        <name>Integer handling issues : Division or modulo by zero</name>
        <internalKey>STATIC_C_DIVIDE_BY_ZERO_none</internalKey>
        <description>Division or modulo by zero results in undefined behavior.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-4_none</internalKey>
        <description>A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-5_none</internalKey>
        <description>std::make_unique shall be used to construct objects owned by std::unique_ptr.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-6_SHARED_PTR</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-6_SHARED_PTR</internalKey>
        <description>std::make_shared shall be used to construct objects owned by std::shared_ptr.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-6_UNIQUE_PTR</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-6_UNIQUE_PTR</internalKey>
        <description>std::make_shared shall be used to construct objects owned by std::shared_ptr.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-6_none</internalKey>
        <description>std::make_shared shall be used to construct objects owned by std::shared_ptr.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-7_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-7_none</internalKey>
        <description>A std::weak_ptr shall be used to represent temporary shared ownership.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-1_none</internalKey>
        <description>An already-owned pointer value shall not be stored in an unrelated smart pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-2_SHARED_PTR</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-2_SHARED_PTR</internalKey>
        <description>A std::unique_ptr shall be used to represent exclusive ownership.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-2_UNIQUE_PTR</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-2_UNIQUE_PTR</internalKey>
        <description>A std::unique_ptr shall be used to represent exclusive ownership.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-2_none</internalKey>
        <description>A std::unique_ptr shall be used to represent exclusive ownership.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A20-8-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 General Utilities Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A20-8-3_none</internalKey>
        <description>A std::shared_ptr shall be used to represent shared ownership.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-3-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-3-1_none</internalKey>
        <description>Trigraphs shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT OOP52-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Object Oriented Programming</name>
        <internalKey>STATIC_C_CERT OOP52-CPP_none</internalKey>
        <description>Do not delete a polymorphic object without a virtual destructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A17-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Library Introduction</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A17-1-1_none</internalKey>
        <description>Use of the C Standard Library shall be encapsulated and isolated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT FIO42-C_none</key>
        <name>Coding standard violation : CERT-C Input/Output</name>
        <internalKey>STATIC_C_CERT FIO42-C_none</internalKey>
        <description>Close files when they are no longer needed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNSAFE_XML_PARSE_CONFIG_none</key>
        <name>Miscellaneous : unsafe_xml_parse_config</name>
        <internalKey>STATIC_C_UNSAFE_XML_PARSE_CONFIG_none</internalKey>
        <description>Unsafe XML parsing configuration</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_C_ASSERT_SIDE_EFFECT_none</key>
        <name>Incorrect expression : Side effect in assertion</name>
        <internalKey>STATIC_C_ASSERT_SIDE_EFFECT_none</internalKey>
        <description>Assertion contains an operation with a side effect</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ASSERT_SIDE_EFFECT_side_effect_is_function</key>
        <name>Incorrect expression : Function in assertion</name>
        <internalKey>STATIC_C_ASSERT_SIDE_EFFECT_side_effect_is_function</internalKey>
        <description>Assertion contains a function call which may have a side effect</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A14-7-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A14-7-2_none</internalKey>
        <description>Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A14-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Templates</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A14-7-1_none</internalKey>
        <description>A type used as a template argument shall provide all members that are used by the template.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_CTOR_none</key>
        <name>Uninitialized members : Uninitialized scalar field</name>
        <internalKey>STATIC_C_UNINIT_CTOR_none</internalKey>
        <description>A scalar field is not initialized by the constructor</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_UNINIT_CTOR_pointer</key>
        <name>Uninitialized members : Uninitialized pointer field</name>
        <internalKey>STATIC_C_UNINIT_CTOR_pointer</internalKey>
        <description>A pointer field is not initialized in the constructor</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 17-0-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Library Introduction</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 17-0-5_none</internalKey>
        <description>The setjmp macro and the longjmp function shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ERR62-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Exceptions and Error Handling</name>
        <internalKey>STATIC_C_CERT ERR62-CPP_none</internalKey>
        <description>Detect errors when converting a string to a number.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 17-0-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Library Introduction</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 17-0-3_none</internalKey>
        <description>The names of standard library functions shall not be overridden.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 17-0-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Library Introduction</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 17-0-2_none</internalKey>
        <description>The names of standard library macros and objects shall not be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 17-0-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Library Introduction</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 17-0-1_none</internalKey>
        <description>Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL57-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL57-CPP_none</internalKey>
        <description>Do not let exceptions escape from destructors or deallocation functions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 M18-7-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 M18-7-1_none</internalKey>
        <description>The signal handling facilities of &lt;csignal&gt; shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-5-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-5-2_none</internalKey>
        <description>Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-5-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-5-1_none</internalKey>
        <description>All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A15-5-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Exception Handling</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A15-5-3_none</internalKey>
        <description>The std::terminate() function shall not be called implicitly.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM55-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM55-CPP_none</internalKey>
        <description>Honor replacement dynamic storage management requirements.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-2-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-2-2_none</internalKey>
        <description>C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-2-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-2-1_none</internalKey>
        <description>The pre-processor shall only be used for file inclusion and include guards.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-2-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-2-4_none</internalKey>
        <description>The &apos;, &quot;, /* or // characters shall not occur in a header file name.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-2-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-2-3_none</internalKey>
        <description>Include guards shall be provided.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-2-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-2-6_none</internalKey>
        <description>The #include directive shall be followed by either a &lt;filename&gt; or &quot;filename&quot; sequence.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 16-2-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Preprocessor Directives</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 16-2-5_none</internalKey>
        <description>The \ character should not occur in a header file name.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT DCL58-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Declarations and Initialisation</name>
        <internalKey>STATIC_C_CERT DCL58-CPP_none</internalKey>
        <description>Do not modify the standard namespaces.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 usrfmt_none</key>
        <name>Coding standard violation : ISO TS17961 2013 usrfmt</name>
        <internalKey>STATIC_C_ISO TS17961 2013 usrfmt_none</internalKey>
        <description>Including tainted or out-of-domain input in a format string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP57-CPP_CAST_POINTER_INCOMPLETE_CLASS</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP57-CPP_CAST_POINTER_INCOMPLETE_CLASS</internalKey>
        <description>Do not cast or delete pointers to incomplete classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP57-CPP_DELETE_POINTER_INCOMPLETE_CLASS</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP57-CPP_DELETE_POINTER_INCOMPLETE_CLASS</internalKey>
        <description>Do not cast or delete pointers to incomplete classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP57-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Expressions</name>
        <internalKey>STATIC_C_CERT EXP57-CPP_none</internalKey>
        <description>Do not cast or delete pointers to incomplete classes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.10_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.10_none</internalKey>
        <description>An inline function shall be declared with the static storage class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.11_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.11_none</internalKey>
        <description>When an array with external linkage is declared, its size should be explicitly specified.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_dns</key>
        <name>Low impact security : Check against reverse DNS lookup</name>
        <internalKey>STATIC_C_WEAK_GUARD_dns</internalKey>
        <description>Comparing the result of a reverse DNS lookup to a hardcoded hostname.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_dns_sensitive_op</key>
        <name>High impact security : Check against reverse DNS lookup</name>
        <internalKey>STATIC_C_WEAK_GUARD_dns_sensitive_op</internalKey>
        <description>Using the results of a reverse DNS lookup to guard a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_http_referer</key>
        <name>Low impact security : Comparison of HTTP referer to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_http_referer</internalKey>
        <description>Comparing the HTTP &apos;referer&apos; header to a hardcoded value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_http_referer_sensitive_op</key>
        <name>High impact security : Comparison of HTTP referer to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_http_referer_sensitive_op</internalKey>
        <description>Using the HTTP &apos;referer&apos; header value as a security control for a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_ip_address</key>
        <name>Low impact security : Comparison of IP address to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_ip_address</internalKey>
        <description>Comparing a remote connection&apos;s IP address against a hardcoded value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_ip_address_sensitive_op</key>
        <name>High impact security : Comparison of IP address to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_ip_address_sensitive_op</internalKey>
        <description>Using an IP address as a security control for a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_none</key>
        <name>Low impact security : Check against unreliable data</name>
        <internalKey>STATIC_C_WEAK_GUARD_none</internalKey>
        <description>Performing a check against unreliable data that an attacker can control</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_os_login</key>
        <name>Low impact security : Comparison of OS login to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_os_login</internalKey>
        <description>Comparing a user&apos;s operating system login name to a constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_os_login_sensitive_op</key>
        <name>High impact security : Comparison of OS login to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_os_login_sensitive_op</internalKey>
        <description>Comparing a user&apos;s operating system login name to a constant to guard a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_principal_name</key>
        <name>Low impact security : Comparison of principal name to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_principal_name</internalKey>
        <description>Comparing the name of a principal to a constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_WEAK_GUARD_principal_name_sensitive_op</key>
        <name>High impact security : Comparison of principal name to a constant</name>
        <internalKey>STATIC_C_WEAK_GUARD_principal_name_sensitive_op</internalKey>
        <description>Comparing the name of a principal to a constant to guard a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-security</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.12_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.12_none</internalKey>
        <description>Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.13_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.13_none</internalKey>
        <description>A pointer should point to a const-qualified type whenever possible.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-15_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-15_none</internalKey>
        <description>Array indexing shall be the only form of pointer arithmetic.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM56-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Memory Management</name>
        <internalKey>STATIC_C_CERT MEM56-CPP_none</internalKey>
        <description>Do not store an already-owned pointer value in an unrelated smart pointer.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_FLOATING_POINT_EQUALITY_none</key>
        <name>Bad comparison of floating-point expressions : Bad comparison of floating-point expressions</name>
        <internalKey>STATIC_C_FLOATING_POINT_EQUALITY_none</internalKey>
        <description>Floating-point expressions shall not be directly or indirectly tested for equality or inequality.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_IDENTICAL_BRANCHES_case</key>
        <name>Incorrect expression : Identical code for different cases</name>
        <internalKey>STATIC_C_IDENTICAL_BRANCHES_case</internalKey>
        <description>The same code is executed for two cases in the same switch statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_IDENTICAL_BRANCHES_chain</key>
        <name>Incorrect expression : Identical code for different branches of an else-if chain</name>
        <internalKey>STATIC_C_IDENTICAL_BRANCHES_chain</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_IDENTICAL_BRANCHES_if</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>STATIC_C_IDENTICAL_BRANCHES_if</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_IDENTICAL_BRANCHES_ternary</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>STATIC_C_IDENTICAL_BRANCHES_ternary</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_IDENTICAL_BRANCHES_none</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>STATIC_C_IDENTICAL_BRANCHES_none</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-14_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-14_none</internalKey>
        <description>The first operand of a conditional-operator shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-13_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-13_none</internalKey>
        <description>The condition of an if-statement and the condition of an iteration-statement shall have type bool.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-12_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-12_none</internalKey>
        <description>signed char and unsigned char type shall only be used for the storage and use of numeric values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-11_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-11_none</internalKey>
        <description>The plain char type shall only be used for the storage and use of character values.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-10_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-10_none</internalKey>
        <description>If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 restrict_none</key>
        <name>Coding standard violation : ISO TS17961 2013 Passing pointers into the same object as arguments to different restrict-qualified parameters.</name>
        <internalKey>STATIC_C_ISO TS17961 2013 restrict_none</internalKey>
        <description>restrict</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ISO TS17961 2013 taintsink_none</key>
        <name>Coding standard violation : ISO TS17961 2013 taintsink</name>
        <internalKey>STATIC_C_ISO TS17961 2013 taintsink_none</internalKey>
        <description>Tainted, potentially mutilated, or out-of-domain integer values are used in a restricted sink.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-6-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-6-3_none</internalKey>
        <description>Bit-fields shall not have enum type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-6-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-6-4_none</internalKey>
        <description>Named bit-fields with signed integer type shall have a length of more than one bit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT MEM33-C_none</key>
        <name>Coding standard violation : CERT-C Memory Management</name>
        <internalKey>STATIC_C_CERT MEM33-C_none</internalKey>
        <description>Allocate and copy structures containing a flexible array member dynamically.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT ENV31-C_none</key>
        <name>Coding standard violation : CERT-C Environment</name>
        <internalKey>STATIC_C_CERT ENV31-C_none</internalKey>
        <description>Do not rely on an environment pointer following an operation that may invalidate it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 9-6-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Classes</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 9-6-2_none</internalKey>
        <description>Bit-fields shall be either bool type or an explicitly unsigned or signed integral type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-19_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-19_none</internalKey>
        <description>The declaration of objects shall contain no more than two levels of pointer indirection.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-18_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-18_none</internalKey>
        <description>The relational operators &gt;, &gt;=, &lt; and &lt;= shall not be applied to objects of pointer type, except where they point to the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-17_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-17_none</internalKey>
        <description>Subtraction between pointers shall only be applied to pointers that address elements of the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-16_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-16_none</internalKey>
        <description>A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_ASSIGN_NOT_RETURNING_STAR_THIS_indirect</key>
        <name>Strict rule violations : Assign does not return *this</name>
        <internalKey>STATIC_C_ASSIGN_NOT_RETURNING_STAR_THIS_indirect</internalKey>
        <description>A user-written assignment operator does not return a reference to *this</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ASSIGN_NOT_RETURNING_STAR_THIS_none</key>
        <name>Rule violations : Assign does not return *this</name>
        <internalKey>STATIC_C_ASSIGN_NOT_RETURNING_STAR_THIS_none</internalKey>
        <description>A user-written assignment operator does not return a reference to *this</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_ASSIGN_NOT_RETURNING_STAR_THIS_usable_for_chained_assignment</key>
        <name>Strict rule violations : Assign does not return *this</name>
        <internalKey>STATIC_C_ASSIGN_NOT_RETURNING_STAR_THIS_usable_for_chained_assignment</internalKey>
        <description>A user-written assignment operator does not return a reference to *this</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-2-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-2-6_none</internalKey>
        <description>The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-1-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-1-1_none</internalKey>
        <description>It shall be possible to include any header file in multiple translation units without violating the One Definition Rule.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 12.3_none</key>
        <name>Coding standard violation : MISRA C-2012 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 12.3_none</internalKey>
        <description>The comma operator should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-2-5_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-2-5_none</internalKey>
        <description>An array or container shall not be accessed beyond its range.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 12.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 12.2_none</internalKey>
        <description>The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-2-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-2-4_none</internalKey>
        <description>Reinterpret_cast shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-1-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-1-3_none</internalKey>
        <description>When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 12.5_none</key>
        <name>Coding standard violation : MISRA C-2012 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 12.5_none</internalKey>
        <description>The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-2-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-2-3_none</internalKey>
        <description>A cast shall not remove any const or volatile qualification from the type of a pointer or reference.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 3-1-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Basic Concepts</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 3-1-2_none</internalKey>
        <description>Functions shall not be declared at block scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 12.4_none</key>
        <name>Coding standard violation : MISRA C-2012 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 12.4_none</internalKey>
        <description>Evaluation of constant expressions should not lead to unsigned integer wrap-around.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-3_DEDUCED_WCHAT_TYPE</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-3_DEDUCED_WCHAT_TYPE</internalKey>
        <description>Type wchar_t shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-3_WCHAR_TYPE</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-3_WCHAR_TYPE</internalKey>
        <description>Type wchar_t shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-3_none</internalKey>
        <description>Type wchar_t shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-2-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-2-2_none</internalKey>
        <description>Traditional C-style casts shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_BAD_OVERRIDE_none</key>
        <name>Class hierarchy inconsistencies : Failed to override method</name>
        <internalKey>STATIC_C_BAD_OVERRIDE_none</internalKey>
        <description>Virtual function does not override parent method because of type signature mismatch, usually due to const</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
        <tag>objective-c</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-2_none</internalKey>
        <description>String literals with different encoding prefixes shall not be concatenated.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A5-2-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Expressions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A5-2-1_none</internalKey>
        <description>Dynamic_cast should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A2-13-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Lexical Conventions</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A2-13-1_none</internalKey>
        <description>Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 12.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Expressions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 12.1_none</internalKey>
        <description>The precedence of operators within expressions should be made explicit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON53-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Concurrency</name>
        <internalKey>STATIC_C_CERT CON53-CPP_none</internalKey>
        <description>Avoid deadlock by locking in a predefined order.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP39-C_ACCESS_REALLOC_INCOMPATIBLE_TYPE</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP39-C_ACCESS_REALLOC_INCOMPATIBLE_TYPE</internalKey>
        <description>Do not access a variable through a pointer of an incompatible type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP39-C_CAST_TO_INCOMPATIBLE_TYPE</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP39-C_CAST_TO_INCOMPATIBLE_TYPE</internalKey>
        <description>Do not access a variable through a pointer of an incompatible type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT EXP39-C_none</key>
        <name>Coding standard violation : CERT-C Expression</name>
        <internalKey>STATIC_C_CERT EXP39-C_none</internalKey>
        <description>Do not access a variable through a pointer of an incompatible type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-10-6_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-10-6_none</internalKey>
        <description>If an identifier refers to a type, it shall not also refer to an object or a function in the same scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-10-5_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-10-5_none</internalKey>
        <description>The identifier name of a non-member object or function with static storage duration should not be reused.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-1-1_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-1-1_none</internalKey>
        <description>C-style arrays shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-1-2_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-1-2_none</internalKey>
        <description>The std::vector&amp;lt;bool&amp;gt; specialization shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-1-3_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-1-3_none</internalKey>
        <description>The std::auto_ptr type shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-1-4_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-1-4_none</internalKey>
        <description>A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_AUTOSAR C++14 A18-1-6_none</key>
        <name>Coding standard violation : AUTOSAR C++14 Language Support Library</name>
        <internalKey>STATIC_C_AUTOSAR C++14 A18-1-6_none</internalKey>
        <description>All std::hash specializations for user-defined types shall have a noexcept function call operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CTR54-CPP_none</key>
        <name>Coding standard violation : CERT-CPP Containers</name>
        <internalKey>STATIC_C_CERT CTR54-CPP_none</internalKey>
        <description>Do not subtract iterators that do not refer to the same container.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 8.14_none</key>
        <name>Coding standard violation : MISRA C-2012 Declarations and Definitions</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 8.14_none</internalKey>
        <description>The restrict type qualifier shall not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 1.1_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard C Environment</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 1.1_none</internalKey>
        <description>The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation&apos;s translation limits.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C-2012 Rule 1.2_none</key>
        <name>Coding standard violation : MISRA C-2012 Standard C Environment</name>
        <internalKey>STATIC_C_MISRA C-2012 Rule 1.2_none</internalKey>
        <description>Language extensions should not be used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-10-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-10-2_none</internalKey>
        <description>Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-10-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-10-1_none</internalKey>
        <description>Different identifiers shall be typographically unambiguous.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-21_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-21_none</internalKey>
        <description>Bitwise operators shall only be applied to operands of unsigned underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-8-2_none</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-8-2_none</internalKey>
        <description>The copy assignment operator shall be declared protected or private in an abstract class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-10-4_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-10-4_none</internalKey>
        <description>A class, union or enum name (including qualification, if any) shall be a unique identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 5-0-20_none</key>
        <name>Coding standard violation : MISRA C++-2008 Expressions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 5-0-20_none</internalKey>
        <description>Non-constant operands to a binary bitwise operator shall have the same underlying type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_CERT CON38-C_none</key>
        <name>Coding standard violation : CERT-C Concurrency</name>
        <internalKey>STATIC_C_CERT CON38-C_none</internalKey>
        <description>Preserve thread safety and liveness when using condition variables.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 12-8-1_none</key>
        <name>Coding standard violation : MISRA C++-2008 Special Member Functions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 12-8-1_none</internalKey>
        <description>A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_C_MISRA C++-2008 Rule 2-10-3_none</key>
        <name>Coding standard violation : MISRA C++-2008 Lexical Conventions</name>
        <internalKey>STATIC_C_MISRA C++-2008 Rule 2-10-3_none</internalKey>
        <description>A typedef name (including qualification, if any) shall be a unique identifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>c++</tag>
        <tag>c</tag>
        <tag>coverity-quality</tag>
    </rule>
</rules>
