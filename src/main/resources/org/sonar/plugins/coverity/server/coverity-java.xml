<rules>
    <rule>
        <key>STATIC_JAVA_MOBILE_ID_MISUSE_none</key>
        <name>Medium impact security : Misuse of a mobile device identifier</name>
        <internalKey>STATIC_JAVA_MOBILE_ID_MISUSE_none</internalKey>
        <description>A mobile device identifier is used in an authentication scheme.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.STRUTS2_DYNAMIC_METHOD_INVOCATION_none</key>
        <name>Low impact security : Struts2 DynamicMethodInvocation allowed</name>
        <internalKey>STATIC_JAVA_CONFIG.STRUTS2_DYNAMIC_METHOD_INVOCATION_none</internalKey>
        <description>Struts2 DynamicMethodInvocation allowed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.ANDROID_OUTDATED_TARGETSDKVERSION_android</key>
        <name>Low impact security : Android application does not target the latest Android version</name>
        <internalKey>STATIC_JAVA_CONFIG.ANDROID_OUTDATED_TARGETSDKVERSION_android</internalKey>
        <description>The application is not configured to target the latest Android operating system version, as is best practice.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.ANDROID_OUTDATED_TARGETSDKVERSION_none</key>
        <name>Low impact security : Android application does not target the latest Android version</name>
        <internalKey>STATIC_JAVA_CONFIG.ANDROID_OUTDATED_TARGETSDKVERSION_none</internalKey>
        <description>The application is not configured to target the latest Android operating system version, as is best practice.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ANDROID_CAPABILITY_LEAK_none</key>
        <name>Medium impact security : Capability exposed without permission check</name>
        <internalKey>STATIC_JAVA_ANDROID_CAPABILITY_LEAK_none</internalKey>
        <description>A capability is exposed without checking whether the caller has permission for it.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_VERY_CONFUSING_none</key>
        <name>SpotBugs: Correctness : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_VERY_CONFUSING_none</internalKey>
        <description>The referenced methods have names that differ only by capitalization.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK_none</key>
        <name>SpotBugs: Correctness : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK_none</internalKey>
        <description>A value that is annotated as possibility not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS_none</key>
        <name>SpotBugs: Bad practice : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS_none</internalKey>
        <description>The entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_IMMEDIATE_DEREFERENCE_OF_READLINE_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_IMMEDIATE_DEREFERENCE_OF_READLINE_none</internalKey>
        <description>The result of invoking readLine() is immediately dereferenced.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_HARDCODED_ABSOLUTE_FILENAME_none</key>
        <name>SpotBugs: Dodgy code : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_HARDCODED_ABSOLUTE_FILENAME_none</internalKey>
        <description>This code constructs a File object using a hard coded to an absolute pathname (e.g., new File(&quot;/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment&quot;);</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_PKGPROTECT_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_PKGPROTECT_none</internalKey>
        <description>A mutable static field could be changed by malicious code or by accident.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_SIGNED_CHECK_none</key>
        <name>SpotBugs: Bad practice : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_SIGNED_CHECK_none</internalKey>
        <description>This method compares an expression such as ((event.detail &amp;amp; SWT.SELECTED) &amp;gt; 0).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HIBERNATE_BAD_HASHCODE_bad_equals</key>
        <name>API usage errors : Unsafe dependence on database key</name>
        <internalKey>STATIC_JAVA_HIBERNATE_BAD_HASHCODE_bad_equals</internalKey>
        <description>The result of equals() depends on an entity&apos;s primary database key</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HIBERNATE_BAD_HASHCODE_bad_hashcode</key>
        <name>API usage errors : Unsafe dependence on database key</name>
        <internalKey>STATIC_JAVA_HIBERNATE_BAD_HASHCODE_bad_hashcode</internalKey>
        <description>The result of hashCode() depends on an entity&apos;s primary database key</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HIBERNATE_BAD_HASHCODE_none</key>
        <name>API usage errors : Unsafe dependence on database key</name>
        <internalKey>STATIC_JAVA_HIBERNATE_BAD_HASHCODE_none</internalKey>
        <description>The result of hashCode() depends on an entity&apos;s primary database key</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.XSS_REQUEST_PARAMETER_TO_SEND_ERROR_none</key>
        <name>SpotBugs: Security : XSS: Cross site scripting vulnerability</name>
        <internalKey>STATIC_JAVA_FB.XSS_REQUEST_PARAMETER_TO_SEND_ERROR_none</internalKey>
        <description>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_IMPOSSIBLE_DOWNCAST_none</key>
        <name>SpotBugs: Correctness : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_IMPOSSIBLE_DOWNCAST_none</internalKey>
        <description>This cast will always throw a ClassCastException.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD_none</key>
        <name>SpotBugs: Multithreaded correctness : ML: Synchronization on updated field (Mutable Lock)</name>
        <internalKey>STATIC_JAVA_FB.ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD_none</internalKey>
        <description>This method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_READ_RESOLVE_MUST_RETURN_OBJECT_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_READ_RESOLVE_MUST_RETURN_OBJECT_none</internalKey>
        <description>In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY_none</key>
        <name>SpotBugs: Correctness : USELESS_STRING: Useless/non-informative string generated</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY_none</internalKey>
        <description>One of the arguments being formatted with a format string is an array.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HRS_REQUEST_PARAMETER_TO_COOKIE_none</key>
        <name>SpotBugs: Security : HRS: HTTP Response splitting vulnerability</name>
        <internalKey>STATIC_JAVA_FB.HRS_REQUEST_PARAMETER_TO_COOKIE_none</internalKey>
        <description>This code constructs an HTTP Cookie using an untrusted HTTP parameter.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BAC_BAD_APPLET_CONSTRUCTOR_none</key>
        <name>SpotBugs: Correctness : BAC: Bad Applet Constructor</name>
        <internalKey>STATIC_JAVA_FB.BAC_BAD_APPLET_CONSTRUCTOR_none</internalKey>
        <description>This constructor calls methods in the parent Applet that rely on the AppletStub. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN_none</key>
        <name>SpotBugs: Dodgy code : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN_none</internalKey>
        <description>An argument not of type Boolean is being formatted with a %b format specifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_MISSING_SUPER_CALL_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_MISSING_SUPER_CALL_none</internalKey>
        <description>This finalize() method does not make a call to its superclass&apos;s finalize() method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_ANON_none</key>
        <name>SpotBugs: Performance : SIC: Inner class could be made static</name>
        <internalKey>STATIC_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_ANON_none</internalKey>
        <description>This class is an inner class, but does not use its embedded reference to the object which created it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_METHOD_CONSTRUCTOR_CONFUSION_none</key>
        <name>SpotBugs: Correctness : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_METHOD_CONSTRUCTOR_CONFUSION_none</internalKey>
        <description>This regular method has the same name as the class it is defined in.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS_none</internalKey>
        <description>A possibly-null value is passed at a call site where all known target methods require the parameter to be non-null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_BOXED_PRIMITIVE_FOR_COMPARE_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.DM_BOXED_PRIMITIVE_FOR_COMPARE_none</internalKey>
        <description>A boxed primitive is created just to call compareTo method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD_none</key>
        <name>SpotBugs: Dodgy code : ST: Misuse of static fields</name>
        <internalKey>STATIC_JAVA_FB.ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD_none</internalKey>
        <description>This instance method writes to a static field.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.INT_BAD_REM_BY_1_none</key>
        <name>SpotBugs: Dodgy code : INT: Suspicious integer expression</name>
        <internalKey>STATIC_JAVA_FB.INT_BAD_REM_BY_1_none</internalKey>
        <description>Any expression (exp % 1) is guaranteed to always return zero.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT_none</key>
        <name>SpotBugs: Correctness : QBA: Questionable Boolean Assignment</name>
        <internalKey>STATIC_JAVA_FB.QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT_none</internalKey>
        <description>This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RANGE_ARRAY_INDEX_none</key>
        <name>SpotBugs: Correctness : RANGE: Range checks</name>
        <internalKey>STATIC_JAVA_FB.RANGE_ARRAY_INDEX_none</internalKey>
        <description>Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_REVERSE_INULL_none</key>
        <name>Null pointer dereferences : Dereference before null check</name>
        <internalKey>STATIC_JAVA_REVERSE_INULL_none</internalKey>
        <description>All paths that lead to this null pointer comparison already dereference the pointer earlier</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_DOES_NOT_HANDLE_NULL_none</key>
        <name>SpotBugs: Bad practice : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_DOES_NOT_HANDLE_NULL_none</internalKey>
        <description>This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the parameter.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MWN_MISMATCHED_WAIT_none</key>
        <name>SpotBugs: Multithreaded correctness : MWN: Mismatched wait() or notify()</name>
        <internalKey>STATIC_JAVA_FB.MWN_MISMATCHED_WAIT_none</internalKey>
        <description>This method calls Object.wait() without obviously holding a lock on the object.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_01_TO_INT_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_01_TO_INT_none</internalKey>
        <description>A random value from 0 to 1 is being coerced to the integer value 0.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_OTHER_USE_OBJECT_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_OTHER_USE_OBJECT_none</internalKey>
        <description>This class defines an equals() method, that doesn&apos;t override the normal equals(Object) method defined in the base java.lang.Object class.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION_none</key>
        <name>SpotBugs: Bad practice : IC: Initialization circularity</name>
        <internalKey>STATIC_JAVA_FB.IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION_none</internalKey>
        <description>During the initialization of a class, the class makes an active use of a subclass.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_connection_string</key>
        <name>Medium impact security : Use of hard-coded connection string password</name>
        <internalKey>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_connection_string</internalKey>
        <description>A connection string password is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_crypto</key>
        <name>Medium impact security : Use of hard-coded cryptographic key</name>
        <internalKey>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_crypto</internalKey>
        <description>A cryptographic key is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_passwd</key>
        <name>Medium impact security : Use of hard-coded password</name>
        <internalKey>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_passwd</internalKey>
        <description>A password is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_token</key>
        <name>Medium impact security : Use of hard-coded security token</name>
        <internalKey>STATIC_JAVA_HARDCODED_CREDENTIALS_hardcoded_credential_token</internalKey>
        <description>A security token is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HARDCODED_CREDENTIALS_none</key>
        <name>Medium impact security : Use of hard-coded credentials</name>
        <internalKey>STATIC_JAVA_HARDCODED_CREDENTIALS_none</internalKey>
        <description>Credentials are stored directly in the source code</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HARDCODED_CREDENTIALS_uri</key>
        <name>Medium impact security : Use of hard-coded URI password</name>
        <internalKey>STATIC_JAVA_HARDCODED_CREDENTIALS_uri</internalKey>
        <description>A URI with a password component is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INVALIDATE_ITERATOR_map_put</key>
        <name>Performance inefficiencies : Using invalid iterator</name>
        <internalKey>STATIC_JAVA_INVALIDATE_ITERATOR_map_put</internalKey>
        <description>A map was modified with Map.put while it was being iterated on</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INVALIDATE_ITERATOR_none</key>
        <name>API usage errors : Using invalid iterator</name>
        <internalKey>STATIC_JAVA_INVALIDATE_ITERATOR_none</internalKey>
        <description>An iterator is being used after the source container of the iterator is modified</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INFINITE_LOOP_no_escape</key>
        <name>Program hangs : Infinite loop</name>
        <internalKey>STATIC_JAVA_INFINITE_LOOP_no_escape</internalKey>
        <description>Infinite loop with no exit condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INFINITE_LOOP_none</key>
        <name>Program hangs : Infinite loop</name>
        <internalKey>STATIC_JAVA_INFINITE_LOOP_none</internalKey>
        <description>Infinite loop with unsatisfiable exit condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_BAD_SHIFT_AMOUNT_none</key>
        <name>SpotBugs: Correctness : BSHIFT: Bad shift</name>
        <internalKey>STATIC_JAVA_FB.ICAST_BAD_SHIFT_AMOUNT_none</internalKey>
        <description>The code performs shift of a 32 bit int by a constant amount outside the range -31..31.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_BREAK_none</key>
        <name>Control flow issues : Missing break in switch</name>
        <internalKey>STATIC_JAVA_MISSING_BREAK_none</internalKey>
        <description>Missing break statement between cases in switch statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DP_DO_INSIDE_DO_PRIVILEGED_none</key>
        <name>SpotBugs: Malicious code vulnerability : DP: Use doPrivileged</name>
        <internalKey>STATIC_JAVA_FB.DP_DO_INSIDE_DO_PRIVILEGED_none</internalKey>
        <description>This code invokes a method that requires a security permission check.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IJU_NO_TESTS_none</key>
        <name>SpotBugs: Correctness : IJU: Improperly implemented JUnit TestCase</name>
        <internalKey>STATIC_JAVA_FB.IJU_NO_TESTS_none</internalKey>
        <description>Class is a JUnit TestCase but has not implemented any test methods.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FB_UNEXPECTED_WARNING_none</key>
        <name>SpotBugs: Correctness : FB: SpotBugs did not produce the expected warnings on a method</name>
        <internalKey>STATIC_JAVA_FB.FB_UNEXPECTED_WARNING_none</internalKey>
        <description>SpotBugs generated a warning that, according to a @NoWarning annotated, is unexpected or undesired.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT_none</key>
        <name>SpotBugs: Multithreaded correctness : JLM: Synchronization on java.util.concurrent objects</name>
        <internalKey>STATIC_JAVA_FB.JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT_none</internalKey>
        <description>This method calls wait(), notify() or notifyAll()() on an object that also provides an await(), signal(), signalAll() method (such as util.concurrent Condition objects).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_LOCAL_none</key>
        <name>SpotBugs: Dodgy code : CAA: Covariant array assignment</name>
        <internalKey>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_LOCAL_none</internalKey>
        <description>Array of covariant type is assigned to a local variable. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.AM_CREATES_EMPTY_ZIP_FILE_ENTRY_none</key>
        <name>SpotBugs: Bad practice : AM: API misuse</name>
        <internalKey>STATIC_JAVA_FB.AM_CREATES_EMPTY_ZIP_FILE_ENTRY_none</internalKey>
        <description>The code calls putNextEntry(), immediately followed by a call to closeEntry().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_BAD_MONTH_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_BAD_MONTH_none</internalKey>
        <description>This code passes a constant month value outside the expected range of 0..11 to a method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION_none</key>
        <name>SpotBugs: Multithreaded correctness : AT: Possible atomicity violation</name>
        <internalKey>STATIC_JAVA_FB.AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION_none</internalKey>
        <description>This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BX_BOXING_IMMEDIATELY_UNBOXED_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.BX_BOXING_IMMEDIATELY_UNBOXED_none</internalKey>
        <description>A primitive is boxed, and then immediately unboxed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_SELF_NO_OBJECT_none</key>
        <name>SpotBugs: Bad practice : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_SELF_NO_OBJECT_none</internalKey>
        <description>This class defines a covariant version of equals().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_ELEMENT_STORE_none</key>
        <name>SpotBugs: Correctness : CAA: Covariant array assignment</name>
        <internalKey>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_ELEMENT_STORE_none</internalKey>
        <description>Value is stored into the array and the value type doesn&apos;t match the array type. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_none</internalKey>
        <description>There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt; guarantees that a null value will be dereferenced, which would generate a NullPointerException when the code is executed.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION_none</key>
        <name>SpotBugs: Correctness : RE: Regular expressions</name>
        <internalKey>STATIC_JAVA_FB.RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION_none</internalKey>
        <description>The code here uses a regular expression that is invalid according to the syntax for regular expressions.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SS_SHOULD_BE_STATIC_none</key>
        <name>SpotBugs: Performance : SS: Unread field should be static</name>
        <internalKey>STATIC_JAVA_FB.SS_SHOULD_BE_STATIC_none</internalKey>
        <description>This class contains an instance final field that is initialized to a compile-time static value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EI_EXPOSE_REP2_none</key>
        <name>SpotBugs: Malicious code vulnerability : EI2: Storing reference to mutable object</name>
        <internalKey>STATIC_JAVA_FB.EI_EXPOSE_REP2_none</internalKey>
        <description>This code stores a reference to an externally mutable object into the internal representation of the object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_BAD_CAST_TO_ABSTRACT_COLLECTION_none</key>
        <name>SpotBugs: Dodgy code : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_BAD_CAST_TO_ABSTRACT_COLLECTION_none</internalKey>
        <description>This code casts a Collection to an abstract collection (such as List, Set, or Map).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_exception_storage_in_gui</key>
        <name>Medium impact security : Exception leaked to user interface</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_exception_storage_in_gui</internalKey>
        <description>Displaying an exception message or stack trace in the user interface.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_content_provider</key>
        <name>Low impact security : Cleartext sensitive data in external content provider</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_content_provider</internalKey>
        <description>Storing unencrypted sensitive data in external content provider.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_cookie</key>
        <name>High impact security : Cleartext sensitive data in a cookie</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_cookie</internalKey>
        <description>Storing unencrypted sensitive data in a cookie.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_database</key>
        <name>Medium impact security : Cleartext sensitive data in a database</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_database</internalKey>
        <description>Storing unencrypted sensitive data to a database.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_file</key>
        <name>Low impact security : Cleartext sensitive data in a file</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_file</internalKey>
        <description>Storing unencrypted sensitive data to a file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_gui</key>
        <name>High impact security : Display of sensitive data in the user interface</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_gui</internalKey>
        <description>Displaying sensitive data in the user interface.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_intent</key>
        <name>Medium impact security : Cleartext sensitive data in intent</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_intent</internalKey>
        <description>Storing unencrypted sensitive data in intent.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_log</key>
        <name>Low impact security : Information exposure to log file</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_log</internalKey>
        <description>Logging sensitive data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_registry</key>
        <name>Medium impact security : Cleartext sensitive data in the registry</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_storage_in_registry</internalKey>
        <description>Storing unencrypted sensitive data in the system registry.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_transmission</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_cleartext_transmission</internalKey>
        <description>Transmitting sensitive data in cleartext.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SENSITIVE_DATA_LEAK_none</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>STATIC_JAVA_SENSITIVE_DATA_LEAK_none</internalKey>
        <description>Transmitting sensitive data in cleartext.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_BOOLEAN_RETURN_NULL_none</key>
        <name>SpotBugs: Bad practice : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_BOOLEAN_RETURN_NULL_none</internalKey>
        <description>A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FB_MISSING_EXPECTED_WARNING_none</key>
        <name>SpotBugs: Correctness : FB: SpotBugs did not produce the expected warnings on a method</name>
        <internalKey>STATIC_JAVA_FB.FB_MISSING_EXPECTED_WARNING_none</internalKey>
        <description>SpotBugs didn&apos;t generate a warning that, according to a @ExpectedWarning annotated, is expected or desired.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE_none</key>
        <name>SpotBugs: Dodgy code : RCN: Redundant comparison to null</name>
        <internalKey>STATIC_JAVA_FB.RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE_none</internalKey>
        <description>This method contains a reference known to be non-null with another reference known to be null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UL_UNRELEASED_LOCK_EXCEPTION_PATH_none</key>
        <name>SpotBugs: Multithreaded correctness : UL: Lock not released on all paths</name>
        <internalKey>STATIC_JAVA_FB.UL_UNRELEASED_LOCK_EXCEPTION_PATH_none</internalKey>
        <description>This method acquires a JSR-166 (java.util.concurrent) lock, but does not release it on all exception paths out of the method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UUF_UNUSED_FIELD_none</key>
        <name>SpotBugs: Performance : UuF: Unused field</name>
        <internalKey>STATIC_JAVA_FB.UUF_UNUSED_FIELD_none</internalKey>
        <description>This field is never used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_IMPOSSIBLE_INSTANCEOF_none</key>
        <name>SpotBugs: Correctness : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_IMPOSSIBLE_INSTANCEOF_none</internalKey>
        <description>This instanceof test will always return false.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.OS_OPEN_STREAM_none</key>
        <name>SpotBugs: Bad practice : OS: Stream not closed on all paths</name>
        <internalKey>STATIC_JAVA_FB.OS_OPEN_STREAM_none</internalKey>
        <description>The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UR_UNINIT_READ_none</key>
        <name>SpotBugs: Correctness : UR: Uninitialized read of field in constructor</name>
        <internalKey>STATIC_JAVA_FB.UR_UNINIT_READ_none</internalKey>
        <description>This constructor reads a field which has not yet been assigned a value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_TAINTED_ENVIRONMENT_WITH_EXECUTION_none</key>
        <name>Low impact security : Tainted environment variable for subprocess</name>
        <internalKey>STATIC_JAVA_TAINTED_ENVIRONMENT_WITH_EXECUTION_none</internalKey>
        <description>A user-controllable string is passed into the environment of a process that is executed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNSAFE_JNI_none</key>
        <name>Medium impact security : Unsafe dynamic library loading</name>
        <internalKey>STATIC_JAVA_UNSAFE_JNI_none</internalKey>
        <description>A user-controllable string is used in a dynamic library path.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_MONITOR_WAIT_ON_CONDITION_none</key>
        <name>SpotBugs: Multithreaded correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_MONITOR_WAIT_ON_CONDITION_none</internalKey>
        <description>This method calls wait() on a java.util.concurrent.locks.Condition object.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_LOCAL_SELF_COMPUTATION_none</key>
        <name>SpotBugs: Correctness : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_LOCAL_SELF_COMPUTATION_none</internalKey>
        <description>This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&amp;amp;x or x-x).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_none</key>
        <name>SpotBugs: Correctness : SF: Switch case falls through</name>
        <internalKey>STATIC_JAVA_FB.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_none</internalKey>
        <description>A value stored in the previous switch case is overwritten here due to a switch fall through.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DC_PARTIALLY_CONSTRUCTED_none</key>
        <name>SpotBugs: Multithreaded correctness : DC: Double check pattern</name>
        <internalKey>STATIC_JAVA_FB.DC_PARTIALLY_CONSTRUCTED_none</internalKey>
        <description>Looks like this method uses lazy field initialization with double-checked locking.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_ALWAYS_FALSE_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_ALWAYS_FALSE_none</internalKey>
        <description>This class defines an equals method that always returns false.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNSAFE_NAMED_QUERY_none</key>
        <name>Low impact security : Unsafe named query</name>
        <internalKey>STATIC_JAVA_UNSAFE_NAMED_QUERY_none</internalKey>
        <description>A user-controllable string is used to select a named database query.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_cors_with_credentials_http_origin</key>
        <name>Low impact security : Unencrypted origin trusted for credentialed requests</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_cors_with_credentials_http_origin</internalKey>
        <description>The CORS policy shares responses to credentialed requests with non-HTTPS origins.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_cors_with_credentials_null_origin</key>
        <name>High impact security : Responses for credentialed CORS requests shared with null origin</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_cors_with_credentials_null_origin</internalKey>
        <description>The CORS policy shares sensitive responses with the null origin by setting the Access-Control-Allow-Origin header &apos;null&apos;.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_none</key>
        <name>High impact security : Responses for credentialed CORS requests shared with null origin</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_none</internalKey>
        <description>The CORS policy shares sensitive responses with the null origin by setting the Access-Control-Allow-Origin header &apos;null&apos;.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SQLI_none</key>
        <name>High impact security : SQL injection</name>
        <internalKey>STATIC_JAVA_SQLI_none</internalKey>
        <description>Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SQLI_nosink</key>
        <name>Medium impact security : SQL injection</name>
        <internalKey>STATIC_JAVA_SQLI_nosink</internalKey>
        <description>Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SQLI_sink</key>
        <name>High impact security : SQL injection</name>
        <internalKey>STATIC_JAVA_SQLI_sink</internalKey>
        <description>Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE_none</key>
        <name>SpotBugs: Multithreaded correctness : DL: Unintended contention or possible deadlock due to locking on shared objects</name>
        <internalKey>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE_none</internalKey>
        <description>The code synchronizes on an apparently unshared boxed primitive, such as an Integer.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_UNRELATED_CLASS_AND_INTERFACE_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_UNRELATED_CLASS_AND_INTERFACE_none</internalKey>
        <description>This method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_HASHCODE_NO_EQUALS_none</key>
        <name>SpotBugs: Bad practice : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_HASHCODE_NO_EQUALS_none</internalKey>
        <description>This class defines a hashCode() method but not an equals() method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UC_USELESS_CONDITION_TYPE_none</key>
        <name>SpotBugs: Dodgy code : UC: Useless code</name>
        <internalKey>STATIC_JAVA_FB.UC_USELESS_CONDITION_TYPE_none</internalKey>
        <description>This condition always produces the same result due to the type range of the involved variable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VO_VOLATILE_REFERENCE_TO_ARRAY_none</key>
        <name>SpotBugs: Multithreaded correctness : VO: Use of volatile</name>
        <internalKey>STATIC_JAVA_FB.VO_VOLATILE_REFERENCE_TO_ARRAY_none</internalKey>
        <description>This declares a volatile reference to an array, which might not be what you want.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SQL_BAD_PREPARED_STATEMENT_ACCESS_none</key>
        <name>SpotBugs: Correctness : SQL: Potential SQL Problem</name>
        <internalKey>STATIC_JAVA_FB.SQL_BAD_PREPARED_STATEMENT_ACCESS_none</internalKey>
        <description>A call to a setXXX method of a prepared statement was made where the parameter index is 0.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_GUARANTEED_DEREF_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_GUARANTEED_DEREF_none</internalKey>
        <description>There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FL_MATH_USING_FLOAT_PRECISION_none</key>
        <name>SpotBugs: Correctness : FL: Use of floating point precision</name>
        <internalKey>STATIC_JAVA_FB.FL_MATH_USING_FLOAT_PRECISION_none</internalKey>
        <description>The method performs math operations using floating point precision.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_METHOD_RETURN_RELAXING_ANNOTATION_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_METHOD_RETURN_RELAXING_ANNOTATION_none</internalKey>
        <description>A method should always implement the contract of a method it overrides.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SCRIPT_CODE_INJECTION_none</key>
        <name>High impact security : Script code injection</name>
        <internalKey>STATIC_JAVA_SCRIPT_CODE_INJECTION_none</internalKey>
        <description>Script code interpreted or executed on the server is constructed from user-controllable data.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_FIELD_DOUBLE_ASSIGNMENT_none</key>
        <name>SpotBugs: Dodgy code : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_FIELD_DOUBLE_ASSIGNMENT_none</internalKey>
        <description>This method contains a double assignment of a field; e.g.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_UNCONFIRMED_CAST_none</key>
        <name>SpotBugs: Dodgy code : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_UNCONFIRMED_CAST_none</internalKey>
        <description>This cast is unchecked, and not all instances of the type casted from can be cast to the type it is being cast to.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TESTING_none</key>
        <name>SpotBugs: Experimental : TEST: Testing prototype and incomplete bug pattern</name>
        <internalKey>STATIC_JAVA_FB.TESTING_none</internalKey>
        <description>This bug pattern is only generated by new, incompletely implemented bug detectors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UM_UNNECESSARY_MATH_none</key>
        <name>SpotBugs: Performance : UM: Unnecessary Math on constants</name>
        <internalKey>STATIC_JAVA_FB.UM_UNNECESSARY_MATH_none</internalKey>
        <description>This method uses a static method from java.lang.Math on a constant value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE_none</key>
        <name>SpotBugs: Multithreaded correctness : STCAL: Static use of type Calendar or DateFormat</name>
        <internalKey>STATIC_JAVA_FB.STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE_none</internalKey>
        <description>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HSC_HUGE_SHARED_STRING_CONSTANT_none</key>
        <name>SpotBugs: Performance : HSC: Huge String constants</name>
        <internalKey>STATIC_JAVA_FB.HSC_HUGE_SHARED_STRING_CONSTANT_none</internalKey>
        <description>A large String constant is duplicated across multiple class files.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XML_INJECTION_none</key>
        <name>Audit impact security : XML injection</name>
        <internalKey>STATIC_JAVA_XML_INJECTION_none</internalKey>
        <description>User-controllable data is parsed as XML.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SQL_NOT_CONSTANT_concat</key>
        <name>Audit impact security : Non-constant SQL</name>
        <internalKey>STATIC_JAVA_SQL_NOT_CONSTANT_concat</internalKey>
        <description>An SQL statement is constructed by concatenating a non-constant string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SQL_NOT_CONSTANT_sink</key>
        <name>Audit impact security : Non-constant SQL</name>
        <internalKey>STATIC_JAVA_SQL_NOT_CONSTANT_sink</internalKey>
        <description>An SQL query or command is executed that is not a constant string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SQL_NOT_CONSTANT_none</key>
        <name>Audit impact security : Non-constant SQL</name>
        <internalKey>STATIC_JAVA_SQL_NOT_CONSTANT_none</internalKey>
        <description>An SQL query or command is executed that is not a constant string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_cors_expose_sensitive_header</key>
        <name>Audit impact security : Exposing sensitive headers</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_cors_expose_sensitive_header</internalKey>
        <description>The CORS is configured to expose sensitive headers.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_cors_methods_allowed</key>
        <name>Audit impact security : List of allowed methods not restricted</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_cors_methods_allowed</internalKey>
        <description>The CORS policy does not restrict the list of allowed methods.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_cors_without_credentials_permissive_origin</key>
        <name>Audit impact security : CORS requests allowed from all origins</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_cors_without_credentials_permissive_origin</internalKey>
        <description>The Access-Control-Allow-Origin header is set to share the requested resource with any origin.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_none</key>
        <name>Audit impact security : CORS requests allowed from all origins</name>
        <internalKey>STATIC_JAVA_CORS_MISCONFIGURATION_AUDIT_none</internalKey>
        <description>The Access-Control-Allow-Origin header is set to share the requested resource with any origin.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR_none</key>
        <name>SpotBugs: Dodgy code : UwF: Unwritten field</name>
        <internalKey>STATIC_JAVA_FB.UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR_none</internalKey>
        <description>This field is never initialized within any constructor, and is therefore could be null after the object is constructed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_none</internalKey>
        <description>The return value of this method should be checked.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL_none</key>
        <name>SpotBugs: Correctness : ICAST: Casting from integer values</name>
        <internalKey>STATIC_JAVA_FB.ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL_none</internalKey>
        <description>This code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.ANDROID_BACKUPS_ALLOWED_android</key>
        <name>Low impact security : Android application allows backups</name>
        <internalKey>STATIC_JAVA_CONFIG.ANDROID_BACKUPS_ALLOWED_android</internalKey>
        <description>The application allows the Android operating system to create backups of the application when needed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.ANDROID_BACKUPS_ALLOWED_none</key>
        <name>Low impact security : Android application allows backups</name>
        <internalKey>STATIC_JAVA_CONFIG.ANDROID_BACKUPS_ALLOWED_none</internalKey>
        <description>The application allows the Android operating system to create backups of the application when needed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IJU_TEARDOWN_NO_SUPER_none</key>
        <name>SpotBugs: Correctness : IJU: Improperly implemented JUnit TestCase</name>
        <internalKey>STATIC_JAVA_FB.IJU_TEARDOWN_NO_SUPER_none</internalKey>
        <description>Class is a JUnit TestCase and implements the tearDown method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_FIELD_SELF_COMPUTATION_none</key>
        <name>SpotBugs: Correctness : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_FIELD_SELF_COMPUTATION_none</internalKey>
        <description>This method performs a nonsensical computation of a field with another reference to the same field (e.g., x&amp;amp;x or x-x).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CALL_SUPER_clone</key>
        <name>Class hierarchy inconsistencies : Failure to call super.clone()</name>
        <internalKey>STATIC_JAVA_CALL_SUPER_clone</internalKey>
        <description>All implementations of Object.clone are required to call super.clone to allocate the new object</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CALL_SUPER_finalize</key>
        <name>Class hierarchy inconsistencies : Failure to call super.finalize()</name>
        <internalKey>STATIC_JAVA_CALL_SUPER_finalize</internalKey>
        <description>It is good practice to call super.finalize in finalize methods</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CALL_SUPER_none</key>
        <name>Class hierarchy inconsistencies : Missing call to superclass</name>
        <internalKey>STATIC_JAVA_CALL_SUPER_none</internalKey>
        <description>Overrider does not call the superclass method, even though most other overriders do</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED_none</key>
        <name>SpotBugs: Correctness : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED_none</internalKey>
        <description>A value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT_none</key>
        <name>SpotBugs: Dodgy code : BSHIFT: Bad shift</name>
        <internalKey>STATIC_JAVA_FB.ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT_none</internalKey>
        <description>The code performs an unsigned right shift, whose result is then cast to a short or byte, which discards the upper bits of the result.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_VACUOUS_INSTANCEOF_none</key>
        <name>SpotBugs: Dodgy code : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_VACUOUS_INSTANCEOF_none</internalKey>
        <description>This instanceof test will always return true (unless the value being tested is null).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CO_SELF_NO_OBJECT_none</key>
        <name>SpotBugs: Bad practice : Co: Problems with implementation of compareTo()</name>
        <internalKey>STATIC_JAVA_FB.CO_SELF_NO_OBJECT_none</internalKey>
        <description>This class defines a covariant version of compareTo().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.JAVAEE_MISSING_HTTPONLY_none</key>
        <name>Low impact security : Missing HttpOnly in session cookie</name>
        <internalKey>STATIC_JAVA_CONFIG.JAVAEE_MISSING_HTTPONLY_none</internalKey>
        <description>The HttpOnly flag is not enabled for the session cookies.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_DOESNT_OVERRIDE_EQUALS_none</key>
        <name>SpotBugs: Dodgy code : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_DOESNT_OVERRIDE_EQUALS_none</internalKey>
        <description>This class extends a class that defines an equals method and adds fields, but doesn&apos;t define an equals method itself.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ORM_ABANDONED_TRANSIENT_none</key>
        <name>API usage errors : ORM persistence error</name>
        <internalKey>STATIC_JAVA_ORM_ABANDONED_TRANSIENT_none</internalKey>
        <description>New objects are not persisted.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_OVERFLOW_BEFORE_WIDEN_none</key>
        <name>Integer handling issues : Unintentional integer overflow</name>
        <internalKey>STATIC_JAVA_OVERFLOW_BEFORE_WIDEN_none</internalKey>
        <description>An integer overflow occurs, with the result converted to a wider integer type</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.SPRING_SECURITY_HARDCODED_CREDENTIALS_none</key>
        <name>Low impact security : Spring Security hardcoded credentials</name>
        <internalKey>STATIC_JAVA_CONFIG.SPRING_SECURITY_HARDCODED_CREDENTIALS_none</internalKey>
        <description>Hardcoded credentials are found in the Spring Security configuration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_INCOMPATIBLE_ARRAY_COMPARE_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_INCOMPATIBLE_ARRAY_COMPARE_none</internalKey>
        <description>This method invokes the .equals(Object o) to compare two arrays, but the arrays of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ORM_UNNECESSARY_GET_none</key>
        <name>Performance inefficiencies : Unnecessary call to org.hibernate.Session.get method</name>
        <internalKey>STATIC_JAVA_ORM_UNNECESSARY_GET_none</internalKey>
        <description>There is an unnecessary call to org.hibernate.Session.get(...) which will result in a database access. In some cases, org.hibernate.Session.load(...) can be called to improve performance.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS_none</key>
        <name>SpotBugs: Bad practice : PZ: Warning inspired by Josh Bloch&apos;s and Neal Gafter&apos;s Programming Puzzlers</name>
        <internalKey>STATIC_JAVA_FB.PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS_none</internalKey>
        <description>The entrySet() method is allowed to return a view of the underlying Map which is both an Iterator and Map.Entry.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RC_REF_COMPARISON_none</key>
        <name>SpotBugs: Correctness : RC: Questionable use of reference equality rather than calling equals</name>
        <internalKey>STATIC_JAVA_FB.RC_REF_COMPARISON_none</internalKey>
        <description>This method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XSS_none</key>
        <name>High impact security : Cross-site scripting</name>
        <internalKey>STATIC_JAVA_XSS_none</internalKey>
        <description>Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XSS_stored_xss</key>
        <name>High impact security : Cross-site scripting (stored)</name>
        <internalKey>STATIC_JAVA_XSS_stored_xss</internalKey>
        <description>Untrusted user-supplied data is stored in a database and subsequently read back and included in a context that can execute JavaScript without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING_none</key>
        <name>SpotBugs: Security : SQL: Potential SQL Problem</name>
        <internalKey>STATIC_JAVA_FB.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING_none</internalKey>
        <description>The code creates an SQL prepared statement from a nonconstant String.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_NEXTINT_VIA_NEXTDOUBLE_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_NEXTINT_VIA_NEXTDOUBLE_none</internalKey>
        <description>If r is a java.util.Random, you can generate a random number from 0 to n-1 using r.nextInt(n), rather than using (int)(r.nextDouble() * n).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE_none</key>
        <name>SpotBugs: Experimental : OBL: Unsatisfied obligation to clean up stream or resource</name>
        <internalKey>STATIC_JAVA_FB.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE_none</internalKey>
        <description>This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS_none</key>
        <name>SpotBugs: Bad practice : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS_none</internalKey>
        <description>This equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VR_UNRESOLVABLE_REFERENCE_none</key>
        <name>SpotBugs: Correctness : VR: Version compatibility issue</name>
        <internalKey>STATIC_JAVA_FB.VR_UNRESOLVABLE_REFERENCE_none</internalKey>
        <description>This class makes a reference to a class or method that can not be resolved using against the libraries it is being analyzed with. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED_none</key>
        <name>SpotBugs: Dodgy code : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED_none</internalKey>
        <description>A Thread object is passed as a parameter to a method where a Runnable is expected.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_NONFINAL_SERIALVERSIONID_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_NONFINAL_SERIALVERSIONID_none</internalKey>
        <description>This class defines a serialVersionUID field that is not final.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_ABSTRACT_SELF_none</key>
        <name>SpotBugs: Bad practice : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_ABSTRACT_SELF_none</internalKey>
        <description>This class defines a covariant version of equals().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SF_SWITCH_FALLTHROUGH_none</key>
        <name>SpotBugs: Dodgy code : SF: Switch case falls through</name>
        <internalKey>STATIC_JAVA_FB.SF_SWITCH_FALLTHROUGH_none</internalKey>
        <description>This method contains a switch statement where one case branch will fall through to the next case.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_BOOLEAN_CTOR_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_BOOLEAN_CTOR_none</internalKey>
        <description>Creating new instances of java.lang.Boolean wastes memory, since Boolean objects are immutable and there are only two useful values of this type.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_CLONE_COULD_RETURN_NULL_none</key>
        <name>SpotBugs: Bad practice : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_CLONE_COULD_RETURN_NULL_none</internalKey>
        <description>This clone method seems to return null in some circumstances, but clone is never allowed to return a null value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_AND_none</key>
        <name>SpotBugs: Correctness : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_AND_none</internalKey>
        <description>This method compares an expression of the form (e &amp;amp; C) to D, which will always compare unequal due to the specific values of constants C and D.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS_none</key>
        <name>SpotBugs: Performance : SIC: Inner class could be made static</name>
        <internalKey>STATIC_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS_none</internalKey>
        <description>This class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CHECK_OF_WAIT_COND_dead_wait</key>
        <name>Program hangs : Indefinite wait</name>
        <internalKey>STATIC_JAVA_BAD_CHECK_OF_WAIT_COND_dead_wait</internalKey>
        <description>A thread waits for a thread-shared condition which may have already been satisfied, causing a hang.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CHECK_OF_WAIT_COND_spurious_wakeup</key>
        <name>Concurrent data access violations : Data race condition</name>
        <internalKey>STATIC_JAVA_BAD_CHECK_OF_WAIT_COND_spurious_wakeup</internalKey>
        <description>A thread does not re-check its wait condition after waking up from a wait.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CHECK_OF_WAIT_COND_none</key>
        <name>Concurrent data access violations : Data race condition</name>
        <internalKey>STATIC_JAVA_BAD_CHECK_OF_WAIT_COND_none</internalKey>
        <description>A thread does not re-check its wait condition after waking up from a wait.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NS_NON_SHORT_CIRCUIT_none</key>
        <name>SpotBugs: Dodgy code : NS: Suspicious use of non-short-circuit boolean operator</name>
        <internalKey>STATIC_JAVA_FB.NS_NON_SHORT_CIRCUIT_none</internalKey>
        <description>This code seems to be using non-short-circuit logic (e.g., &amp;amp; or |) rather than short-circuit logic (&amp;amp;&amp;amp; or ||).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TLW_TWO_LOCK_NOTIFY_none</key>
        <name>SpotBugs: Multithreaded correctness : TLW: Wait with two locks held</name>
        <internalKey>STATIC_JAVA_FB.TLW_TWO_LOCK_NOTIFY_none</internalKey>
        <description>The code calls notify() or notifyAll() while two locks are held. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ML_SYNC_ON_UPDATED_FIELD_none</key>
        <name>SpotBugs: Multithreaded correctness : ML: Synchronization on updated field (Mutable Lock)</name>
        <internalKey>STATIC_JAVA_FB.ML_SYNC_ON_UPDATED_FIELD_none</internalKey>
        <description>This method synchronizes on an object referenced from a mutable field.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED_none</key>
        <name>SpotBugs: Correctness : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED_none</internalKey>
        <description>A value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_REM_OF_RANDOM_INT_none</key>
        <name>SpotBugs: Dodgy code : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_REM_OF_RANDOM_INT_none</internalKey>
        <description>This code generates a random signed integer and then computes the remainder of that value modulo another value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_RETURN_none</key>
        <name>SpotBugs: Dodgy code : CAA: Covariant array assignment</name>
        <internalKey>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_RETURN_none</internalKey>
        <description>Array of covariant type is returned from the method. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS_none</key>
        <name>SpotBugs: Correctness : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS_none</internalKey>
        <description>A method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IMA_INEFFICIENT_MEMBER_ACCESS_none</key>
        <name>SpotBugs: Performance : IMA: Inefficient Member Access</name>
        <internalKey>STATIC_JAVA_FB.IMA_INEFFICIENT_MEMBER_ACCESS_none</internalKey>
        <description>This method of an inner class reads from or writes to a private member variable of the owning class, or calls a private method of the owning class. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DC.DEADLOCK_none</key>
        <name>Low impact security : Call to a deadlock-prone function</name>
        <internalKey>STATIC_JAVA_DC.DEADLOCK_none</internalKey>
        <description>Using a deprecated API that can easily lead to a deadlock despite the existence of better alternatives.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH_none</key>
        <name>SpotBugs: Bad practice : ODR: Database resource not closed on all paths</name>
        <internalKey>STATIC_JAVA_FB.ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH_none</internalKey>
        <description>The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_ADD_OF_SIGNED_BYTE_none</key>
        <name>SpotBugs: Correctness : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_ADD_OF_SIGNED_BYTE_none</internalKey>
        <description>Adds a byte value and a value which is known to have the 8 lower bits clear.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.USM_USELESS_SUBCLASS_METHOD_none</key>
        <name>SpotBugs: Dodgy code : USM: Useless method</name>
        <internalKey>STATIC_JAVA_FB.USM_USELESS_SUBCLASS_METHOD_none</internalKey>
        <description>This derived method merely calls the same superclass method passing in the exact parameters received. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DEADCODE_dead_case_in_switch</key>
        <name>Possible Control flow issues : Dead case in switch</name>
        <internalKey>STATIC_JAVA_DEADCODE_dead_case_in_switch</internalKey>
        <description>Switch never goes directly to this case</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DEADCODE_dead_default_in_switch</key>
        <name>Possible Control flow issues : Dead default in switch</name>
        <internalKey>STATIC_JAVA_DEADCODE_dead_default_in_switch</internalKey>
        <description>Default in switch statement is dead code</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DEADCODE_effectively_constant</key>
        <name>Possible Control flow issues : &apos;Constant&apos; variable guards dead code</name>
        <internalKey>STATIC_JAVA_DEADCODE_effectively_constant</internalKey>
        <description>Variable assigned once to a constant guards dead code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DEADCODE_none</key>
        <name>Control flow issues : Logically dead code</name>
        <internalKey>STATIC_JAVA_DEADCODE_none</internalKey>
        <description>Code can never be reached because of a logical contradiction</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DEADCODE_redundant_test</key>
        <name>Possible Control flow issues : Redundant test</name>
        <internalKey>STATIC_JAVA_DEADCODE_redundant_test</internalKey>
        <description>Test always evaluates the same</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ES_COMPARING_STRINGS_WITH_EQ_none</key>
        <name>SpotBugs: Bad practice : ES: Checking String equality using == or !=</name>
        <internalKey>STATIC_JAVA_FB.ES_COMPARING_STRINGS_WITH_EQ_none</internalKey>
        <description>This code compares java.lang.String objects for reference equality using the == or != operators.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_REGEX_INJECTION_none</key>
        <name>Low impact security : Regular expression injection</name>
        <internalKey>STATIC_JAVA_REGEX_INJECTION_none</internalKey>
        <description>A regular expression is constructed from a user-controllable string.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE_none</key>
        <name>SpotBugs: Multithreaded correctness : STCAL: Static use of type Calendar or DateFormat</name>
        <internalKey>STATIC_JAVA_FB.STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE_none</internalKey>
        <description>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.STI_INTERRUPTED_ON_CURRENTTHREAD_none</key>
        <name>SpotBugs: Correctness : STI: Suspicious Thread Interrupted</name>
        <internalKey>STATIC_JAVA_FB.STI_INTERRUPTED_ON_CURRENTTHREAD_none</internalKey>
        <description>This method invokes the Thread.currentThread() call, just to call the interrupted() method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_BAD_FIELD_STORE_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_BAD_FIELD_STORE_none</internalKey>
        <description>A non-serializable value is stored into a non-transient field of a serializable class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_STRING_CTOR_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_STRING_CTOR_none</internalKey>
        <description>Using the java.lang.String(String) constructor wastes memory because the object so constructed will be functionally indistinguishable from the String passed as a parameter.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_coverity-java</key>
        <name>Coverity General JAVA</name>
        <internalKey>STATIC_JAVA_coverity-java</internalKey>
        <description>Coverity General JAVA</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.UNSAFE_SESSION_TIMEOUT_none</key>
        <name>Low impact security : Unsafe session timeout</name>
        <internalKey>STATIC_JAVA_CONFIG.UNSAFE_SESSION_TIMEOUT_none</internalKey>
        <description>The session timeout is set to be infinite.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_JAVA_CODE_INJECTION_none</key>
        <name>High impact security : Dynamic Java Bytecode injection</name>
        <internalKey>STATIC_JAVA_JAVA_CODE_INJECTION_none</internalKey>
        <description>A user-controllable string is evaluated by an API that produces dynamic Java bytecode.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_BAD_PRACTICE_none</key>
        <name>SpotBugs: Bad practice : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_BAD_PRACTICE_none</internalKey>
        <description>This method returns a value that is not checked.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT_none</key>
        <name>SpotBugs: Bad practice : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT_none</internalKey>
        <description>This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.XFB_XML_FACTORY_BYPASS_none</key>
        <name>SpotBugs: Dodgy code : XFB: XML Factory Bypass</name>
        <internalKey>STATIC_JAVA_FB.XFB_XML_FACTORY_BYPASS_none</internalKey>
        <description>This method allocates a specific implementation of an xml interface.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_UNRELATED_INTERFACES_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_UNRELATED_INTERFACES_none</internalKey>
        <description>This method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SC_START_IN_CTOR_none</key>
        <name>SpotBugs: Multithreaded correctness : SC: Constructor invokes Thread.start()</name>
        <internalKey>STATIC_JAVA_FB.SC_START_IN_CTOR_none</internalKey>
        <description>The constructor starts a thread.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNSAFE_DESERIALIZATION_none</key>
        <name>High impact security : Unsafe deserialization</name>
        <internalKey>STATIC_JAVA_UNSAFE_DESERIALIZATION_none</internalKey>
        <description>A user-controllable string is deserialized.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_SHOULD_BE_FINAL_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_SHOULD_BE_FINAL_none</internalKey>
        <description>A mutable static field could be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RESOURCE_LEAK_exceptional_path</key>
        <name>Exceptional resource leaks : Resource leak on an exceptional path</name>
        <internalKey>STATIC_JAVA_RESOURCE_LEAK_exceptional_path</internalKey>
        <description>Leak of a system resource on an exception path (probably error handling)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RESOURCE_LEAK_none</key>
        <name>Resource leaks : Resource leak</name>
        <internalKey>STATIC_JAVA_RESOURCE_LEAK_none</internalKey>
        <description>Leak of a system resource</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RESOURCE_LEAK_socket</key>
        <name>Resource leaks : Socket leak</name>
        <internalKey>STATIC_JAVA_RESOURCE_LEAK_socket</internalKey>
        <description>Leak of a socket resource</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RESOURCE_LEAK_stream</key>
        <name>Resource leaks : Stream leak</name>
        <internalKey>STATIC_JAVA_RESOURCE_LEAK_stream</internalKey>
        <description>Leak of a stream representing a file or other resource</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_GUARDED_BY_VIOLATION_none</key>
        <name>Concurrent data access violations : Data race condition</name>
        <internalKey>STATIC_JAVA_GUARDED_BY_VIOLATION_none</internalKey>
        <description>Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_GUARDED_BY_VIOLATION_unlocked_read</key>
        <name>Concurrent data access violations : Unguarded read</name>
        <internalKey>STATIC_JAVA_GUARDED_BY_VIOLATION_unlocked_read</internalKey>
        <description>Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_GUARDED_BY_VIOLATION_unlocked_write</key>
        <name>Concurrent data access violations : Unguarded write</name>
        <internalKey>STATIC_JAVA_GUARDED_BY_VIOLATION_unlocked_write</internalKey>
        <description>Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH_none</internalKey>
        <description>There is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_ILLEGAL_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_ILLEGAL_none</internalKey>
        <description>The format string is syntactically invalid, and a runtime exception will occur when this statement is executed.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RC_REF_COMPARISON_BAD_PRACTICE_none</key>
        <name>SpotBugs: Bad practice : RC: Questionable use of reference equality rather than calling equals</name>
        <internalKey>STATIC_JAVA_FB.RC_REF_COMPARISON_BAD_PRACTICE_none</internalKey>
        <description>This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE_none</key>
        <name>SpotBugs: Correctness : INT: Suspicious integer expression</name>
        <internalKey>STATIC_JAVA_FB.INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE_none</internalKey>
        <description>This code compares a value that is guaranteed to be non-negative with a negative constant or zero.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS_none</key>
        <name>SpotBugs: Correctness : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS_none</internalKey>
        <description>A value specified as carrying a type qualifier annotation is compared with a value that doesn&apos;t ever carry that qualifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ORM_LOAD_NULL_CHECK_none</key>
        <name>API usage errors : ORM usage error</name>
        <internalKey>STATIC_JAVA_ORM_LOAD_NULL_CHECK_none</internalKey>
        <description>A possibly proxy object is pointlessly tested for null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_DONT_JUST_NULL_CHECK_READLINE_none</key>
        <name>SpotBugs: Dodgy code : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_DONT_JUST_NULL_CHECK_READLINE_none</internalKey>
        <description>The value returned by readLine is discarded after checking to see if the return value is non-null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER_none</internalKey>
        <description>This identifier is used as a keyword in later versions of Java.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION_none</key>
        <name>SpotBugs: Bad practice : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION_none</internalKey>
        <description>If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TESTING1_none</key>
        <name>SpotBugs: Experimental : TEST: Testing prototype and incomplete bug pattern</name>
        <internalKey>STATIC_JAVA_FB.TESTING1_none</internalKey>
        <description>This bug pattern is only generated by new, incompletely implemented bug detectors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TESTING2_none</key>
        <name>SpotBugs: Experimental : TEST: Testing prototype and incomplete bug pattern</name>
        <internalKey>STATIC_JAVA_FB.TESTING2_none</internalKey>
        <description>This bug pattern is only generated by new, incompletely implemented bug detectors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TESTING3_none</key>
        <name>SpotBugs: Experimental : TEST: Testing prototype and incomplete bug pattern</name>
        <internalKey>STATIC_JAVA_FB.TESTING3_none</internalKey>
        <description>This bug pattern is only generated by new, incompletely implemented bug detectors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NOISE_OPERATION_none</key>
        <name>SpotBugs: Bogus random noise : NOISE: Bogus random warning</name>
        <internalKey>STATIC_JAVA_FB.NOISE_OPERATION_none</internalKey>
        <description>Bogus warning.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE_none</key>
        <name>SpotBugs: Multithreaded correctness : STCAL: Static use of type Calendar or DateFormat</name>
        <internalKey>STATIC_JAVA_FB.STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE_none</internalKey>
        <description>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SW_SWING_METHODS_INVOKED_IN_SWING_THREAD_none</key>
        <name>SpotBugs: Bad practice : SW: Swing coding rules</name>
        <internalKey>STATIC_JAVA_FB.SW_SWING_METHODS_INVOKED_IN_SWING_THREAD_none</internalKey>
        <description>(&lt;a href=&quot;http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html&quot;&gt;From JDC Tech Tip&lt;/a&gt;): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XML_EXTERNAL_ENTITY_entity_expansion</key>
        <name>Medium impact security : Unrestricted entity expansion</name>
        <internalKey>STATIC_JAVA_XML_EXTERNAL_ENTITY_entity_expansion</internalKey>
        <description>Passing tainted input data with possibly arbitrary entity references to a weakly configured XML parser that does not limit entity expansion.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XML_EXTERNAL_ENTITY_external_entities</key>
        <name>Medium impact security : Unrestricted external entity references</name>
        <internalKey>STATIC_JAVA_XML_EXTERNAL_ENTITY_external_entities</internalKey>
        <description>Passing tainted input data with possibly arbitrary external entity references to a weakly configured XML parser.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XML_EXTERNAL_ENTITY_unrestricted_dtds</key>
        <name>Medium impact security : Unrestricted document type definitions</name>
        <internalKey>STATIC_JAVA_XML_EXTERNAL_ENTITY_unrestricted_dtds</internalKey>
        <description>Passing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XML_EXTERNAL_ENTITY_none</key>
        <name>Medium impact security : Unrestricted document type definitions</name>
        <internalKey>STATIC_JAVA_XML_EXTERNAL_ENTITY_none</internalKey>
        <description>Passing tainted input data with possibly arbitrary DTDs to a weakly configured XML parser.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IC_INIT_CIRCULARITY_none</key>
        <name>SpotBugs: Dodgy code : IC: Initialization circularity</name>
        <internalKey>STATIC_JAVA_FB.IC_INIT_CIRCULARITY_none</internalKey>
        <description>A circularity was detected in the static initializers of the two classes referenced by the bug instance.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_bit_and_with_zero</key>
        <name>Integer handling issues : Bitwise-and with zero</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_bit_and_with_zero</internalKey>
        <description>Bitwise-and (&apos;&amp;amp;&apos;) operation applied to zero always produces zero</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_extra_high_bits</key>
        <name>Integer handling issues : Extra high-order bits</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_extra_high_bits</internalKey>
        <description>In an operation, the high-order bits of wider operand do not affect the narrower operand</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_logical_vs_bitwise</key>
        <name>Integer handling issues : Logical vs. bitwise operator</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_logical_vs_bitwise</internalKey>
        <description>Logical operator used in place of bitwise operator or vice versa</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_missing_parentheses</key>
        <name>Incorrect expression : Missing parentheses</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_missing_parentheses</internalKey>
        <description>Missing parentheses caused unintended operator precedence</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_none</key>
        <name>Integer handling issues : Constant expression result</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_none</internalKey>
        <description>An operation with non-constant operands that computes a result with constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_operator_confusion</key>
        <name>Integer handling issues : Wrong operator used</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_operator_confusion</internalKey>
        <description>Wrong operator used in expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_result_independent_of_operands</key>
        <name>Integer handling issues : Operands don&apos;t affect result</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_result_independent_of_operands</internalKey>
        <description>An operation with non-constant operands that computes a result with constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_same_on_both_sides</key>
        <name>Incorrect expression : Same on both sides</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_same_on_both_sides</internalKey>
        <description>The same expression occurs on both sides of an operator.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_unnecessary_op_assign</key>
        <name>Integer handling issues : Suspicious &amp;= or |=</name>
        <internalKey>STATIC_JAVA_CONSTANT_EXPRESSION_RESULT_unnecessary_op_assign</internalKey>
        <description>Using a bitwise assignment operator to assign a constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SIO_SUPERFLUOUS_INSTANCEOF_none</key>
        <name>SpotBugs: Correctness : SIO: Superfluous instanceof</name>
        <internalKey>STATIC_JAVA_FB.SIO_SUPERFLUOUS_INSTANCEOF_none</internalKey>
        <description>Type check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_SHOULD_BE_REFACTORED_TO_BE_FINAL_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_SHOULD_BE_REFACTORED_TO_BE_FINAL_none</internalKey>
        <description>A mutable static field could be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_OF_NULL_none</key>
        <name>SpotBugs: Dodgy code : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_OF_NULL_none</internalKey>
        <description>The code stores null into a local variable, and the stored value is not read.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNSAFE_REFLECTION_none</key>
        <name>Low impact security : Unsafe reflection</name>
        <internalKey>STATIC_JAVA_UNSAFE_REFLECTION_none</internalKey>
        <description>A user-controllable string is passed to a reflection API.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CO_COMPARETO_INCORRECT_FLOATING_none</key>
        <name>SpotBugs: Bad practice : Co: Problems with implementation of compareTo()</name>
        <internalKey>STATIC_JAVA_FB.CO_COMPARETO_INCORRECT_FLOATING_none</internalKey>
        <description>This method compares double or float values using pattern like this: val1 &amp;gt; val2 ? 1 : val1 &amp;lt; val2 ? -1 : 0.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UL_UNRELEASED_LOCK_none</key>
        <name>SpotBugs: Multithreaded correctness : UL: Lock not released on all paths</name>
        <internalKey>STATIC_JAVA_FB.UL_UNRELEASED_LOCK_none</internalKey>
        <description>This method acquires a JSR-166 (java.util.concurrent) lock, but does not release it on all paths out of the method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE_none</internalKey>
        <description>The return value from a method is dereferenced without a null check, and the return value of that method is one that should generally be checked for null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_PRIVATE_READ_RESOLVE_NOT_INHERITED_none</key>
        <name>SpotBugs: Dodgy code : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_PRIVATE_READ_RESOLVE_NOT_INHERITED_none</internalKey>
        <description>This class defines a private readResolve method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.SPRING_SECURITY_SESSION_FIXATION_none</key>
        <name>Medium impact security : Spring Security session fixation</name>
        <internalKey>STATIC_JAVA_CONFIG.SPRING_SECURITY_SESSION_FIXATION_none</internalKey>
        <description>The session fixation protection of Spring Security is disabled.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_OOI_PKGPROTECT_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_OOI_PKGPROTECT_none</internalKey>
        <description>A final static field that is defined in an interface references a mutable object such as an array or hashtable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE_none</key>
        <name>SpotBugs: Dodgy code : RCN: Redundant comparison to null</name>
        <internalKey>STATIC_JAVA_FB.RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE_none</internalKey>
        <description>This method contains a redundant check of a known null value against the constant null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CHECKED_RETURN_library_function</key>
        <name>Error handling issues : Unchecked return value from library</name>
        <internalKey>STATIC_JAVA_CHECKED_RETURN_library_function</internalKey>
        <description>Value returned from a library function is not checked for errors before being used.  This value may indicate an error condition.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CHECKED_RETURN_none</key>
        <name>Error handling issues : Unchecked return value</name>
        <internalKey>STATIC_JAVA_CHECKED_RETURN_none</internalKey>
        <description>Value returned from a function is not checked for errors before being used</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CHECKED_RETURN_short_read</key>
        <name>Error handling issues : Ignoring number of bytes read</name>
        <internalKey>STATIC_JAVA_CHECKED_RETURN_short_read</internalKey>
        <description>Value returned from a function and indicating the number of bytes read is ignored.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CHECKED_RETURN_user_required</key>
        <name>Error handling issues : Unchecked return value from user code</name>
        <internalKey>STATIC_JAVA_CHECKED_RETURN_user_required</internalKey>
        <description>Value returned from a program function is not checked before being used.  It has been marked that its return value should always be checked.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_NULL_INSTANCEOF_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.BC_NULL_INSTANCEOF_none</internalKey>
        <description>This instanceof test will always return false, since the value being checked is guaranteed to be null. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IL_CONTAINER_ADDED_TO_ITSELF_none</key>
        <name>SpotBugs: Correctness : IL: Infinite Loop</name>
        <internalKey>STATIC_JAVA_FB.IL_CONTAINER_ADDED_TO_ITSELF_none</internalKey>
        <description>A collection is added to itself.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_MUTABLE_ARRAY_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_MUTABLE_ARRAY_none</internalKey>
        <description>A final static field references an array and can be accessed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.USM_USELESS_ABSTRACT_METHOD_none</key>
        <name>SpotBugs: Dodgy code : USM: Useless method</name>
        <internalKey>STATIC_JAVA_FB.USM_USELESS_ABSTRACT_METHOD_none</internalKey>
        <description>This abstract method is already defined in an interface that is implemented by this abstract class. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_EXCEPTION_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_EXCEPTION_none</internalKey>
        <description>A reference value which is null on some exception control path is dereferenced here.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NS_DANGEROUS_NON_SHORT_CIRCUIT_none</key>
        <name>SpotBugs: Dodgy code : NS: Suspicious use of non-short-circuit boolean operator</name>
        <internalKey>STATIC_JAVA_FB.NS_DANGEROUS_NON_SHORT_CIRCUIT_none</internalKey>
        <description>This code seems to be using non-short-circuit logic (e.g., &amp;amp; or |) rather than short-circuit logic (&amp;amp;&amp;amp; or ||).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_database_access</key>
        <name>Low impact security : Database on external storage</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_database_access</internalKey>
        <description>There are no access restrictions on external storage.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_database_read</key>
        <name>Low impact security : Exposed database read</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_database_read</internalKey>
        <description>Read access to the database is not restricted to this application.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_database_write</key>
        <name>Low impact security : Exposed database write</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_database_write</internalKey>
        <description>Read/write access to the database is not restricted to this application.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_file_access</key>
        <name>Low impact security : File on external storage</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_file_access</internalKey>
        <description>There are no access restrictions on external storage.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_file_read</key>
        <name>Low impact security : Exposed file read</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_file_read</internalKey>
        <description>Read access to the file is not restricted to this application.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_file_write</key>
        <name>Low impact security : Exposed file write</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_unrestricted_file_write</internalKey>
        <description>Read/write access to this file is not restricted to this application.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_none</key>
        <name>Low impact security : Exposed file write</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_ACCESS_TO_FILE_none</internalKey>
        <description>Read/write access to this file is not restricted to this application.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_DEAD_STORE_OF_CLASS_LITERAL_none</key>
        <name>SpotBugs: Correctness : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_DEAD_STORE_OF_CLASS_LITERAL_none</internalKey>
        <description>This instruction assigns a class literal to a variable and then never uses it.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_BAD_ARRAY_COMPARE_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_BAD_ARRAY_COMPARE_none</internalKey>
        <description>This method invokes the .equals(Object o) method on an array.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_DONT_DEFINE_EQUALS_FOR_ENUM_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_DONT_DEFINE_EQUALS_FOR_ENUM_none</internalKey>
        <description>This class defines an enumeration, and equality on enumerations are defined using object identity.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_INNER_CLASS_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_INNER_CLASS_none</internalKey>
        <description>This Serializable class is an inner class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BOA_BADLY_OVERRIDDEN_ADAPTER_none</key>
        <name>SpotBugs: Correctness : BOA: Badly Overridden Adapter</name>
        <internalKey>STATIC_JAVA_FB.BOA_BADLY_OVERRIDDEN_ADAPTER_none</internalKey>
        <description>The declared method does not actually override a method from Adapter parent class, as its name suggests.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_NULL_RETURNS_none</key>
        <name>Null pointer dereferences : Dereference null return value</name>
        <internalKey>STATIC_JAVA_NULL_RETURNS_none</internalKey>
        <description>Return value of function which returns null is dereferenced without checking</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_NULL_RETURNS_unimpl</key>
        <name>Null pointer dereferences : Dereference null return (stat)</name>
        <internalKey>STATIC_JAVA_NULL_RETURNS_unimpl</internalKey>
        <description>Return value of function, which is statistically inferred to return null, but with no source code available, is dereferenced</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_ALWAYS_NULL_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_ALWAYS_NULL_none</internalKey>
        <description>A null pointer is dereferenced here.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CD_CIRCULAR_DEPENDENCY_none</key>
        <name>SpotBugs: Dodgy code : CD: Circular Dependencies</name>
        <internalKey>STATIC_JAVA_FB.CD_CIRCULAR_DEPENDENCY_none</internalKey>
        <description>This class has a circular dependency with other classes. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IIO_INEFFICIENT_INDEX_OF_none</key>
        <name>SpotBugs: Performance : IIO: Inefficient use of String.indexOf(String) or String.lastIndexOf(String)</name>
        <internalKey>STATIC_JAVA_FB.IIO_INEFFICIENT_INDEX_OF_none</internalKey>
        <description>This code passes a constant string of length 1 to String.indexOf(). (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SWAPPED_ARGUMENTS_none</key>
        <name>API usage errors : Arguments in wrong order</name>
        <internalKey>STATIC_JAVA_SWAPPED_ARGUMENTS_none</internalKey>
        <description>The arguments to a function call are provided in the wrong order.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_PUBLIC_SHOULD_BE_PROTECTED_none</key>
        <name>SpotBugs: Malicious code vulnerability : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_PUBLIC_SHOULD_BE_PROTECTED_none</internalKey>
        <description>A class&apos;s finalize() method should have protected access, not public.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR_none</key>
        <name>SpotBugs: Correctness : UR: Uninitialized read of field in constructor</name>
        <internalKey>STATIC_JAVA_FB.UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR_none</internalKey>
        <description>This method is invoked in the constructor of the superclass.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_BOXED_PRIMITIVE_TOSTRING_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.DM_BOXED_PRIMITIVE_TOSTRING_none</internalKey>
        <description>A boxed primitive is allocated just to call toString().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.AM_CREATES_EMPTY_JAR_FILE_ENTRY_none</key>
        <name>SpotBugs: Bad practice : AM: API misuse</name>
        <internalKey>STATIC_JAVA_FB.AM_CREATES_EMPTY_JAR_FILE_ENTRY_none</internalKey>
        <description>The code calls putNextEntry(), immediately followed by a call to closeEntry().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES_none</key>
        <name>SpotBugs: Dodgy code : RCN: Redundant comparison to null</name>
        <internalKey>STATIC_JAVA_FB.RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES_none</internalKey>
        <description>This method contains a redundant comparison of two references known to both be definitely null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR_none</internalKey>
        <description>A wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the  b ? e1 : e2 operator).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_COMPARETO_USE_OBJECT_EQUALS_none</key>
        <name>SpotBugs: Bad practice : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_COMPARETO_USE_OBJECT_EQUALS_none</internalKey>
        <description>This class defines a compareTo(...) method but inherits its equals() method from java.lang.Object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_PERMISSION_ON_EXPORTED_COMPONENT_none</key>
        <name>Low impact security : Exporting a component without requiring a permission</name>
        <internalKey>STATIC_JAVA_MISSING_PERMISSION_ON_EXPORTED_COMPONENT_none</internalKey>
        <description>A malicious application can send Intents to this component.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.ANDROID_UNSAFE_MINSDKVERSION_android</key>
        <name>Low impact security : Android application supports unsafe SDK versions</name>
        <internalKey>STATIC_JAVA_CONFIG.ANDROID_UNSAFE_MINSDKVERSION_android</internalKey>
        <description>The application is configured to work on older versions of the Android operating system. These versions contain several vulnerabilities that have not been fixed and are not receiving security updates any more.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.ANDROID_UNSAFE_MINSDKVERSION_none</key>
        <name>Low impact security : Android application supports unsafe SDK versions</name>
        <internalKey>STATIC_JAVA_CONFIG.ANDROID_UNSAFE_MINSDKVERSION_none</internalKey>
        <description>The application is configured to work on older versions of the Android operating system. These versions contain several vulnerabilities that have not been fixed and are not receiving security updates any more.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NONNULL_PARAM_VIOLATION_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NONNULL_PARAM_VIOLATION_none</internalKey>
        <description>This method passes a null value as the parameter of a method which must be non-null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_EXPOSE_REP_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_EXPOSE_REP_none</internalKey>
        <description>A public static method returns a reference to an array that is part of the static state of the class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_OPEN_REDIRECT_none</key>
        <name>Medium impact security : Open redirect</name>
        <internalKey>STATIC_JAVA_OPEN_REDIRECT_none</internalKey>
        <description>User-controlled input is used to specify an address that is used as a URL redirect or forward. An attacker can create a link to the trusted site that redirects to a malicious Web site. This could enable the attacker to steal user credentials.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_ARGUMENT_MIGHT_BE_NULL_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_ARGUMENT_MIGHT_BE_NULL_none</internalKey>
        <description>A parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_USE_AFTER_FREE_none</key>
        <name>API usage errors : Use of freed resources</name>
        <internalKey>STATIC_JAVA_USE_AFTER_FREE_none</internalKey>
        <description>Use of an object after its resources have been released</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK_none</key>
        <name>SpotBugs: Dodgy code : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK_none</internalKey>
        <description>A value is used in a way that requires it to be never be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_ABSOLUTE_VALUE_OF_RANDOM_INT_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_ABSOLUTE_VALUE_OF_RANDOM_INT_none</internalKey>
        <description>This code generates a random signed integer and then computes the absolute value of that random integer.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_FINALIZER_NULLS_FIELDS_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_FINALIZER_NULLS_FIELDS_none</internalKey>
        <description>This finalizer nulls out fields.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_FIELD_SELF_ASSIGNMENT_none</key>
        <name>SpotBugs: Correctness : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_FIELD_SELF_ASSIGNMENT_none</internalKey>
        <description>This method contains a self assignment of a field; e.g.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.STRUTS2_CONFIG_BROWSER_PLUGIN_none</key>
        <name>Low impact security : Struts2 config-browser plugin</name>
        <internalKey>STATIC_JAVA_CONFIG.STRUTS2_CONFIG_BROWSER_PLUGIN_none</internalKey>
        <description>The Struts2 config-browser plugin is present.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_INFERRED_none</key>
        <name>SpotBugs: Dodgy code : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_INFERRED_none</internalKey>
        <description>This code calls a method and ignores the return value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_OVERWRITTEN_INCREMENT_none</key>
        <name>SpotBugs: Correctness : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_OVERWRITTEN_INCREMENT_none</internalKey>
        <description>The code performs an increment operation (e.g., i++) and then immediately overwrites it.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FORWARD_NULL_deref_constant_null</key>
        <name>Null pointer dereferences : Explicit null dereferenced</name>
        <internalKey>STATIC_JAVA_FORWARD_NULL_deref_constant_null</internalKey>
        <description>Dereference of an explicit null value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FORWARD_NULL_deref_constant_zero</key>
        <name>Null pointer dereferences : Explicit null dereferenced</name>
        <internalKey>STATIC_JAVA_FORWARD_NULL_deref_constant_zero</internalKey>
        <description>Dereference of an explicit null value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FORWARD_NULL_needs_null_check</key>
        <name>Null pointer dereferences : Dereference null argument</name>
        <internalKey>STATIC_JAVA_FORWARD_NULL_needs_null_check</internalKey>
        <description>A method parameter that is allowed to be null is dereferenced without a check</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FORWARD_NULL_none</key>
        <name>Null pointer dereferences : Dereference after null check</name>
        <internalKey>STATIC_JAVA_FORWARD_NULL_none</internalKey>
        <description>Reference is checked against null but then dereferenced anyway</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_LCASE_HASHCODE_none</key>
        <name>SpotBugs: Correctness : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_LCASE_HASHCODE_none</internalKey>
        <description>This class defines a method called hashcode().</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION_none</key>
        <name>SpotBugs: Correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION_none</internalKey>
        <description>Unless an annotation has itself been annotated with @Retention(RetentionPolicy.RUNTIME), the annotation can&apos;t be observed using reflection (e.g., by using the isAnnotationPresent method).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN_none</key>
        <name>SpotBugs: Correctness : IP: Ignored parameter</name>
        <internalKey>STATIC_JAVA_FB.IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN_none</internalKey>
        <description>The initial value of this parameter is ignored, and the parameter is overwritten here.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WRONG_METHOD_none</key>
        <name>API usage errors : Wrong method called</name>
        <internalKey>STATIC_JAVA_WRONG_METHOD_none</internalKey>
        <description>Some methods such as Boolean.getBoolean and Integer.getInteger are easily misunderstood to parse their string arguments. Instead, they load a system property named by the argument and parse the property value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IL_INFINITE_LOOP_none</key>
        <name>SpotBugs: Correctness : IL: Infinite Loop</name>
        <internalKey>STATIC_JAVA_FB.IL_INFINITE_LOOP_none</internalKey>
        <description>This loop doesn&apos;t seem to have a way to terminate (other than by perhaps throwing an exception).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_SAME_SIMPLE_NAME_AS_SUPERCLASS_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_SAME_SIMPLE_NAME_AS_SUPERCLASS_none</internalKey>
        <description>This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., alpha.Foo extends beta.Foo).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_TRANSIENT_FIELD_NOT_RESTORED_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_TRANSIENT_FIELD_NOT_RESTORED_none</internalKey>
        <description>This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED_none</internalKey>
        <description>A format-string method with a variable number of arguments is called, but more arguments are passed than are actually used by the format string.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INSECURE_COOKIE_none</key>
        <name>Audit impact security : Cookie without the &apos;Secure&apos; attribute</name>
        <internalKey>STATIC_JAVA_INSECURE_COOKIE_none</internalKey>
        <description>The &apos;Secure&apos; attribute is not set for the cookie.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ME_MUTABLE_ENUM_FIELD_none</key>
        <name>SpotBugs: Bad practice : ME: Mutable enum field</name>
        <internalKey>STATIC_JAVA_FB.ME_MUTABLE_ENUM_FIELD_none</internalKey>
        <description>A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_CLASS_NAMING_CONVENTION_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_CLASS_NAMING_CONVENTION_none</internalKey>
        <description>Class names should be nouns, in mixed case with the first letter of each internal word capitalized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_CONVERSION_none</internalKey>
        <description>One of the arguments is incompatible with the corresponding format string specifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_USE_OF_UNHASHABLE_CLASS_none</key>
        <name>SpotBugs: Correctness : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_USE_OF_UNHASHABLE_CLASS_none</internalKey>
        <description>A class defines an equals(Object) method but not a hashCode() method, and thus doesn&apos;t fulfill the requirement that equal objects have equal hashCodes.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.PZLA_PREFER_ZERO_LENGTH_ARRAYS_none</key>
        <name>SpotBugs: Dodgy code : PZLA: Prefer zero length arrays to null to indicate no results</name>
        <internalKey>STATIC_JAVA_FB.PZLA_PREFER_ZERO_LENGTH_ARRAYS_none</internalKey>
        <description>It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN_none</key>
        <name>SpotBugs: Bad practice : RC: Questionable use of reference equality rather than calling equals</name>
        <internalKey>STATIC_JAVA_FB.RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN_none</internalKey>
        <description>This method compares two Boolean values using the == or != operator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.PS_PUBLIC_SEMAPHORES_none</key>
        <name>SpotBugs: Dodgy code : PS: Public Semaphores</name>
        <internalKey>STATIC_JAVA_FB.PS_PUBLIC_SEMAPHORES_none</internalKey>
        <description>This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this reference).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_PATH_MANIPULATION_none</key>
        <name>High impact security : Filesystem path, filename, or URI manipulation</name>
        <internalKey>STATIC_JAVA_PATH_MANIPULATION_none</internalKey>
        <description>A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier).</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND_none</key>
        <name>SpotBugs: Correctness : ICAST: Casting from integer values</name>
        <internalKey>STATIC_JAVA_FB.ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND_none</internalKey>
        <description>This code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_OPTIONAL_RETURN_NULL_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_OPTIONAL_RETURN_NULL_none</internalKey>
        <description>The usage of Optional return type (java.util.Optional or com.google.common.base.Optional) always means that explicit null returns were not desired by design.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.WMI_WRONG_MAP_ITERATOR_none</key>
        <name>SpotBugs: Performance : WMI: Inefficient Map Iterator</name>
        <internalKey>STATIC_JAVA_FB.WMI_WRONG_MAP_ITERATOR_none</internalKey>
        <description>This method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FE_FLOATING_POINT_EQUALITY_none</key>
        <name>SpotBugs: Dodgy code : FE: Test for floating point equality</name>
        <internalKey>STATIC_JAVA_FB.FE_FLOATING_POINT_EQUALITY_none</internalKey>
        <description>This operation compares two floating point values for equality.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_CLOSING_NULL_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_CLOSING_NULL_none</internalKey>
        <description>close() is being invoked on a value that is always null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE_none</internalKey>
        <description>This code creates a BigDecimal from a double value that doesn&apos;t translate well to a decimal number.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_UNUSUAL_none</key>
        <name>SpotBugs: Dodgy code : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_UNUSUAL_none</internalKey>
        <description>This class doesn&apos;t do any of the patterns we recognize for checking that the type of the argument is compatible with the type of the this object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_TOSTRING_COULD_RETURN_NULL_none</key>
        <name>SpotBugs: Bad practice : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_TOSTRING_COULD_RETURN_NULL_none</internalKey>
        <description>This toString method seems to return null in some circumstances.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.DUPLICATE_SERVLET_DEFINITION_none</key>
        <name>Low impact security : Duplicate servlet name</name>
        <internalKey>STATIC_JAVA_CONFIG.DUPLICATE_SERVLET_DEFINITION_none</internalKey>
        <description>A servlet-name is used twice for different servlets, one of them will not be used by the container.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NONNULL_RETURN_VIOLATION_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NONNULL_RETURN_VIOLATION_none</internalKey>
        <description>This method may return a null value, but the method (or a superclass method which it overrides) is declared to return @Nonnull.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_EQUALS_NO_HASHCODE_none</key>
        <name>SpotBugs: Bad practice : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_EQUALS_NO_HASHCODE_none</internalKey>
        <description>This class overrides equals(Object), but does not override hashCode().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE_none</internalKey>
        <description>There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt; guarantees that a null value will be dereferenced, which would generate a NullPointerException when the code is executed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.WA_AWAIT_NOT_IN_LOOP_none</key>
        <name>SpotBugs: Multithreaded correctness : Wa: Wait not in loop</name>
        <internalKey>STATIC_JAVA_FB.WA_AWAIT_NOT_IN_LOOP_none</internalKey>
        <description>This method contains a call to java.util.concurrent.await() (or variants) which is not in a loop.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_RESTORE_likely</key>
        <name>Control flow issues : Failure to restore non-local value</name>
        <internalKey>STATIC_JAVA_MISSING_RESTORE_likely</internalKey>
        <description>Handles classes of flow where a function is either saving some external value, modifying the external value, and then clearly intending to restore it to its original state but failing to do so along one of many paths; or else is checking whether an external has some expected value, modifying the external value, then clearly intending to restore it to the expected value but failing to do so along a path.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_RESTORE_none</key>
        <name>Control flow issues : Failure to restore non-local value</name>
        <internalKey>STATIC_JAVA_MISSING_RESTORE_none</internalKey>
        <description>Handles classes of flow where a function is either saving some external value, modifying the external value, and then clearly intending to restore it to its original state but failing to do so along one of many paths; or else is checking whether an external has some expected value, modifying the external value, then clearly intending to restore it to the expected value but failing to do so along a path.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_RESTORE_possible</key>
        <name>Possible Control flow issues : Possible failure to restore non-local value</name>
        <internalKey>STATIC_JAVA_MISSING_RESTORE_possible</internalKey>
        <description>Handles classes of flow where a function is either saving some external value, modifying the external value, and then possibly intending to restore it to its original state but not doing so along one of many paths; or else is checking whether an external has some expected value, modifying the external value, then possibly intending to restore it to the expected value but not doing so along a path.  Such code is only incorrect if the intent really was to restore along all paths.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_ARRAY_AND_NONARRAY_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_ARRAY_AND_NONARRAY_none</internalKey>
        <description>This method invokes the .equals(Object o) to compare an array and a reference that doesn&apos;t seem to be an array.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNEXPECTED_CONTROL_FLOW_continue_in_do_while_false</key>
        <name>Control flow issues : Unexpected control flow</name>
        <internalKey>STATIC_JAVA_UNEXPECTED_CONTROL_FLOW_continue_in_do_while_false</internalKey>
        <description>Loop body does not re-execute on &apos;continue&apos; statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNEXPECTED_CONTROL_FLOW_none</key>
        <name>Control flow issues : Unexpected control flow</name>
        <internalKey>STATIC_JAVA_UNEXPECTED_CONTROL_FLOW_none</internalKey>
        <description>Loop body does not re-execute on &apos;continue&apos; statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DE_MIGHT_DROP_none</key>
        <name>SpotBugs: Bad practice : DE: Dropped or ignored exception</name>
        <internalKey>STATIC_JAVA_FB.DE_MIGHT_DROP_none</internalKey>
        <description>This method might drop an exception.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IIO_INEFFICIENT_LAST_INDEX_OF_none</key>
        <name>SpotBugs: Performance : IIO: Inefficient use of String.indexOf(String) or String.lastIndexOf(String)</name>
        <internalKey>STATIC_JAVA_FB.IIO_INEFFICIENT_LAST_INDEX_OF_none</internalKey>
        <description>This code passes a constant string of length 1 to String.lastIndexOf(). (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY_none</key>
        <name>SpotBugs: Correctness : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY_none</internalKey>
        <description>This cast will always throw a ClassCastException. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UG_SYNC_SET_UNSYNC_GET_none</key>
        <name>SpotBugs: Multithreaded correctness : UG: Unsynchronized get method, synchronized set method</name>
        <internalKey>STATIC_JAVA_FB.UG_SYNC_SET_UNSYNC_GET_none</internalKey>
        <description>This class contains similarly-named get and set methods where the set method is synchronized and the get method is not.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_UNRELATED_TYPES_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_UNRELATED_TYPES_none</internalKey>
        <description>This method calls equals(Object) on two references of different class types and analysis suggests they will be to objects of different classes at runtime.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.LI_LAZY_INIT_INSTANCE_none</key>
        <name>SpotBugs: Multithreaded correctness : LI: Unsynchronized Lazy Initialization</name>
        <internalKey>STATIC_JAVA_FB.LI_LAZY_INIT_INSTANCE_none</internalKey>
        <description>This method contains an unsynchronized lazy initialization of a non-volatile field. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_GC_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_GC_none</internalKey>
        <description>Code explicitly invokes garbage collection.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_EXIT_none</key>
        <name>SpotBugs: Bad practice : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_EXIT_none</internalKey>
        <description>Invoking System.exit shuts down the entire Java virtual machine.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ORM_LOST_UPDATE_none</key>
        <name>API usage errors : ORM persistence error</name>
        <internalKey>STATIC_JAVA_ORM_LOST_UPDATE_none</internalKey>
        <description>New or modified objects are not persisted.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_NEGATING_RESULT_OF_COMPARETO_none</key>
        <name>SpotBugs: Bad practice : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_NEGATING_RESULT_OF_COMPARETO_none</internalKey>
        <description>This code negatives the return value of a compareTo or compare method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_IOR_OF_SIGNED_BYTE_none</key>
        <name>SpotBugs: Correctness : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_IOR_OF_SIGNED_BYTE_none</internalKey>
        <description>Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_METHOD_NAMING_CONVENTION_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_METHOD_NAMING_CONVENTION_none</internalKey>
        <description>Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY_none</key>
        <name>SpotBugs: Correctness : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY_none</internalKey>
        <description>This code is casting the result of calling toArray() on a collection to a type more specific than Object[].</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_STORE_INTO_NONNULL_FIELD_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_STORE_INTO_NONNULL_FIELD_none</internalKey>
        <description>A value that could be null is stored into a field that has been annotated as @Nonnull.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UOE_USE_OBJECT_EQUALS_none</key>
        <name>SpotBugs: Dodgy code : UOE: Use Object Equals</name>
        <internalKey>STATIC_JAVA_FB.UOE_USE_OBJECT_EQUALS_none</internalKey>
        <description>This method invokes the .equals(Object o) method on a final class that doesn&apos;t override the equals method in the Object class, effectively making the equals method test for sameness, like ==. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_BAD_CAST_TO_CONCRETE_COLLECTION_none</key>
        <name>SpotBugs: Dodgy code : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_BAD_CAST_TO_CONCRETE_COLLECTION_none</internalKey>
        <description>This code casts an abstract collection (such as a Collection, List, or Set) to a specific concrete implementation (such as an ArrayList or HashSet).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED_none</key>
        <name>SpotBugs: Multithreaded correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED_none</internalKey>
        <description>The putIfAbsent method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW_none</key>
        <name>SpotBugs: Correctness : SF: Switch case falls through</name>
        <internalKey>STATIC_JAVA_FB.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW_none</internalKey>
        <description>A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNINTENDED_INTEGER_DIVISION_none</key>
        <name>Incorrect expression : Result is not floating-point</name>
        <internalKey>STATIC_JAVA_UNINTENDED_INTEGER_DIVISION_none</internalKey>
        <description>When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MSF_MUTABLE_SERVLET_FIELD_none</key>
        <name>SpotBugs: Multithreaded correctness : MSF: Mutable servlet field</name>
        <internalKey>STATIC_JAVA_FB.MSF_MUTABLE_SERVLET_FIELD_none</internalKey>
        <description>A web server generally only creates one instance of servlet or JSP class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CO_COMPARETO_RESULTS_MIN_VALUE_none</key>
        <name>SpotBugs: Bad practice : Co: Problems with implementation of compareTo()</name>
        <internalKey>STATIC_JAVA_FB.CO_COMPARETO_RESULTS_MIN_VALUE_none</internalKey>
        <description>In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_NULLIFY_SUPER_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_NULLIFY_SUPER_none</internalKey>
        <description>This empty finalize() method explicitly negates the effect of any finalizer defined by its superclass.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SBSC_USE_STRINGBUFFER_CONCATENATION_none</key>
        <name>SpotBugs: Performance : SBSC: String concatenation in loop using + operator</name>
        <internalKey>STATIC_JAVA_FB.SBSC_USE_STRINGBUFFER_CONCATENATION_none</internalKey>
        <description>The method seems to be building a String using concatenation in a loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.STI_INTERRUPTED_ON_UNKNOWNTHREAD_none</key>
        <name>SpotBugs: Correctness : STI: Suspicious Thread Interrupted</name>
        <internalKey>STATIC_JAVA_FB.STI_INTERRUPTED_ON_UNKNOWNTHREAD_none</internalKey>
        <description>This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.WS_WRITEOBJECT_SYNC_none</key>
        <name>SpotBugs: Multithreaded correctness : WS: Class&apos;s writeObject() method is synchronized but nothing else is</name>
        <internalKey>STATIC_JAVA_FB.WS_WRITEOBJECT_SYNC_none</internalKey>
        <description>This class has a writeObject() method which is synchronized; however, no other method of the class is synchronized.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.CORDOVA_EXCESSIVE_LOGGING_cordova</key>
        <name>Low impact security : Cordova Excessive Log Level</name>
        <internalKey>STATIC_JAVA_CONFIG.CORDOVA_EXCESSIVE_LOGGING_cordova</internalKey>
        <description>The Cordova application has been configured to create excessive logs using a DEBUG or VERBOSE log level.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.CORDOVA_EXCESSIVE_LOGGING_none</key>
        <name>Low impact security : Cordova Excessive Log Level</name>
        <internalKey>STATIC_JAVA_CONFIG.CORDOVA_EXCESSIVE_LOGGING_none</internalKey>
        <description>The Cordova application has been configured to create excessive logs using a DEBUG or VERBOSE log level.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD_none</key>
        <name>SpotBugs: Dodgy code : IA: Ambiguous invocation</name>
        <internalKey>STATIC_JAVA_FB.IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD_none</internalKey>
        <description>An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_JCR_INJECTION_none</key>
        <name>Medium impact security : Content Repository for Java injection</name>
        <internalKey>STATIC_JAVA_JCR_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into a Content Repository for Java query.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IJU_BAD_SUITE_METHOD_none</key>
        <name>SpotBugs: Correctness : IJU: Improperly implemented JUnit TestCase</name>
        <internalKey>STATIC_JAVA_FB.IJU_BAD_SUITE_METHOD_none</internalKey>
        <description>Class is a JUnit TestCase and defines a suite() method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_SYNC_AND_NULL_CHECK_FIELD_none</key>
        <name>SpotBugs: Multithreaded correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_SYNC_AND_NULL_CHECK_FIELD_none</internalKey>
        <description>Since the field is synchronized on, it seems not likely to be null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_TRUST_BOUNDARY_VIOLATION_none</key>
        <name>Low impact security : Trust boundary violation</name>
        <internalKey>STATIC_JAVA_TRUST_BOUNDARY_VIOLATION_none</internalKey>
        <description>A user-controllable string is stored in a trusted data structure.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_USELESS_SUBSTRING_none</key>
        <name>SpotBugs: Dodgy code : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_USELESS_SUBSTRING_none</internalKey>
        <description>This code invokes substring(0) on a String, which returns the original value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_OGNL_INJECTION_none</key>
        <name>High impact security : OGNL injection</name>
        <internalKey>STATIC_JAVA_OGNL_INJECTION_none</internalKey>
        <description>A user-controllable string is evaluated by an OGNL resolver.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_NOSQL_QUERY_INJECTION_none</key>
        <name>Medium impact security : NoSQL query injection</name>
        <internalKey>STATIC_JAVA_NOSQL_QUERY_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into a NoSQL query.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SR_NOT_CHECKED_none</key>
        <name>SpotBugs: Bad practice : RR: Method ignores results of InputStream.read()</name>
        <internalKey>STATIC_JAVA_FB.SR_NOT_CHECKED_none</internalKey>
        <description>This method ignores the return value of java.io.InputStream.skip() which can skip multiple bytes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED2_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED2_none</internalKey>
        <description>The return value of this method should be checked.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.OBL_UNSATISFIED_OBLIGATION_none</key>
        <name>SpotBugs: Experimental : OBL: Unsatisfied obligation to clean up stream or resource</name>
        <internalKey>STATIC_JAVA_FB.OBL_UNSATISFIED_OBLIGATION_none</internalKey>
        <description>This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an explicit cleanup operation. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEDGED_none</key>
        <name>SpotBugs: Bad practice : DP: Use doPrivileged</name>
        <internalKey>STATIC_JAVA_FB.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEDGED_none</internalKey>
        <description>This code creates a classloader, which requires a security manager. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NN_NAKED_NOTIFY_none</key>
        <name>SpotBugs: Multithreaded correctness : NN: Naked notify</name>
        <internalKey>STATIC_JAVA_FB.NN_NAKED_NOTIFY_none</internalKey>
        <description>A call to notify() or notifyAll() was made without any (apparent) accompanying modification to mutable object state.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RS_READOBJECT_SYNC_none</key>
        <name>SpotBugs: Multithreaded correctness : RS: Class&apos;s readObject() method is synchronized</name>
        <internalKey>STATIC_JAVA_FB.RS_READOBJECT_SYNC_none</internalKey>
        <description>This serializable class defines a readObject() which is synchronized.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_USELESS_CALL_none</key>
        <name>Incorrect expression : Useless call</name>
        <internalKey>STATIC_JAVA_USELESS_CALL_none</internalKey>
        <description>A function is called that is only useful for its return value, and this value is ignored.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.DWR_DEBUG_MODE_none</key>
        <name>Low impact security : DWR debug mode enabled</name>
        <internalKey>STATIC_JAVA_CONFIG.DWR_DEBUG_MODE_none</internalKey>
        <description>DWR debug mode is enabled in the configuration file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EI_EXPOSE_REP_none</key>
        <name>SpotBugs: Malicious code vulnerability : EI: Exposes internal representation</name>
        <internalKey>STATIC_JAVA_FB.EI_EXPOSE_REP_none</internalKey>
        <description>Returning a reference to a mutable object value stored in one of the object&apos;s fields exposes the internal representation of the object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_BOXED_PRIMITIVE_FOR_PARSING_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.DM_BOXED_PRIMITIVE_FOR_PARSING_none</internalKey>
        <description>A boxed primitive is created from a String, just to extract the unboxed primitive value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_SAME_SIMPLE_NAME_AS_INTERFACE_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_SAME_SIMPLE_NAME_AS_INTERFACE_none</internalKey>
        <description>This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., alpha.Foo extends beta.Foo).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_LOCK_INVERSION_none</key>
        <name>Program hangs : Thread deadlock</name>
        <internalKey>STATIC_JAVA_LOCK_INVERSION_none</internalKey>
        <description>Threads may try to acquire two locks in different orders, potentially causing deadlock</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_MUTABLE_COLLECTION_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_MUTABLE_COLLECTION_none</internalKey>
        <description>A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RR_NOT_CHECKED_none</key>
        <name>SpotBugs: Bad practice : RR: Method ignores results of InputStream.read()</name>
        <internalKey>STATIC_JAVA_FB.RR_NOT_CHECKED_none</internalKey>
        <description>This method ignores the return value of one of the variants of java.io.InputStream.read() which can return multiple bytes.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK_none</key>
        <name>SpotBugs: Dodgy code : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK_none</internalKey>
        <description>A value is used in a way that requires it to be always be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_SHIFT_none</key>
        <name>Integer handling issues : Bad bit shift operation</name>
        <internalKey>STATIC_JAVA_BAD_SHIFT_none</internalKey>
        <description>A bit shift operation has a shift amount which is too large or has a negative value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IM_MULTIPLYING_RESULT_OF_IREM_none</key>
        <name>SpotBugs: Correctness : IM: Questionable integer math</name>
        <internalKey>STATIC_JAVA_FB.IM_MULTIPLYING_RESULT_OF_IREM_none</internalKey>
        <description>The code multiplies the result of an integer remaining by an integer constant.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_URL_MANIPULATION_bad_content_uri</key>
        <name>Low impact security : URL manipulation</name>
        <internalKey>STATIC_JAVA_URL_MANIPULATION_bad_content_uri</internalKey>
        <description>A user-controllable Uri is used to resolve which content provider will be accessed or modified by the ContentResolver.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_URL_MANIPULATION_bad_intent_uri</key>
        <name>Low impact security : URL manipulation</name>
        <internalKey>STATIC_JAVA_URL_MANIPULATION_bad_intent_uri</internalKey>
        <description>A user-controllable Uri is used to create a new Intent.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_URL_MANIPULATION_bad_web_uri</key>
        <name>Medium impact security : URL manipulation</name>
        <internalKey>STATIC_JAVA_URL_MANIPULATION_bad_web_uri</internalKey>
        <description>A user-controllable string is used to specify a URL that is used in a connection. An attacker can modify the URL scheme to access a local file. An attacker can also mount a phishing attack by modifying the URL value to point to a malicious website.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_URL_MANIPULATION_none</key>
        <name>Medium impact security : URL manipulation</name>
        <internalKey>STATIC_JAVA_URL_MANIPULATION_none</internalKey>
        <description>A user-controllable string is used to specify a URL that is used in a connection. An attacker can modify the URL scheme to access a local file. An attacker can also mount a phishing attack by modifying the URL value to point to a malicious website.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION_none</internalKey>
        <description>A method should always implement the contract of a method it overrides.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD_none</internalKey>
        <description>The program is dereferencing a public or protected field that does not seem to ever have a non-null value written to it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_FP_NUMBER_CTOR_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.DM_FP_NUMBER_CTOR_none</internalKey>
        <description>Using new Double(double) is guaranteed to always result in a new object whereas Double.valueOf(double) allows caching of values to be done by the compiler, class library, or JVM.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_BAD_EQUAL_none</key>
        <name>SpotBugs: Correctness : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_BAD_EQUAL_none</internalKey>
        <description>This class defines a method equal(Object).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.SPRING_SECURITY_DEBUG_MODE_none</key>
        <name>Low impact security : Spring Security debug mode enabled</name>
        <internalKey>STATIC_JAVA_CONFIG.SPRING_SECURITY_DEBUG_MODE_none</internalKey>
        <description>Spring Security is used with debug mode enabled.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CNT_ROUGH_CONSTANT_VALUE_none</key>
        <name>SpotBugs: Bad practice : CNT: Rough value of known constant</name>
        <internalKey>STATIC_JAVA_FB.CNT_ROUGH_CONSTANT_VALUE_none</internalKey>
        <description>It&apos;s recommended to use the predefined library constant for code clarity and better precision.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_INVALID_MIN_MAX_none</key>
        <name>SpotBugs: Correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_INVALID_MIN_MAX_none</internalKey>
        <description>This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_NEW_FOR_GETCLASS_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_NEW_FOR_GETCLASS_none</internalKey>
        <description>This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_PASSWORD_HASH_none</key>
        <name>High impact security : Weak password hashing</name>
        <internalKey>STATIC_JAVA_WEAK_PASSWORD_HASH_none</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive, and/or without using a random and unique salt as part of the input.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_hash</key>
        <name>Medium impact security : Hashing a password with a weak hash function</name>
        <internalKey>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_hash</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_hash_no_salt</key>
        <name>High impact security : Very weak password hashing</name>
        <internalKey>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_hash_no_salt</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive, and without using any salt as part of the input.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_hash_weak_salt</key>
        <name>High impact security : Weak password hashing</name>
        <internalKey>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_hash_weak_salt</internalKey>
        <description>Hashing a password using a scheme that is not computationally intensive, and without using a random and unique salt as part of the input.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_salt</key>
        <name>Low impact security : Hashing a password with a weak salt</name>
        <internalKey>STATIC_JAVA_WEAK_PASSWORD_HASH_weak_salt</internalKey>
        <description>Hashing a password without using a random and unique salt as part of the input.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION_none</key>
        <name>SpotBugs: Correctness : RE: Regular expressions</name>
        <internalKey>STATIC_JAVA_FB.RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION_none</internalKey>
        <description>The code here uses File.separator where a regular expression is required.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_VERY_CONFUSING_INTENTIONAL_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_VERY_CONFUSING_INTENTIONAL_none</internalKey>
        <description>The referenced methods have names that differ only by capitalization.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS_none</key>
        <name>SpotBugs: Bad practice : JCIP: Violation of net.jcip annotations</name>
        <internalKey>STATIC_JAVA_FB.JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS_none</internalKey>
        <description>The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable, and the rules for those annotations require that all fields are final.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_LOCAL_SELF_COMPARISON_none</key>
        <name>SpotBugs: Correctness : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_LOCAL_SELF_COMPARISON_none</internalKey>
        <description>This method compares a local variable with itself, and may indicate a typo or a logic error.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE_none</internalKey>
        <description>This parameter is always used in a way that requires it to be non-null, but the parameter is explicitly annotated as being Nullable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RANGE_ARRAY_LENGTH_none</key>
        <name>SpotBugs: Correctness : RANGE: Range checks</name>
        <internalKey>STATIC_JAVA_FB.RANGE_ARRAY_LENGTH_none</internalKey>
        <description>Method is called with array parameter and length parameter, but the length is out of bounds.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_PROPERTY_MIXUP_none</key>
        <name>Incorrect expression : Property getter or setter mixup</name>
        <internalKey>STATIC_JAVA_PROPERTY_MIXUP_none</internalKey>
        <description>This method appears to be getting or setting the wrong member.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER_none</key>
        <name>SpotBugs: Correctness : FE: Test for floating point equality</name>
        <internalKey>STATIC_JAVA_FB.FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER_none</internalKey>
        <description>This code checks to see if a floating point value is equal to the special Not A Number value (e.g., if (x == Double.NaN)).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE_none</key>
        <name>SpotBugs: Dodgy code : RCN: Redundant comparison to null</name>
        <internalKey>STATIC_JAVA_FB.RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE_none</internalKey>
        <description>This method contains a redundant check of a known non-null value against the constant null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_INT_2_LONG_AS_INSTANT_none</key>
        <name>SpotBugs: Correctness : ICAST: Casting from integer values</name>
        <internalKey>STATIC_JAVA_FB.ICAST_INT_2_LONG_AS_INSTANT_none</internalKey>
        <description>This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_DEFAULT_ENCODING_none</key>
        <name>SpotBugs: Internationalization : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_DEFAULT_ENCODING_none</internalKey>
        <description>Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ME_ENUM_FIELD_SETTER_none</key>
        <name>SpotBugs: Bad practice : ME: Mutable enum field</name>
        <internalKey>STATIC_JAVA_FB.ME_ENUM_FIELD_SETTER_none</internalKey>
        <description>This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_none</key>
        <name>SpotBugs: Performance : SIC: Inner class could be made static</name>
        <internalKey>STATIC_JAVA_FB.SIC_INNER_SHOULD_BE_STATIC_none</internalKey>
        <description>This class is an inner class, but does not use its embedded reference to the object which created it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.JLM_JSR166_UTILCONCURRENT_MONITORENTER_none</key>
        <name>SpotBugs: Multithreaded correctness : JLM: Synchronization on java.util.concurrent objects</name>
        <internalKey>STATIC_JAVA_FB.JLM_JSR166_UTILCONCURRENT_MONITORENTER_none</internalKey>
        <description>This method performs synchronization an object that is an instance of a class from the java.util.concurrent package (or its subclasses).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY_none</key>
        <name>SpotBugs: Correctness : USELESS_STRING: Useless/non-informative string generated</name>
        <internalKey>STATIC_JAVA_FB.DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY_none</internalKey>
        <description>The code invokes toString on an (anonymous) array.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION_none</key>
        <name>SpotBugs: Bad practice : J2EE: J2EE error</name>
        <internalKey>STATIC_JAVA_FB.J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION_none</internalKey>
        <description>This code seems to be storing a non-serializable object into an HttpSession.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_LOCK_OBJECT_boxed_lock</key>
        <name>Unreliable locking behavior : Bad choice of lock object</name>
        <internalKey>STATIC_JAVA_BAD_LOCK_OBJECT_boxed_lock</internalKey>
        <description>Using a boxed primitive as a lock may cause different locking behavior in different versions of the Java VM. locking behavior. It can also cause deadlocks or performance problems if a library also uses the boxed primitive as a lock.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_LOCK_OBJECT_interned_string_lock</key>
        <name>Concurrent data access violations : Bad choice of lock object</name>
        <internalKey>STATIC_JAVA_BAD_LOCK_OBJECT_interned_string_lock</internalKey>
        <description>Using an interned string as a lock may cause deadlocks or performance problems if a library also uses the interned string as a lock.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_LOCK_OBJECT_none</key>
        <name>Concurrent data access violations : Bad choice of lock object</name>
        <internalKey>STATIC_JAVA_BAD_LOCK_OBJECT_none</internalKey>
        <description>Locking upon an object which is a poor choice due to too broad, too narrow, or too unpredictable aliasing behavior.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_LOCK_OBJECT_single_thread_lock</key>
        <name>Unreliable locking behavior : Bad choice of lock object</name>
        <internalKey>STATIC_JAVA_BAD_LOCK_OBJECT_single_thread_lock</internalKey>
        <description>Using an object which is only accessible to a single thread as a lock provides no protection against race conditions.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_LOCK_OBJECT_unsafe_assign_to_locked_field</key>
        <name>Unreliable locking behavior : Bad choice of lock object</name>
        <internalKey>STATIC_JAVA_BAD_LOCK_OBJECT_unsafe_assign_to_locked_field</internalKey>
        <description>The field used as a lock can be assigned a different value while the critical section is operating. This can cause multiple threads to enter the critical section at the same time, which may cause nondeterministic behavior.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.INT_BAD_COMPARISON_WITH_SIGNED_BYTE_none</key>
        <name>SpotBugs: Correctness : INT: Suspicious integer expression</name>
        <internalKey>STATIC_JAVA_FB.INT_BAD_COMPARISON_WITH_SIGNED_BYTE_none</internalKey>
        <description>Signed bytes can only have a value in the range -128 to 127.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IM_BAD_CHECK_FOR_ODD_none</key>
        <name>SpotBugs: Dodgy code : IM: Questionable integer math</name>
        <internalKey>STATIC_JAVA_FB.IM_BAD_CHECK_FOR_ODD_none</internalKey>
        <description>The code uses x % 2 == 1 to check to see if a value is odd, but this won&apos;t work for negative numbers (e.g., (-5) % 2 == -1).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RANGE_STRING_INDEX_none</key>
        <name>SpotBugs: Correctness : RANGE: Range checks</name>
        <internalKey>STATIC_JAVA_FB.RANGE_STRING_INDEX_none</internalKey>
        <description>String method is called and specified string index is out of bounds.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UC_USELESS_OBJECT_STACK_none</key>
        <name>SpotBugs: Dodgy code : UC: Useless code</name>
        <internalKey>STATIC_JAVA_FB.UC_USELESS_OBJECT_STACK_none</internalKey>
        <description>This object is created just to perform some modifications which don&apos;t have any side-effect.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_NULL_ARG_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_NULL_ARG_none</internalKey>
        <description>This method calls equals(Object), passing a null value as the argument.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RU_INVOKE_RUN_none</key>
        <name>SpotBugs: Multithreaded correctness : Ru: Method invokes run()</name>
        <internalKey>STATIC_JAVA_FB.RU_INVOKE_RUN_none</internalKey>
        <description>This method explicitly invokes run() on an object.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNREACHABLE_none</key>
        <name>Control flow issues : Structurally dead code</name>
        <internalKey>STATIC_JAVA_UNREACHABLE_none</internalKey>
        <description>Code block is unreachable because of the syntactic structure of the code</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_IOR_none</key>
        <name>SpotBugs: Correctness : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_IOR_none</internalKey>
        <description>This method compares an expression of the form (e | C) to D, which will always compare unequal due to the specific values of constants C and D.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ISC_INSTANTIATE_STATIC_CLASS_none</key>
        <name>SpotBugs: Bad practice : ISC: Instantiated Static Class</name>
        <internalKey>STATIC_JAVA_FB.ISC_INSTANTIATE_STATIC_CLASS_none</internalKey>
        <description>This class allocates an object that is based on a class that only supplies static methods.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NOISE_NULL_DEREFERENCE_none</key>
        <name>SpotBugs: Bogus random noise : NOISE: Bogus random warning</name>
        <internalKey>STATIC_JAVA_FB.NOISE_NULL_DEREFERENCE_none</internalKey>
        <description>Bogus warning.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RISKY_CRYPTO_custom</key>
        <name>Medium impact security : Violation of user-specified RISKY_CRYPTO policy</name>
        <internalKey>STATIC_JAVA_RISKY_CRYPTO_custom</internalKey>
        <description>A cryptographic function was used in such a way as to violate the user-specified RISKY_CRYPTO policy. This violation may indicate that an attacker could decrypt or otherwise interfere with the encrypted or hashed data.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RISKY_CRYPTO_hashing</key>
        <name>Medium impact security : Risky cryptographic hashing function</name>
        <internalKey>STATIC_JAVA_RISKY_CRYPTO_hashing</internalKey>
        <description>A risky hashing function was used. This may allow an attacker to produce collisions on the hash or execute length extension attacks.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RISKY_CRYPTO_none</key>
        <name>Medium impact security : Risky cryptographic function</name>
        <internalKey>STATIC_JAVA_RISKY_CRYPTO_none</internalKey>
        <description>A risky cryptographic function was used. This may allow an attacker to decrypt encrypted data as the quality of the cryptographic protection is suspect.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_RISKY_CRYPTO_ssl_protocol</key>
        <name>Medium impact security : Risky cryptographic SSL protocol</name>
        <internalKey>STATIC_JAVA_RISKY_CRYPTO_ssl_protocol</internalKey>
        <description>A Secure Sockets Layer (SSL) protocol was enabled that is known to be insecure. This may allow an attacker to decrypt or extract sensitive data that is transmitted over the network.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_CONFUSING_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_CONFUSING_none</internalKey>
        <description>The referenced methods have names that differ only by capitalization.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNKNOWN_LANGUAGE_INJECTION_none</key>
        <name>Low impact security : Unknown language injection</name>
        <internalKey>STATIC_JAVA_UNKNOWN_LANGUAGE_INJECTION_none</internalKey>
        <description>A user-controllable string is parsed using a parser generator that is used to create new languages or grammars.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_DEREFERENCE_OF_READLINE_VALUE_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_DEREFERENCE_OF_READLINE_VALUE_none</internalKey>
        <description>The result of invoking readLine() is dereferenced without checking to see if the result is null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_IDIV_CAST_TO_DOUBLE_none</key>
        <name>SpotBugs: Dodgy code : ICAST: Casting from integer values</name>
        <internalKey>STATIC_JAVA_FB.ICAST_IDIV_CAST_TO_DOUBLE_none</internalKey>
        <description>This code casts the result of an integral division (e.g., int or long division) operation to double or float.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_USELESS_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_USELESS_none</internalKey>
        <description>The only thing this finalize() method does is call the superclass&apos;s finalize() method, making it redundant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.STCAL_STATIC_CALENDAR_INSTANCE_none</key>
        <name>SpotBugs: Multithreaded correctness : STCAL: Static use of type Calendar or DateFormat</name>
        <internalKey>STATIC_JAVA_FB.STCAL_STATIC_CALENDAR_INSTANCE_none</internalKey>
        <description>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SIC_THREADLOCAL_DEADLY_EMBRACE_none</key>
        <name>SpotBugs: Correctness : SIC: Inner class could be made static</name>
        <internalKey>STATIC_JAVA_FB.SIC_THREADLOCAL_DEADLY_EMBRACE_none</internalKey>
        <description>This class is an inner class, but should probably be a static inner class.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UW_UNCOND_WAIT_none</key>
        <name>SpotBugs: Multithreaded correctness : UW: Unconditional wait</name>
        <internalKey>STATIC_JAVA_FB.UW_UNCOND_WAIT_none</internalKey>
        <description>This method contains a call to java.lang.Object.wait() which is not guarded by conditional control flow.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CN_IDIOM_NO_SUPER_CALL_none</key>
        <name>SpotBugs: Bad practice : CN: Bad implementation of cloneable idiom</name>
        <internalKey>STATIC_JAVA_FB.CN_IDIOM_NO_SUPER_CALL_none</internalKey>
        <description>This non-final class defines a clone() method that does not call super.clone().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNRESTRICTED_DISPATCH_none</key>
        <name>Medium impact security : Unrestricted dispatch</name>
        <internalKey>STATIC_JAVA_UNRESTRICTED_DISPATCH_none</internalKey>
        <description>A user-controllable string is used as a servlet dispatch path.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_STRAY_SEMICOLON_none</key>
        <name>Control flow issues : Stray semicolon</name>
        <internalKey>STATIC_JAVA_STRAY_SEMICOLON_none</internalKey>
        <description>The code contains a semicolon where it is probably not intended, such as between a &apos;for&apos;, &apos;while&apos;, or &apos;if&apos; and a code block.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_IN_RETURN_none</key>
        <name>SpotBugs: Dodgy code : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_IN_RETURN_none</internalKey>
        <description>This statement assigns to a local variable in a return statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MF_METHOD_MASKS_FIELD_none</key>
        <name>SpotBugs: Correctness : MF: Masked Field</name>
        <internalKey>STATIC_JAVA_FB.MF_METHOD_MASKS_FIELD_none</internalKey>
        <description>This method defines a local variable with the same name as a field in this class or a superclass.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER_none</internalKey>
        <description>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IL_INFINITE_RECURSIVE_LOOP_none</key>
        <name>SpotBugs: Correctness : IL: Infinite Loop</name>
        <internalKey>STATIC_JAVA_FB.IL_INFINITE_RECURSIVE_LOOP_none</internalKey>
        <description>This method unconditionally invokes itself.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ODR_OPEN_DATABASE_RESOURCE_none</key>
        <name>SpotBugs: Bad practice : ODR: Database resource not closed on all paths</name>
        <internalKey>STATIC_JAVA_FB.ODR_OPEN_DATABASE_RESOURCE_none</internalKey>
        <description>The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_EMPTY_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_EMPTY_none</internalKey>
        <description>Empty finalize() methods are useless, so they should be deleted.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_COPY_PASTE_ERROR_none</key>
        <name>Incorrect expression : Copy-paste error</name>
        <internalKey>STATIC_JAVA_COPY_PASTE_ERROR_none</internalKey>
        <description>A copied piece of code is inconsistent with the original</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DC.DANGEROUS_none</key>
        <name>Low impact security : Call to an inherently dangerous function</name>
        <internalKey>STATIC_JAVA_DC.DANGEROUS_none</internalKey>
        <description>Calling an inherently dangerous function for which better alternatives exist.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_NESTING_INDENT_MISMATCH_bad_indentation</key>
        <name>Code maintainability issues : Indentation does not match nesting level</name>
        <internalKey>STATIC_JAVA_NESTING_INDENT_MISMATCH_bad_indentation</internalKey>
        <description>The indentation of this code does not reflect its syntactic nesting level.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_NESTING_INDENT_MISMATCH_none</key>
        <name>Control flow issues : Nesting level does not match indentation</name>
        <internalKey>STATIC_JAVA_NESTING_INDENT_MISMATCH_none</internalKey>
        <description>The indentation of this code suggests it is nested when it is not.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_ARGUMENT_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_BAD_ARGUMENT_none</internalKey>
        <description>The format string placeholder is incompatible with the corresponding argument.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DE_MIGHT_IGNORE_none</key>
        <name>SpotBugs: Bad practice : DE: Dropped or ignored exception</name>
        <internalKey>STATIC_JAVA_FB.DE_MIGHT_IGNORE_none</internalKey>
        <description>This method might ignore an exception.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.LI_LAZY_INIT_UPDATE_STATIC_none</key>
        <name>SpotBugs: Multithreaded correctness : LI: Unsynchronized Lazy Initialization</name>
        <internalKey>STATIC_JAVA_FB.LI_LAZY_INIT_UPDATE_STATIC_none</internalKey>
        <description>This method contains an unsynchronized lazy initialization of a static field.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_VOLATILE_ATOMICITY_compare</key>
        <name>Concurrent data access violations : Volatile not atomically updated</name>
        <internalKey>STATIC_JAVA_VOLATILE_ATOMICITY_compare</internalKey>
        <description>A volatile variable is updated in a non-atomic manner</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_VOLATILE_ATOMICITY_none</key>
        <name>Concurrent data access violations : Volatile not atomically updated</name>
        <internalKey>STATIC_JAVA_VOLATILE_ATOMICITY_none</internalKey>
        <description>A volatile variable is updated in a non-atomic manner</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_VOLATILE_ATOMICITY_semantic</key>
        <name>Concurrent data access violations : Volatile not atomically updated</name>
        <internalKey>STATIC_JAVA_VOLATILE_ATOMICITY_semantic</internalKey>
        <description>A volatile variable is updated in a non-atomic manner</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_VOLATILE_ATOMICITY_threshold</key>
        <name>Concurrent data access violations : Volatile not atomically updated</name>
        <internalKey>STATIC_JAVA_VOLATILE_ATOMICITY_threshold</internalKey>
        <description>A volatile variable is updated in a non-atomic manner</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_CALLING_NEXT_FROM_HASNEXT_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_CALLING_NEXT_FROM_HASNEXT_none</internalKey>
        <description>The hasNext() method invokes the next() method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.MISSING_JSF2_SECURITY_CONSTRAINT_none</key>
        <name>Low impact security : Missing Facelet security constraint</name>
        <internalKey>STATIC_JAVA_CONFIG.MISSING_JSF2_SECURITY_CONSTRAINT_none</internalKey>
        <description>The JSF2 web application does not define a security constraint that restricts access to Facelet source code.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.URF_UNREAD_FIELD_none</key>
        <name>SpotBugs: Performance : UrF: Unread field</name>
        <internalKey>STATIC_JAVA_FB.URF_UNREAD_FIELD_none</internalKey>
        <description>This field is never read.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD_none</key>
        <name>SpotBugs: Dodgy code : UwF: Unwritten field</name>
        <internalKey>STATIC_JAVA_FB.UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD_none</internalKey>
        <description>No writes were seen to this public/protected field.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_STRING_VOID_CTOR_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_STRING_VOID_CTOR_none</internalKey>
        <description>Creating a new java.lang.String object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant &quot;&quot;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER_none</key>
        <name>SpotBugs: Security : HRS: HTTP Response splitting vulnerability</name>
        <internalKey>STATIC_JAVA_FB.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER_none</internalKey>
        <description>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting vulnerability.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UWF_NULL_FIELD_none</key>
        <name>SpotBugs: Correctness : UwF: Unwritten field</name>
        <internalKey>STATIC_JAVA_FB.UWF_NULL_FIELD_none</internalKey>
        <description>All writes to this field are of the constant value null, and thus all reads of the field will return null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.HTTP_VERB_TAMPERING_none</key>
        <name>Medium impact security : HTTP Verb Tampering</name>
        <internalKey>STATIC_JAVA_CONFIG.HTTP_VERB_TAMPERING_none</internalKey>
        <description>The web application is vulnerable to HTTP Verb Tampering attack.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.DYNAMIC_DATA_HTML_COMMENT_none</key>
        <name>Low impact security : Dynamic data in HTML comment</name>
        <internalKey>STATIC_JAVA_CONFIG.DYNAMIC_DATA_HTML_COMMENT_none</internalKey>
        <description>Dynamic data is output in HTML comments.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BRSA_BAD_RESULTSET_ACCESS_none</key>
        <name>SpotBugs: Correctness : SQL: Potential SQL Problem</name>
        <internalKey>STATIC_JAVA_FB.BRSA_BAD_RESULTSET_ACCESS_none</internalKey>
        <description>A call to getXXX or updateXXX methods of a result set was made where the field index is 0. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CSRF_database_update</key>
        <name>High impact security : Cross-site request forgery</name>
        <internalKey>STATIC_JAVA_CSRF_database_update</internalKey>
        <description>The web application controller modifies data or state and is unprotected from cross-site request forgery.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CSRF_filesystem_modification</key>
        <name>Medium impact security : Cross-site request forgery</name>
        <internalKey>STATIC_JAVA_CSRF_filesystem_modification</internalKey>
        <description>The web application controller modifies data or state and is unprotected from cross-site request forgery.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CSRF_none</key>
        <name>High impact security : Cross-site request forgery</name>
        <internalKey>STATIC_JAVA_CSRF_none</internalKey>
        <description>The web application controller modifies data or state and is unprotected from cross-site request forgery.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_OTHER_NO_OBJECT_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_OTHER_NO_OBJECT_none</internalKey>
        <description>This class defines an equals() method, that doesn&apos;t override the normal equals(Object) method defined in the base java.lang.Object class.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_RUN_FINALIZERS_ON_EXIT_none</key>
        <name>SpotBugs: Bad practice : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_RUN_FINALIZERS_ON_EXIT_none</internalKey>
        <description>&lt;em&gt;Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.&lt;/em&gt; -- Joshua Bloch</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_NUMBER_CTOR_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.DM_NUMBER_CTOR_none</internalKey>
        <description>Using new Integer(int) is guaranteed to always result in a new object whereas Integer.valueOf(int) allows caching of values to be done by the compiler, class library, or JVM.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED_none</key>
        <name>SpotBugs: Correctness : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED_none</internalKey>
        <description>A value is being used in a way that requires the value be annotation with a type qualifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_OS_CMD_INJECTION_command_as_array_of_args</key>
        <name>High impact security : OS Command Injection</name>
        <internalKey>STATIC_JAVA_OS_CMD_INJECTION_command_as_array_of_args</internalKey>
        <description>Untrusted user-supplied data is inserted into an operating system command without adequate validation, escaping, or filtering. This inserted data can change the intent of the operating system command. The change to the operating system command may result in the unauthorized disclosure, destruction, or modification of sensitive data or operating system resources.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_OS_CMD_INJECTION_command_as_one_string</key>
        <name>High impact security : OS Command Injection</name>
        <internalKey>STATIC_JAVA_OS_CMD_INJECTION_command_as_one_string</internalKey>
        <description>Untrusted user-supplied data is inserted into an operating system command without adequate validation, escaping, or filtering. This inserted data can change the intent of the operating system command. The change to the operating system command may result in the unauthorized disclosure, destruction, or modification of sensitive data or operating system resources.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_OS_CMD_INJECTION_none</key>
        <name>High impact security : OS Command Injection</name>
        <internalKey>STATIC_JAVA_OS_CMD_INJECTION_none</internalKey>
        <description>Untrusted user-supplied data is inserted into an operating system command without adequate validation, escaping, or filtering. This inserted data can change the intent of the operating system command. The change to the operating system command may result in the unauthorized disclosure, destruction, or modification of sensitive data or operating system resources.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_ARGUMENTS_WRONG_ORDER_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_ARGUMENTS_WRONG_ORDER_none</internalKey>
        <description>The arguments to this method call seem to be in the wrong order.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_BAD_FIELD_INNER_CLASS_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_BAD_FIELD_INNER_CLASS_none</internalKey>
        <description>This Serializable class is an inner class of a non-serializable class.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BX_UNBOXING_IMMEDIATELY_REBOXED_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.BX_UNBOXING_IMMEDIATELY_REBOXED_none</internalKey>
        <description>A boxed value is unboxed and then immediately reboxed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IT_NO_SUCH_ELEMENT_none</key>
        <name>SpotBugs: Bad practice : It: Incorrect definition of Iterator</name>
        <internalKey>STATIC_JAVA_FB.IT_NO_SUCH_ELEMENT_none</internalKey>
        <description>This class implements the java.util.Iterator interface.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RANGE_ARRAY_OFFSET_none</key>
        <name>SpotBugs: Correctness : RANGE: Range checks</name>
        <internalKey>STATIC_JAVA_FB.RANGE_ARRAY_OFFSET_none</internalKey>
        <description>Method is called with array parameter and offset parameter, but the offset is out of bounds.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE_none</key>
        <name>SpotBugs: Experimental : LG: Logger problem</name>
        <internalKey>STATIC_JAVA_FB.LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE_none</internalKey>
        <description>OpenJDK introduces a potential incompatibility.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NOISE_FIELD_REFERENCE_none</key>
        <name>SpotBugs: Bogus random noise : NOISE: Bogus random warning</name>
        <internalKey>STATIC_JAVA_FB.NOISE_FIELD_REFERENCE_none</internalKey>
        <description>Bogus warning.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CI_CONFUSED_INHERITANCE_none</key>
        <name>SpotBugs: Dodgy code : CI: Confused Inheritance</name>
        <internalKey>STATIC_JAVA_FB.CI_CONFUSED_INHERITANCE_none</internalKey>
        <description>This class is declared to be final, but declares fields to be protected.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_none</key>
        <name>SpotBugs: Correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_none</internalKey>
        <description>(&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html&quot;&gt;Javadoc&lt;/a&gt;) While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD_none</key>
        <name>SpotBugs: Dodgy code : UrF: Unread field</name>
        <internalKey>STATIC_JAVA_FB.URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD_none</internalKey>
        <description>This field is never read.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DC_DOUBLECHECK_none</key>
        <name>SpotBugs: Multithreaded correctness : DC: Double check pattern</name>
        <internalKey>STATIC_JAVA_FB.DC_DOUBLECHECK_none</internalKey>
        <description>This method may contain an instance of double-checked locking.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IS_INCONSISTENT_SYNC_none</key>
        <name>SpotBugs: Multithreaded correctness : IS: Inconsistent synchronization</name>
        <internalKey>STATIC_JAVA_FB.IS_INCONSISTENT_SYNC_none</internalKey>
        <description>The fields of this class appear to be accessed inconsistently with respect to synchronization. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_MUTABLE_COLLECTION_PKGPROTECT_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_MUTABLE_COLLECTION_PKGPROTECT_none</internalKey>
        <description>A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE_none</key>
        <name>SpotBugs: Multithreaded correctness : DL: Unintended contention or possible deadlock due to locking on shared objects</name>
        <internalKey>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE_none</internalKey>
        <description>The code synchronizes on a boxed primitive constant, such as an Integer.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_random_seed</key>
        <name>Low impact security : Constant seed used in random number generator</name>
        <internalKey>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_random_seed</internalKey>
        <description>Generating random number using constant seed may completely replace the cryptographically strong default seed causing the instance to return a predictable sequence of numbers unfit for secure use.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_secure_random_seed_const</key>
        <name>Medium impact security : Constant seed used in random number generator</name>
        <internalKey>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_secure_random_seed_const</internalKey>
        <description>Generating random number using constant seed may completely replace the cryptographically strong default seed causing the instance to return a predictable sequence of numbers unfit for secure use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_secure_random_seed_sys_time</key>
        <name>Medium impact security : System time used as seed in random number generator</name>
        <internalKey>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_secure_random_seed_sys_time</internalKey>
        <description>Generating random number using system time as the seed may completely replace the cryptographically strong default seed causing the instance to return a predictable sequence of numbers unfit for secure use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_none</key>
        <name>Medium impact security : System time used as seed in random number generator</name>
        <internalKey>STATIC_JAVA_PREDICTABLE_RANDOM_SEED_none</internalKey>
        <description>Generating random number using system time as the seed may completely replace the cryptographically strong default seed causing the instance to return a predictable sequence of numbers unfit for secure use.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_DOH_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_DOH_none</internalKey>
        <description>This partical method invocation doesn&apos;t make sense, for reasons that should be apparent from inspection.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_NONSERIALIZABLE_OBJECT_WRITTEN_none</key>
        <name>SpotBugs: Dodgy code : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_NONSERIALIZABLE_OBJECT_WRITTEN_none</internalKey>
        <description>This code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_ALWAYS_TRUE_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_ALWAYS_TRUE_none</internalKey>
        <description>This class defines an equals method that always returns true.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_NON_STATIC_GUARDING_STATIC_none</key>
        <name>Concurrent data access violations : Data race condition</name>
        <internalKey>STATIC_JAVA_NON_STATIC_GUARDING_STATIC_none</internalKey>
        <description>Static field is protected by a per-instance lock</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_FIELD_none</key>
        <name>SpotBugs: Dodgy code : CAA: Covariant array assignment</name>
        <internalKey>STATIC_JAVA_FB.CAA_COVARIANT_ARRAY_FIELD_none</internalKey>
        <description>Array of covariant type is assigned to a field. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.WA_NOT_IN_LOOP_none</key>
        <name>SpotBugs: Multithreaded correctness : Wa: Wait not in loop</name>
        <internalKey>STATIC_JAVA_FB.WA_NOT_IN_LOOP_none</internalKey>
        <description>This method contains a call to java.lang.Object.wait() which is not in a loop.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_UNWRITTEN_FIELD_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_UNWRITTEN_FIELD_none</internalKey>
        <description>The program is dereferencing a field that does not seem to ever have a non-null value written to it.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_EQUALS_USE_HASHCODE_none</key>
        <name>SpotBugs: Bad practice : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_EQUALS_USE_HASHCODE_none</internalKey>
        <description>This class overrides equals(Object), but does not override hashCode(), and inherits the implementation of hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_BOOLEAN_none</key>
        <name>SpotBugs: Multithreaded correctness : DL: Unintended contention or possible deadlock due to locking on shared objects</name>
        <internalKey>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_BOOLEAN_none</internalKey>
        <description>The code synchronizes on a boxed primitive constant, such as a Boolean.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD_none</key>
        <name>SpotBugs: Correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD_none</internalKey>
        <description>This call doesn&apos;t pass any objects to the EasyMock method, so the call doesn&apos;t do anything.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SERVLET_ATOMICITY_attribute_init_race</key>
        <name>Concurrent data access violations : Value not atomically updated</name>
        <internalKey>STATIC_JAVA_SERVLET_ATOMICITY_attribute_init_race</internalKey>
        <description>Non-atomic update of a concurrently shared value when initializing the attribute.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SERVLET_ATOMICITY_none</key>
        <name>Concurrent data access violations : Value not atomically updated</name>
        <internalKey>STATIC_JAVA_SERVLET_ATOMICITY_none</internalKey>
        <description>Non-atomic update of a concurrently shared value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SERVLET_ATOMICITY_violation_on_session_object</key>
        <name>Concurrent data access violations : Value not atomically updated</name>
        <internalKey>STATIC_JAVA_SERVLET_ATOMICITY_violation_on_session_object</internalKey>
        <description>Non-atomic update of a concurrently shared value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_BLOCKING_METHODS_ON_URL_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_BLOCKING_METHODS_ON_URL_none</internalKey>
        <description>The equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_INVOKING_HASHCODE_ON_ARRAY_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_INVOKING_HASHCODE_ON_ARRAY_none</internalKey>
        <description>The code invokes hashCode on an array.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.INT_BAD_COMPARISON_WITH_INT_VALUE_none</key>
        <name>SpotBugs: Correctness : INT: Suspicious integer expression</name>
        <internalKey>STATIC_JAVA_FB.INT_BAD_COMPARISON_WITH_INT_VALUE_none</internalKey>
        <description>This code compares an int value with a long constant that is outside the range of values that can be represented as an int value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_LOG_INJECTION_none</key>
        <name>Audit impact security : Log injection</name>
        <internalKey>STATIC_JAVA_LOG_INJECTION_none</internalKey>
        <description>User-controllable data is stored in logs.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DB_DUPLICATE_SWITCH_CLAUSES_none</key>
        <name>SpotBugs: Dodgy code : DB: Duplicate Branches</name>
        <internalKey>STATIC_JAVA_FB.DB_DUPLICATE_SWITCH_CLAUSES_none</internalKey>
        <description>This method uses the same code to implement two clauses of a switch statement.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_PARAM_DEREF_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_PARAM_DEREF_none</internalKey>
        <description>This method call passes a null value for a non-null method parameter.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INSECURE_RANDOM_insecure_random_used</key>
        <name>Insecure random category : Insecure random value used in security context</name>
        <internalKey>STATIC_JAVA_INSECURE_RANDOM_insecure_random_used</internalKey>
        <description>Random value generated using a cryptographically insecure pseudo-random number generator, and used in a security-sensitive context</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INSECURE_RANDOM_insecure_random_value</key>
        <name>Insecure random category : Cryptographically weak PRNG</name>
        <internalKey>STATIC_JAVA_INSECURE_RANDOM_insecure_random_value</internalKey>
        <description>Random value generated using a cryptographically insecure pseudo-random number generator</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_INSECURE_RANDOM_none</key>
        <name>Insecure random category : Cryptographically weak PRNG</name>
        <internalKey>STATIC_JAVA_INSECURE_RANDOM_none</internalKey>
        <description>Random value generated using a cryptographically insecure pseudo-random number generator</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UNKNOWN_none</key>
        <name>SpotBugs: Experimental : TEST: Testing prototype and incomplete bug pattern</name>
        <internalKey>STATIC_JAVA_FB.UNKNOWN_none</internalKey>
        <description>A warning was recorded, but SpotBugs can&apos;t find the description of this bug pattern and so can&apos;t describe it.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_USELESS_THREAD_none</key>
        <name>SpotBugs: Multithreaded correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_USELESS_THREAD_none</internalKey>
        <description>This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS_none</key>
        <name>SpotBugs: Dodgy code : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS_none</internalKey>
        <description>The field is marked as transient, but the class isn&apos;t Serializable, so marking it as transient has absolutely no effect.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SP_SPIN_ON_FIELD_none</key>
        <name>SpotBugs: Multithreaded correctness : SP: Method spins on field</name>
        <internalKey>STATIC_JAVA_FB.SP_SPIN_ON_FIELD_none</internalKey>
        <description>This method spins in a loop which reads a field.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_LOCK_EVASION_none</key>
        <name>Data race undermines locking : Check of thread-shared field evades lock acquisition</name>
        <internalKey>STATIC_JAVA_LOCK_EVASION_none</internalKey>
        <description>Checking the value of a thread-shared field outside of a locked region to determine if a locked operation involving that thread shared field has completed.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_TAINT_ASSERT_none</key>
        <name>High impact security : Untainted assertion violation</name>
        <internalKey>STATIC_JAVA_TAINT_ASSERT_none</internalKey>
        <description>A user assertion is present that states a value is not tainted.  However, the tool taint computation indicates that this value is tainted.  The validity of the assertion should be reviewed and removed if incorrect. If the assertion is valid, review how tainted data is inserted into the value and remove the taint source as appropriate.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_STRING_TOSTRING_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_STRING_TOSTRING_none</internalKey>
        <description>Calling String.toString() is just a redundant operation.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.GC_UNRELATED_TYPES_none</key>
        <name>SpotBugs: Correctness : GC: Suspicious calls to generic collection methods</name>
        <internalKey>STATIC_JAVA_FB.GC_UNRELATED_TYPES_none</internalKey>
        <description>This call to a generic collection method contains an argument with an incompatible class from that of the collection&apos;s parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_BAD_FIELD_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_BAD_FIELD_none</internalKey>
        <description>This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or java.lang.Object, and does not appear to implement the Externalizable interface or the readObject() and writeObject() methods.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_NONLONG_SERIALVERSIONID_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_NONLONG_SERIALVERSIONID_none</internalKey>
        <description>This class defines a serialVersionUID field that is not long.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_INVOKING_TOSTRING_ON_ARRAY_none</key>
        <name>SpotBugs: Correctness : USELESS_STRING: Useless/non-informative string generated</name>
        <internalKey>STATIC_JAVA_FB.DMI_INVOKING_TOSTRING_ON_ARRAY_none</internalKey>
        <description>The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.OS_OPEN_STREAM_EXCEPTION_PATH_none</key>
        <name>SpotBugs: Bad practice : OS: Stream not closed on all paths</name>
        <internalKey>STATIC_JAVA_FB.OS_OPEN_STREAM_EXCEPTION_PATH_none</internalKey>
        <description>The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SI_INSTANCE_BEFORE_FINALS_ASSIGNED_none</key>
        <name>SpotBugs: Bad practice : SI: Suspicious static initializer</name>
        <internalKey>STATIC_JAVA_FB.SI_INSTANCE_BEFORE_FINALS_ASSIGNED_none</internalKey>
        <description>The class&apos;s static initializer creates an instance of the class before all of the static fields are assigned.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RPC_REPEATED_CONDITIONAL_TEST_none</key>
        <name>SpotBugs: Correctness : RpC: Repeated conditional test</name>
        <internalKey>STATIC_JAVA_FB.RPC_REPEATED_CONDITIONAL_TEST_none</internalKey>
        <description>The code contains a conditional test is performed twice, one right after the other (e.g., x == 0 || x == 0).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES_none</internalKey>
        <description>This call to a generic collection&apos;s method would only make sense if a collection contained itself (e.g., if s.contains(s) were true).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_VACUOUS_SELF_COLLECTION_CALL_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_VACUOUS_SELF_COLLECTION_CALL_none</internalKey>
        <description>This call doesn&apos;t make sense.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IJU_SUITE_NOT_STATIC_none</key>
        <name>SpotBugs: Correctness : IJU: Improperly implemented JUnit TestCase</name>
        <internalKey>STATIC_JAVA_FB.IJU_SUITE_NOT_STATIC_none</internalKey>
        <description>Class is a JUnit TestCase and implements the suite() method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RE_POSSIBLE_UNINTENDED_PATTERN_none</key>
        <name>SpotBugs: Correctness : RE: Regular expressions</name>
        <internalKey>STATIC_JAVA_FB.RE_POSSIBLE_UNINTENDED_PATTERN_none</internalKey>
        <description>A String function is being invoked and &quot;.&quot; or &quot;|&quot; is being passed to a parameter that takes a regular expression as an argument.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ICAST_INTEGER_MULTIPLY_CAST_TO_LONG_none</key>
        <name>SpotBugs: Dodgy code : ICAST: Casting from integer values</name>
        <internalKey>STATIC_JAVA_FB.ICAST_INTEGER_MULTIPLY_CAST_TO_LONG_none</internalKey>
        <description>This code performs integer multiply and then converts the result to a long.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_PARAM_DEREF_NONVIRTUAL_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_PARAM_DEREF_NONVIRTUAL_none</internalKey>
        <description>A possibly-null value is passed to a non-null method parameter.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_LOCAL_SELF_ASSIGNMENT_none</key>
        <name>SpotBugs: Dodgy code : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_LOCAL_SELF_ASSIGNMENT_none</internalKey>
        <description>This method contains a self assignment of a local variable; e.g.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_JSP_SQL_INJECTION_none</key>
        <name>High impact security : JSP SQL tag Injection</name>
        <internalKey>STATIC_JAVA_JSP_SQL_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into a SQL query, via the JSTL SQL tag (e.g. &lt;sql:query&gt;).</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.MYBATIS_MAPPER_SQLI_none</key>
        <name>Audit impact security : SQL Unescaped Substitution</name>
        <internalKey>STATIC_JAVA_CONFIG.MYBATIS_MAPPER_SQLI_none</internalKey>
        <description>A string is injected into a SQL query without escaping, via an iBatis/MyBatis mapper XML file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CN_IDIOM_none</key>
        <name>SpotBugs: Bad practice : CN: Bad implementation of cloneable idiom</name>
        <internalKey>STATIC_JAVA_FB.CN_IDIOM_none</internalKey>
        <description>Class implements Cloneable but does not define or use the clone method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.LI_LAZY_INIT_STATIC_none</key>
        <name>SpotBugs: Multithreaded correctness : LI: Unsynchronized Lazy Initialization</name>
        <internalKey>STATIC_JAVA_FB.LI_LAZY_INIT_STATIC_none</internalKey>
        <description>This method contains an unsynchronized lazy initialization of a non-volatile static field.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION_none</internalKey>
        <description>This class implements the Externalizable interface, but does not define a void constructor.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_GETCLASS_AND_CLASS_CONSTANT_none</key>
        <name>SpotBugs: Bad practice : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_GETCLASS_AND_CLASS_CONSTANT_none</internalKey>
        <description>This class has an equals method that will be broken if it is inherited by subclasses.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IIL_PREPARE_STATEMENT_IN_LOOP_none</key>
        <name>SpotBugs: Performance : IIL: Inefficient code which can be moved outside of the loop</name>
        <internalKey>STATIC_JAVA_FB.IIL_PREPARE_STATEMENT_IN_LOOP_none</internalKey>
        <description>The method calls Connection.prepareStatement inside the loop passing the constant arguments. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_AND_ZZ_none</key>
        <name>SpotBugs: Correctness : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_AND_ZZ_none</internalKey>
        <description>This method compares an expression of the form (e &amp;amp; 0) to 0, which will always compare equal.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER_none</key>
        <name>SpotBugs: Security : XSS: Cross site scripting vulnerability</name>
        <internalKey>STATIC_JAVA_FB.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER_none</internalKey>
        <description>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_WRONG_PACKAGE_INTENTIONAL_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_WRONG_PACKAGE_INTENTIONAL_none</internalKey>
        <description>The method in the subclass doesn&apos;t override a similar method in a superclass because the type of a parameter doesn&apos;t exactly match the type of the corresponding parameter in the superclass.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_LCASE_TOSTRING_none</key>
        <name>SpotBugs: Correctness : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_LCASE_TOSTRING_none</internalKey>
        <description>This class defines a method called tostring().</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UCF_USELESS_CONTROL_FLOW_none</key>
        <name>SpotBugs: Dodgy code : UCF: Useless control flow</name>
        <internalKey>STATIC_JAVA_FB.UCF_USELESS_CONTROL_FLOW_none</internalKey>
        <description>This method contains a useless control flow statement, where control flow continues onto the same place regardless of whether or not the branch is taken.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_cookie</key>
        <name>High impact security : Cleartext sensitive data in a cookie</name>
        <internalKey>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_cookie</internalKey>
        <description>Reading unencrypted sensitive data from a cookie.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_database</key>
        <name>Medium impact security : Cleartext sensitive data in a database</name>
        <internalKey>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_database</internalKey>
        <description>Reading unencrypted sensitive data from a database.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_file</key>
        <name>Low impact security : Cleartext sensitive data in a file</name>
        <internalKey>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_in_file</internalKey>
        <description>Reading unencrypted sensitive data from a file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_transmission</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_cleartext_transmission</internalKey>
        <description>Receiving sensitive data in cleartext from the network.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_none</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>STATIC_JAVA_UNENCRYPTED_SENSITIVE_DATA_none</internalKey>
        <description>Receiving sensitive data in cleartext from the network.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT_none</internalKey>
        <description>The format string specifies a relative index to request that the argument for the previous format specifier be reused.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_EXCEPTION_NOT_THROWN_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_EXCEPTION_NOT_THROWN_none</internalKey>
        <description>This code creates an exception (or error) object, but doesn&apos;t do anything with it.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ITA_INEFFICIENT_TO_ARRAY_none</key>
        <name>SpotBugs: Performance : ITA: Inefficient use of collection.toArray(new Foo[0])</name>
        <internalKey>STATIC_JAVA_FB.ITA_INEFFICIENT_TO_ARRAY_none</internalKey>
        <description>This method uses the toArray() method of a collection derived class, and passes in a zero-length prototype array argument. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NOISE_METHOD_CALL_none</key>
        <name>SpotBugs: Bogus random noise : NOISE: Bogus random warning</name>
        <internalKey>STATIC_JAVA_FB.NOISE_METHOD_CALL_none</internalKey>
        <description>Bogus warning.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT_none</key>
        <name>SpotBugs: Correctness : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT_none</internalKey>
        <description>The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_SELF_USE_OBJECT_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_SELF_USE_OBJECT_none</internalKey>
        <description>This class defines a covariant version of the equals() method, but inherits the normal equals(Object) method defined in the base java.lang.Object class.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.SPRING_SECURITY_DISABLE_AUTH_TAGS_none</key>
        <name>Low impact security : Spring Security authorize JSP tags are disabled</name>
        <internalKey>STATIC_JAVA_CONFIG.SPRING_SECURITY_DISABLE_AUTH_TAGS_none</internalKey>
        <description>Spring Security authorize JSP tags are disabled.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_METHOD_PARAMETER_RELAXING_ANNOTATION_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_METHOD_PARAMETER_RELAXING_ANNOTATION_none</internalKey>
        <description>A method should always implement the contract of a method it overrides. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_ABSOLUTE_VALUE_OF_HASHCODE_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_ABSOLUTE_VALUE_OF_HASHCODE_none</internalKey>
        <description>This code generates a hashcode and then computes the absolute value of that hashcode.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_DEAD_LOCAL_INCREMENT_IN_RETURN_none</key>
        <name>SpotBugs: Correctness : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_DEAD_LOCAL_INCREMENT_IN_RETURN_none</internalKey>
        <description>This statement has a return such as return x++;.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DM_CONVERT_CASE_none</key>
        <name>SpotBugs: Internationalization : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DM_CONVERT_CASE_none</internalKey>
        <description>A String is being converted to upper or lowercase, using the platform&apos;s default encoding.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_COMPARATOR_SHOULD_BE_SERIALIZABLE_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_COMPARATOR_SHOULD_BE_SERIALIZABLE_none</internalKey>
        <description>Because this class implements the Comparator interface, you should consider whether or not it should also implement the Serializable interface.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UPM_UNCALLED_PRIVATE_METHOD_none</key>
        <name>SpotBugs: Performance : UPM: Private method is never called</name>
        <internalKey>STATIC_JAVA_FB.UPM_UNCALLED_PRIVATE_METHOD_none</internalKey>
        <description>This private method is never called.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_REGEX_CONFUSION_none</key>
        <name>API usage errors : Unintended regular expression</name>
        <internalKey>STATIC_JAVA_REGEX_CONFUSION_none</internalKey>
        <description>A string intended to be matched literally is instead treated as a regular expression, changing its meaning.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IO_APPENDING_TO_OBJECT_OUTPUT_STREAM_none</key>
        <name>SpotBugs: Correctness : IO: Input/Output problem</name>
        <internalKey>STATIC_JAVA_FB.IO_APPENDING_TO_OBJECT_OUTPUT_STREAM_none</internalKey>
        <description>This code opens a file in append mode and then wraps the result in an object output stream.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_FINAL_PKGPROTECT_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_FINAL_PKGPROTECT_none</internalKey>
        <description>A mutable static field could be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UI_INHERITANCE_UNSAFE_GETRESOURCE_none</key>
        <name>SpotBugs: Bad practice : UI: Unsafe inheritance</name>
        <internalKey>STATIC_JAVA_FB.UI_INHERITANCE_UNSAFE_GETRESOURCE_none</internalKey>
        <description>Calling this.getClass().getResource(...) could give results other than expected if this class is extended by a class in another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_FINALIZER_ONLY_NULLS_FIELDS_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_FINALIZER_ONLY_NULLS_FIELDS_none</internalKey>
        <description>This finalizer does nothing except null out fields.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE_none</key>
        <name>SpotBugs: Correctness : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE_none</internalKey>
        <description>This code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.XSS_REQUEST_PARAMETER_TO_JSP_WRITER_none</key>
        <name>SpotBugs: Security : XSS: Cross site scripting vulnerability</name>
        <internalKey>STATIC_JAVA_FB.XSS_REQUEST_PARAMETER_TO_JSP_WRITER_none</internalKey>
        <description>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SKIPPED_CLASS_TOO_BIG_none</key>
        <name>SpotBugs: Experimental : SKIPPED: Analysis skipped</name>
        <internalKey>STATIC_JAVA_FB.SKIPPED_CLASS_TOO_BIG_none</internalKey>
        <description>This class is bigger than can be effectively handled, and was not fully analyzed for errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_MISSING_ARGUMENT_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_MISSING_ARGUMENT_none</internalKey>
        <description>Not enough arguments are passed to satisfy a placeholder in the format string.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_UNSUPPORTED_METHOD_none</key>
        <name>SpotBugs: Dodgy code : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_UNSUPPORTED_METHOD_none</internalKey>
        <description>All targets of this method invocation throw an UnsupportedOperationException.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VO_VOLATILE_INCREMENT_none</key>
        <name>SpotBugs: Multithreaded correctness : VO: Use of volatile</name>
        <internalKey>STATIC_JAVA_FB.VO_VOLATILE_INCREMENT_none</internalKey>
        <description>This code increments a volatile field.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_METHOD_MUST_BE_PRIVATE_none</key>
        <name>SpotBugs: Correctness : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_METHOD_MUST_BE_PRIVATE_none</internalKey>
        <description>This class implements the Serializable interface, and defines a method for custom serialization/deserialization.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK_none</key>
        <name>SpotBugs: Correctness : TQ: Inconsistent use of type qualifier annotations</name>
        <internalKey>STATIC_JAVA_FB.TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK_none</internalKey>
        <description>A value that is annotated as possibility being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_COMPARING_CLASS_NAMES_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_COMPARING_CLASS_NAMES_none</internalKey>
        <description>This method checks to see if two objects are the same class by checking to see if the names of their classes are equal.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.TLW_TWO_LOCK_WAIT_none</key>
        <name>SpotBugs: Multithreaded correctness : TLW: Wait with two locks held</name>
        <internalKey>STATIC_JAVA_FB.TLW_TWO_LOCK_WAIT_none</internalKey>
        <description>Waiting on a monitor while two locks are held may cause deadlock.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.REC_CATCH_EXCEPTION_none</key>
        <name>SpotBugs: Dodgy code : REC: RuntimeException capture</name>
        <internalKey>STATIC_JAVA_FB.REC_CATCH_EXCEPTION_none</internalKey>
        <description>This catch block for Exception also catches any RuntimeException, which could mask programming errors.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_USES_NEWLINE_none</key>
        <name>SpotBugs: Bad practice : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_USES_NEWLINE_none</internalKey>
        <description>This format string includes a newline character (\n).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.STRUTS2_ENABLED_DEV_MODE_none</key>
        <name>Medium impact security : Struts2 DevMode enabled</name>
        <internalKey>STATIC_JAVA_CONFIG.STRUTS2_ENABLED_DEV_MODE_none</internalKey>
        <description>Struts2 developer mode enabled.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UWF_UNWRITTEN_FIELD_none</key>
        <name>SpotBugs: Correctness : UwF: Unwritten field</name>
        <internalKey>STATIC_JAVA_FB.UWF_UNWRITTEN_FIELD_none</internalKey>
        <description>This field is never written.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_THROW_none</key>
        <name>Error handling issues : Exception not thrown</name>
        <internalKey>STATIC_JAVA_MISSING_THROW_none</internalKey>
        <description>An object of exception type is created but neither thrown nor stored anywhere; the developer likely intended to throw the exception.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_EL_INJECTION_none</key>
        <name>High impact security : Expression language injection</name>
        <internalKey>STATIC_JAVA_EL_INJECTION_none</internalKey>
        <description>A user-controllable string is evaluated by an expression language resolver.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SF_SWITCH_NO_DEFAULT_none</key>
        <name>SpotBugs: Dodgy code : SF: Switch case falls through</name>
        <internalKey>STATIC_JAVA_FB.SF_SWITCH_NO_DEFAULT_none</internalKey>
        <description>This method contains a switch statement where default case is missing.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SESSION_FIXATION_none</key>
        <name>Medium impact security : Session fixation</name>
        <internalKey>STATIC_JAVA_SESSION_FIXATION_none</internalKey>
        <description>A user-controllable string is used as a session identifier.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BIT_SIGNED_CHECK_HIGH_BIT_none</key>
        <name>SpotBugs: Correctness : BIT: Suspicious bitwise logical expression</name>
        <internalKey>STATIC_JAVA_FB.BIT_SIGNED_CHECK_HIGH_BIT_none</internalKey>
        <description>This method compares a bitwise expression such as ((val &amp;amp; CONSTANT) &amp;gt; 0) where CONSTANT is the negative number.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NULL_INSTANCEOF_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NULL_INSTANCEOF_none</internalKey>
        <description>This instanceof test will always return false, since the value being checked is guaranteed to be null.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IS_FIELD_NOT_GUARDED_none</key>
        <name>SpotBugs: Multithreaded correctness : IS: Inconsistent synchronization</name>
        <internalKey>STATIC_JAVA_FB.IS_FIELD_NOT_GUARDED_none</internalKey>
        <description>This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy, but can be accessed in a way that seems to violate those annotations.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NO_NOTIFY_NOT_NOTIFYALL_none</key>
        <name>SpotBugs: Multithreaded correctness : No: Using notify() rather than notifyAll()</name>
        <internalKey>STATIC_JAVA_FB.NO_NOTIFY_NOT_NOTIFYALL_none</internalKey>
        <description>This method calls notify() rather than notifyAll().</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ATOMICITY_none</key>
        <name>Concurrent data access violations : Value not atomically updated</name>
        <internalKey>STATIC_JAVA_ATOMICITY_none</internalKey>
        <description>Non-atomic update of a concurrently shared value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SWL_SLEEP_WITH_LOCK_HELD_none</key>
        <name>SpotBugs: Multithreaded correctness : SWL: Sleep with lock held</name>
        <internalKey>STATIC_JAVA_FB.SWL_SLEEP_WITH_LOCK_HELD_none</internalKey>
        <description>This method calls Thread.sleep() with a lock held.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_CHECK_FOR_POSITIVE_INDEXOF_none</key>
        <name>SpotBugs: Dodgy code : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_CHECK_FOR_POSITIVE_INDEXOF_none</internalKey>
        <description>The method invokes String.indexOf and checks to see if the result is positive or non-positive.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD_none</key>
        <name>SpotBugs: Correctness : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD_none</internalKey>
        <description>This method contains a self assignment of a local variable, and there is a field with an identical name.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UCF_USELESS_CONTROL_FLOW_NEXT_LINE_none</key>
        <name>SpotBugs: Dodgy code : UCF: Useless control flow</name>
        <internalKey>STATIC_JAVA_FB.UCF_USELESS_CONTROL_FLOW_NEXT_LINE_none</internalKey>
        <description>This method contains a useless control flow statement in which control flow follows to the same or following line regardless of whether or not the branch is taken.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNLOGGED_SECURITY_EXCEPTION_unlogged_security_exception</key>
        <name>Medium impact security : Unlogged security exception</name>
        <internalKey>STATIC_JAVA_UNLOGGED_SECURITY_EXCEPTION_unlogged_security_exception</internalKey>
        <description>A security exception is caught but not logged.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNLOGGED_SECURITY_EXCEPTION_none</key>
        <name>Medium impact security : Unlogged security exception</name>
        <internalKey>STATIC_JAVA_UNLOGGED_SECURITY_EXCEPTION_none</internalKey>
        <description>A security exception is caught but not logged.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD_none</key>
        <name>SpotBugs: Correctness : IJU: Improperly implemented JUnit TestCase</name>
        <internalKey>STATIC_JAVA_FB.IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD_none</internalKey>
        <description>A JUnit assertion is performed in a run method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_CLASS_NOT_EXCEPTION_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_CLASS_NOT_EXCEPTION_none</internalKey>
        <description>This class is not derived from another exception, but ends with &apos;Exception&apos;.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.INT_VACUOUS_COMPARISON_none</key>
        <name>SpotBugs: Dodgy code : INT: Suspicious integer expression</name>
        <internalKey>STATIC_JAVA_FB.INT_VACUOUS_COMPARISON_none</internalKey>
        <description>There is an integer comparison that always returns the same value (e.g., x &amp;lt;= Integer.MAX_VALUE).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_HASHCODE_USE_OBJECT_EQUALS_none</key>
        <name>SpotBugs: Bad practice : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_HASHCODE_USE_OBJECT_EQUALS_none</internalKey>
        <description>This class defines a hashCode() method but inherits its equals() method from java.lang.Object (which defines equality by comparing object references).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_SHARED_CONSTANT_none</key>
        <name>SpotBugs: Multithreaded correctness : DL: Unintended contention or possible deadlock due to locking on shared objects</name>
        <internalKey>STATIC_JAVA_FB.DL_SYNCHRONIZATION_ON_SHARED_CONSTANT_none</internalKey>
        <description>The code synchronizes on interned String.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_XPATH_INJECTION_none</key>
        <name>Medium impact security : XML Path (XPath) Language injection</name>
        <internalKey>STATIC_JAVA_XPATH_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into an XPath query.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE_none</key>
        <name>SpotBugs: Bad practice : CN: Bad implementation of cloneable idiom</name>
        <internalKey>STATIC_JAVA_FB.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE_none</internalKey>
        <description>This class defines a clone() method but the class doesn&apos;t implement Cloneable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE_none</key>
        <name>SpotBugs: Security : SQL: Potential SQL Problem</name>
        <internalKey>STATIC_JAVA_FB.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE_none</internalKey>
        <description>The method invokes the execute or addBatch method on an SQL statement with a String that seems to be dynamically generated.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_HEADER_INJECTION_none</key>
        <name>Medium impact security : HTTP header injection</name>
        <internalKey>STATIC_JAVA_HEADER_INJECTION_none</internalKey>
        <description>A user-controllable string is used to construct an HTTP header name.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_NO_SERIALVERSIONID_none</key>
        <name>SpotBugs: Bad practice : SnVI: Serializable class with no Version ID</name>
        <internalKey>STATIC_JAVA_FB.SE_NO_SERIALVERSIONID_none</internalKey>
        <description>This class implements the Serializable interface, but does not define a serialVersionUID field.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SQL_BAD_RESULTSET_ACCESS_none</key>
        <name>SpotBugs: Correctness : SQL: Potential SQL Problem</name>
        <internalKey>STATIC_JAVA_FB.SQL_BAD_RESULTSET_ACCESS_none</internalKey>
        <description>A call to getXXX or updateXXX methods of a result set was made where the field index is 0.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IS2_INCONSISTENT_SYNC_none</key>
        <name>SpotBugs: Multithreaded correctness : IS: Inconsistent synchronization</name>
        <internalKey>STATIC_JAVA_FB.IS2_INCONSISTENT_SYNC_none</internalKey>
        <description>The fields of this class appear to be accessed inconsistently with respect to synchronization.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.JLM_JSR166_LOCK_MONITORENTER_none</key>
        <name>SpotBugs: Multithreaded correctness : JLM: Synchronization on java.util.concurrent objects</name>
        <internalKey>STATIC_JAVA_FB.JLM_JSR166_LOCK_MONITORENTER_none</internalKey>
        <description>This method performs synchronization an object that implements java.util.concurrent.locks.Lock.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_none</key>
        <name>SpotBugs: Dodgy code : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_none</internalKey>
        <description>This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_IMPLICIT_INTENT_none</key>
        <name>Medium impact security : Implicit intent use</name>
        <internalKey>STATIC_JAVA_IMPLICIT_INTENT_none</internalKey>
        <description>Using an intent without setting a specific receiver component.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR_none</internalKey>
        <description>This is a read of a field is never initialized within any constructor, and is therefore could be null after the object is initialized. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.HE_INHERITS_EQUALS_USE_HASHCODE_none</key>
        <name>SpotBugs: Bad practice : HE: Equal objects must have equal hashcodes</name>
        <internalKey>STATIC_JAVA_FB.HE_INHERITS_EQUALS_USE_HASHCODE_none</internalKey>
        <description>This class inherits equals(Object) from an abstract superclass, and hashCode() from java.lang.Object (which returns the identity hash code, an arbitrary value assigned to the object by the VM).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.QF_QUESTIONABLE_FOR_LOOP_none</key>
        <name>SpotBugs: Dodgy code : QF: Questionable for loops</name>
        <internalKey>STATIC_JAVA_FB.QF_QUESTIONABLE_FOR_LOOP_none</internalKey>
        <description>Are you sure this for loop is incrementing the correct variable? It appears that another variable is being initialized and checked by the for loop.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RI_REDUNDANT_INTERFACES_none</key>
        <name>SpotBugs: Dodgy code : RI: Redundant Interfaces</name>
        <internalKey>STATIC_JAVA_FB.RI_REDUNDANT_INTERFACES_none</internalKey>
        <description>This class declares that it implements an interface that is also implemented by a superclass.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.SPRING_SECURITY_REMEMBER_ME_HARDCODED_KEY_none</key>
        <name>Low impact security : Spring Security hardcoded remember-me key</name>
        <internalKey>STATIC_JAVA_CONFIG.SPRING_SECURITY_REMEMBER_ME_HARDCODED_KEY_none</internalKey>
        <description>The remember-me key is hardcoded in the Spring Security configuration.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_IMPOSSIBLE_CAST_none</key>
        <name>SpotBugs: Correctness : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_IMPOSSIBLE_CAST_none</internalKey>
        <description>This cast will always throw a ClassCastException.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT_none</key>
        <name>SpotBugs: Performance : IIL: Inefficient code which can be moved outside of the loop</name>
        <internalKey>STATIC_JAVA_FB.IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT_none</internalKey>
        <description>The method creates the same regular expression inside the loop, so it will be compiled every iteration. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_hostname_verifier</key>
        <name>High impact security : Insecure SSL/TLS: bad HostnameVerifier</name>
        <internalKey>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_hostname_verifier</internalKey>
        <description>Turning off hostname verification when establishing SSL/TLS connections.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_revocation_check</key>
        <name>High impact security : Insecure SSL/TLS: disabling certificate revocation check</name>
        <internalKey>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_revocation_check</internalKey>
        <description>Turning off checking for certificate revocation fails to properly authenticate its SSL/TLS peer.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_ssl_session</key>
        <name>High impact security : Insecure SSL/TLS: SSLSession hostname not verified</name>
        <internalKey>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_ssl_session</internalKey>
        <description>When using raw SSLSocket, SSLEngine, or SSLSocketFactory one must verify the hostname by calling HostnameVerifier.verify on the corresponding SSLSession.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_trust_manager</key>
        <name>High impact security : Insecure SSL/TLS: bad TrustManager</name>
        <internalKey>STATIC_JAVA_BAD_CERT_VERIFICATION_bad_trust_manager</internalKey>
        <description>The TrustManager fails to properly authenticate its SSL/TLS peer.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_BAD_CERT_VERIFICATION_none</key>
        <name>High impact security : Insecure SSL/TLS: bad TrustManager</name>
        <internalKey>STATIC_JAVA_BAD_CERT_VERIFICATION_none</internalKey>
        <description>The TrustManager fails to properly authenticate its SSL/TLS peer.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_MUTABLE_HASHTABLE_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_MUTABLE_HASHTABLE_none</internalKey>
        <description>A final static field references a Hashtable and can be accessed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE_none</key>
        <name>SpotBugs: Correctness : RCN: Redundant comparison to null</name>
        <internalKey>STATIC_JAVA_FB.RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE_none</internalKey>
        <description>A value is checked here to see whether it is null, but this value can&apos;t be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ESYNC_EMPTY_SYNC_none</key>
        <name>SpotBugs: Multithreaded correctness : ESync: Empty Synchronized blocks</name>
        <internalKey>STATIC_JAVA_FB.ESYNC_EMPTY_SYNC_none</internalKey>
        <description>The code contains an empty synchronized block: &lt;code&gt;synchronized() {&lt;br&gt;}&lt;br&gt;&lt;/code&gt; Empty synchronized blocks are far more subtle and hard to use correctly than most people recognize, and empty synchronized blocks are almost never a better solution than less contrived solutions.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL_none</key>
        <name>SpotBugs: Multithreaded correctness : WL: Possible locking on wrong object</name>
        <internalKey>STATIC_JAVA_FB.WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL_none</internalKey>
        <description>This instance method synchronizes on this.getClass().</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT_none</key>
        <name>SpotBugs: Dodgy code : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT_none</internalKey>
        <description>This code calls a method and ignores the return value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EC_UNRELATED_TYPES_USING_POINTER_EQUALITY_none</key>
        <name>SpotBugs: Correctness : EC: Comparing incompatible types for equality</name>
        <internalKey>STATIC_JAVA_FB.EC_UNRELATED_TYPES_USING_POINTER_EQUALITY_none</internalKey>
        <description>This method uses pointer equality to compare two references that seem to be of different types.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DIVIDE_BY_ZERO_float_divisor</key>
        <name>Incorrect expression : Division or modulo by float zero</name>
        <internalKey>STATIC_JAVA_DIVIDE_BY_ZERO_float_divisor</internalKey>
        <description>An expression which may be zero is used as a divisor in floating-point arithmetic.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_DIVIDE_BY_ZERO_none</key>
        <name>Integer handling issues : Division or modulo by zero</name>
        <internalKey>STATIC_JAVA_DIVIDE_BY_ZERO_none</internalKey>
        <description>Division or modulo by zero results in an exception.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EI_EXPOSE_STATIC_REP2_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.EI_EXPOSE_STATIC_REP2_none</internalKey>
        <description>This code stores a reference to an externally mutable object into a static field.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED_none</internalKey>
        <description>A method is called that expects a Java printf format string and a list of arguments.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW_none</key>
        <name>SpotBugs: Dodgy code : IM: Questionable integer math</name>
        <internalKey>STATIC_JAVA_FB.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW_none</internalKey>
        <description>The code computes the average of two integers using either division or signed right shift, and then uses the result as the index of an array.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS_none</key>
        <name>SpotBugs: Bad practice : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS_none</internalKey>
        <description>The equals(Object o) method shouldn&apos;t make any assumptions about the type of o.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.FI_EXPLICIT_INVOCATION_none</key>
        <name>SpotBugs: Bad practice : FI: Incorrect use of finalizers</name>
        <internalKey>STATIC_JAVA_FB.FI_EXPLICIT_INVOCATION_none</internalKey>
        <description>This method contains an explicit invocation of the finalize() method on an object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MTIA_SUSPECT_STRUTS_INSTANCE_FIELD_none</key>
        <name>SpotBugs: Dodgy code : MTIA: Multithreaded Instance Access</name>
        <internalKey>STATIC_JAVA_FB.MTIA_SUSPECT_STRUTS_INSTANCE_FIELD_none</internalKey>
        <description>This class extends from a Struts Action class, and uses an instance member variable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BSHIFT_WRONG_ADD_PRIORITY_none</key>
        <name>SpotBugs: Correctness : BSHIFT: Bad shift</name>
        <internalKey>STATIC_JAVA_FB.BSHIFT_WRONG_ADD_PRIORITY_none</internalKey>
        <description>The code performs an operation like (x &amp;lt;&amp;lt; 8 + y).</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.GC_UNCHECKED_TYPE_IN_GENERIC_CALL_none</key>
        <name>SpotBugs: Bad practice : GC: Suspicious calls to generic collection methods</name>
        <internalKey>STATIC_JAVA_FB.GC_UNCHECKED_TYPE_IN_GENERIC_CALL_none</internalKey>
        <description>This call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.PT_RELATIVE_PATH_TRAVERSAL_none</key>
        <name>SpotBugs: Security : PT: Path traversal</name>
        <internalKey>STATIC_JAVA_FB.PT_RELATIVE_PATH_TRAVERSAL_none</internalKey>
        <description>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as &quot;..&quot; that can resolve to a location that is outside of that directory.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.RV_REM_OF_HASHCODE_none</key>
        <name>SpotBugs: Dodgy code : RV: Bad use of return value</name>
        <internalKey>STATIC_JAVA_FB.RV_REM_OF_HASHCODE_none</internalKey>
        <description>This code computes a hashCode, and then computes the remainder of that value modulo another value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MS_CANNOT_BE_FINAL_none</key>
        <name>SpotBugs: Malicious code vulnerability : MS: Mutable static field</name>
        <internalKey>STATIC_JAVA_FB.MS_CANNOT_BE_FINAL_none</internalKey>
        <description>A mutable static field could be changed by malicious code or by accident from another package.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_AUTHZ_none</key>
        <name>Medium impact security : Missing authorization check</name>
        <internalKey>STATIC_JAVA_MISSING_AUTHZ_none</internalKey>
        <description>Calling a method that performs a sensitive action without first checking authorization, as is done elsewhere.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_READ_RESOLVE_IS_STATIC_none</key>
        <name>SpotBugs: Correctness : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_READ_RESOLVE_IS_STATIC_none</internalKey>
        <description>In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_LDAP_INJECTION_none</key>
        <name>High impact security : LDAP injection</name>
        <internalKey>STATIC_JAVA_LDAP_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into an LDAP query.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNUSED_VALUE_adjacent</key>
        <name>Incorrect expression : Unused value</name>
        <internalKey>STATIC_JAVA_UNUSED_VALUE_adjacent</internalKey>
        <description>A value assigned to a variable is never used.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_UNUSED_VALUE_none</key>
        <name>Code maintainability issues : Unused value</name>
        <internalKey>STATIC_JAVA_UNUSED_VALUE_none</internalKey>
        <description>A value assigned to a variable is never used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_JSP_DYNAMIC_INCLUDE_none</key>
        <name>Medium impact security : JSP dynamic include</name>
        <internalKey>STATIC_JAVA_JSP_DYNAMIC_INCLUDE_none</internalKey>
        <description>A JSP include path is partially or entirely user-controllable.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_EXPOSED_PREFERENCES_none</key>
        <name>Medium impact security : Insufficient protection of data</name>
        <internalKey>STATIC_JAVA_EXPOSED_PREFERENCES_none</internalKey>
        <description>Creating a SharedPreferences object in a mode other than MODE_PRIVATE.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IIL_PATTERN_COMPILE_IN_LOOP_none</key>
        <name>SpotBugs: Performance : IIL: Inefficient code which can be moved outside of the loop</name>
        <internalKey>STATIC_JAVA_FB.IIL_PATTERN_COMPILE_IN_LOOP_none</internalKey>
        <description>The method calls Pattern.compile inside the loop passing the constant arguments. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR_none</internalKey>
        <description>The field is marked as non-null, but isn&apos;t written to by the constructor.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MTIA_SUSPECT_SERVLET_INSTANCE_FIELD_none</key>
        <name>SpotBugs: Dodgy code : MTIA: Multithreaded Instance Access</name>
        <internalKey>STATIC_JAVA_FB.MTIA_SUSPECT_SERVLET_INSTANCE_FIELD_none</internalKey>
        <description>This class extends from a Servlet class, and uses an instance member variable.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_RANDOM_USED_ONLY_ONCE_none</key>
        <name>SpotBugs: Bad practice : DMI: Dubious method invocation</name>
        <internalKey>STATIC_JAVA_FB.DMI_RANDOM_USED_ONLY_ONCE_none</internalKey>
        <description>This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_ALWAYS_NULL_EXCEPTION_none</key>
        <name>SpotBugs: Correctness : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_ALWAYS_NULL_EXCEPTION_none</internalKey>
        <description>A pointer which is null on an exception path is dereferenced here.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC_none</key>
        <name>SpotBugs: Correctness : Eq: Problems with implementation of equals()</name>
        <internalKey>STATIC_JAVA_FB.EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC_none</internalKey>
        <description>This class defines an equals method that overrides an equals method in a superclass.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_insecure_intent_whitelist</key>
        <name>Low impact security : Insecure configuration of Cordova Intent Whitelist</name>
        <internalKey>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_insecure_intent_whitelist</internalKey>
        <description>The Cordova whitelist plugin is configured to allow all unrecognized URLs to be handled by other applications on the device.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_insecure_navigation_whitelist</key>
        <name>Low impact security : Insecure configuration of Cordova Navigation Whitelist</name>
        <internalKey>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_insecure_navigation_whitelist</internalKey>
        <description>The Cordova whitelist plugin is configured to allow the WebView to navigate to any URL without restrictions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_insecure_network_request_whitelist</key>
        <name>Low impact security : Insecure configuration of Cordova Network Request Whitelist</name>
        <internalKey>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_insecure_network_request_whitelist</internalKey>
        <description>The Cordova whitelist plugin is configured to allow outbound network requests to all domains.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_none</key>
        <name>Low impact security : Insecure configuration of Cordova Network Request Whitelist</name>
        <internalKey>STATIC_JAVA_CONFIG.CORDOVA_PERMISSIVE_WHITELIST_none</internalKey>
        <description>The Cordova whitelist plugin is configured to allow outbound network requests to all domains.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ANDROID_DEBUG_MODE_none</key>
        <name>Low impact security : Android application debug mode enabled</name>
        <internalKey>STATIC_JAVA_ANDROID_DEBUG_MODE_none</internalKey>
        <description>The debug mode is enabled for the Android application.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UC_USELESS_OBJECT_none</key>
        <name>SpotBugs: Dodgy code : UC: Useless code</name>
        <internalKey>STATIC_JAVA_FB.UC_USELESS_OBJECT_none</internalKey>
        <description>Our analysis shows that this object is useless.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS_none</key>
        <name>SpotBugs: Correctness : UMAC: Uncallable method of anonymous class</name>
        <internalKey>STATIC_JAVA_FB.UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS_none</internalKey>
        <description>This anonymous class defined a method that is not directly invoked and does not override a method in a superclass.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD_none</key>
        <name>SpotBugs: Dodgy code : DLS: Dead local store</name>
        <internalKey>STATIC_JAVA_FB.DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD_none</internalKey>
        <description>This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_NONSTATIC_SERIALVERSIONID_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_NONSTATIC_SERIALVERSIONID_none</internalKey>
        <description>This class defines a serialVersionUID field that is not static.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED_none</key>
        <name>SpotBugs: Malicious code vulnerability : DP: Use doPrivileged</name>
        <internalKey>STATIC_JAVA_FB.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED_none</internalKey>
        <description>This code creates a classloader, which needs permission if a security manage is installed.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_CONFIG.MISSING_GLOBAL_EXCEPTION_HANDLER_none</key>
        <name>Low impact security : Missing global exception handler</name>
        <internalKey>STATIC_JAVA_CONFIG.MISSING_GLOBAL_EXCEPTION_HANDLER_none</internalKey>
        <description>The web application does not define a global exception handler.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IJU_SETUP_NO_SUPER_none</key>
        <name>SpotBugs: Correctness : IJU: Improperly implemented JUnit TestCase</name>
        <internalKey>STATIC_JAVA_FB.IJU_SETUP_NO_SUPER_none</internalKey>
        <description>Class is a JUnit TestCase and implements the setUp method.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MWN_MISMATCHED_NOTIFY_none</key>
        <name>SpotBugs: Multithreaded correctness : MWN: Mismatched wait() or notify()</name>
        <internalKey>STATIC_JAVA_FB.MWN_MISMATCHED_NOTIFY_none</internalKey>
        <description>This method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BC_UNCONFIRMED_CAST_OF_RETURN_VALUE_none</key>
        <name>SpotBugs: Dodgy code : BC: Bad casts of object references</name>
        <internalKey>STATIC_JAVA_FB.BC_UNCONFIRMED_CAST_OF_RETURN_VALUE_none</internalKey>
        <description>This code performs an unchecked cast of the return value of a method.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.ES_COMPARING_PARAMETER_STRING_WITH_EQ_none</key>
        <name>SpotBugs: Bad practice : ES: Checking String equality using == or !=</name>
        <internalKey>STATIC_JAVA_FB.ES_COMPARING_PARAMETER_STRING_WITH_EQ_none</internalKey>
        <description>This code compares a java.lang.String parameter for reference equality using the == or != operators.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UC_USELESS_CONDITION_none</key>
        <name>SpotBugs: Dodgy code : UC: Useless code</name>
        <internalKey>STATIC_JAVA_FB.UC_USELESS_CONDITION_none</internalKey>
        <description>This condition always produces the same result as the value of the involved variable that was narrowed before.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS_none</key>
        <name>SpotBugs: Correctness : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS_none</internalKey>
        <description>(&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29&quot;&gt;Javadoc&lt;/a&gt;) A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG_none</key>
        <name>SpotBugs: Correctness : VA: Var arg problems</name>
        <internalKey>STATIC_JAVA_FB.VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG_none</internalKey>
        <description>This code passes a primitive array to a function that takes a variable number of object arguments.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NP_LOAD_OF_KNOWN_NULL_VALUE_none</key>
        <name>SpotBugs: Dodgy code : NP: Null pointer dereference</name>
        <internalKey>STATIC_JAVA_FB.NP_LOAD_OF_KNOWN_NULL_VALUE_none</internalKey>
        <description>The variable referenced at this point is known to be null due to an earlier check against null.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_dns</key>
        <name>Low impact security : Check against reverse DNS lookup</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_dns</internalKey>
        <description>Comparing the result of a reverse DNS lookup to a hardcoded hostname.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_dns_sensitive_op</key>
        <name>High impact security : Check against reverse DNS lookup</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_dns_sensitive_op</internalKey>
        <description>Using the results of a reverse DNS lookup to guard a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_http_referer</key>
        <name>Low impact security : Comparison of HTTP referer to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_http_referer</internalKey>
        <description>Comparing the HTTP &apos;referer&apos; header to a hardcoded value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_http_referer_sensitive_op</key>
        <name>High impact security : Comparison of HTTP referer to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_http_referer_sensitive_op</internalKey>
        <description>Using the HTTP &apos;referer&apos; header value as a security control for a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_ip_address</key>
        <name>Low impact security : Comparison of IP address to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_ip_address</internalKey>
        <description>Comparing a remote connection&apos;s IP address against a hardcoded value.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_ip_address_sensitive_op</key>
        <name>High impact security : Comparison of IP address to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_ip_address_sensitive_op</internalKey>
        <description>Using an IP address as a security control for a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_none</key>
        <name>Low impact security : Check against unreliable data</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_none</internalKey>
        <description>Performing a check against unreliable data that an attacker can control</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_os_login</key>
        <name>Low impact security : Comparison of OS login to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_os_login</internalKey>
        <description>Comparing a user&apos;s operating system login name to a constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_os_login_sensitive_op</key>
        <name>High impact security : Comparison of OS login to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_os_login_sensitive_op</internalKey>
        <description>Comparing a user&apos;s operating system login name to a constant to guard a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_principal_name</key>
        <name>Low impact security : Comparison of principal name to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_principal_name</internalKey>
        <description>Comparing the name of a principal to a constant.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_WEAK_GUARD_principal_name_sensitive_op</key>
        <name>High impact security : Comparison of principal name to a constant</name>
        <internalKey>STATIC_JAVA_WEAK_GUARD_principal_name_sensitive_op</internalKey>
        <description>Comparing the name of a principal to a constant to guard a sensitive operation.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_IDENTICAL_BRANCHES_case</key>
        <name>Incorrect expression : Identical code for different cases</name>
        <internalKey>STATIC_JAVA_IDENTICAL_BRANCHES_case</internalKey>
        <description>The same code is executed for two cases in the same switch statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_IDENTICAL_BRANCHES_chain</key>
        <name>Incorrect expression : Identical code for different branches of an else-if chain</name>
        <internalKey>STATIC_JAVA_IDENTICAL_BRANCHES_chain</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_IDENTICAL_BRANCHES_if</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>STATIC_JAVA_IDENTICAL_BRANCHES_if</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_IDENTICAL_BRANCHES_ternary</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>STATIC_JAVA_IDENTICAL_BRANCHES_ternary</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_IDENTICAL_BRANCHES_none</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>STATIC_JAVA_IDENTICAL_BRANCHES_none</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IIL_ELEMENTS_GET_LENGTH_IN_LOOP_none</key>
        <name>SpotBugs: Performance : IIL: Inefficient code which can be moved outside of the loop</name>
        <internalKey>STATIC_JAVA_FB.IIL_ELEMENTS_GET_LENGTH_IN_LOOP_none</internalKey>
        <description>The method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call. (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.IMSE_DONT_CATCH_IMSE_none</key>
        <name>SpotBugs: Bad practice : IMSE: Dubious catching of IllegalMonitorStateException</name>
        <internalKey>STATIC_JAVA_FB.IMSE_DONT_CATCH_IMSE_none</internalKey>
        <description>IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DP_DO_INSIDE_DO_PRIVILEDGED_none</key>
        <name>SpotBugs: Bad practice : DP: Use doPrivileged</name>
        <internalKey>STATIC_JAVA_FB.DP_DO_INSIDE_DO_PRIVILEDGED_none</internalKey>
        <description>This code invokes a method that requires a security permission check. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;) (&lt;i&gt;SpotBugs Experimental&lt;/i&gt;)</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_SINGLETON_RACE_none</key>
        <name>Concurrent data access violations : Thread unsafe modification in singleton</name>
        <internalKey>STATIC_JAVA_SINGLETON_RACE_none</internalKey>
        <description>There is a thread unsafe modification of a field (instance or static) from a method call on a singleton.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_FIELD_NAMING_CONVENTION_none</key>
        <name>SpotBugs: Bad practice : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_FIELD_NAMING_CONVENTION_none</internalKey>
        <description>Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_EMPTY_DB_PASSWORD_none</key>
        <name>SpotBugs: Security : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_EMPTY_DB_PASSWORD_none</internalKey>
        <description>This code creates a database connect using a blank or empty password.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_COLLECTION_OF_URLS_none</key>
        <name>SpotBugs: Performance : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_COLLECTION_OF_URLS_none</internalKey>
        <description>This method or field is or uses a Map or Set of URLs.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_FIELD_SELF_COMPARISON_none</key>
        <name>SpotBugs: Correctness : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_FIELD_SELF_COMPARISON_none</internalKey>
        <description>This method compares a field with itself, and may indicate a typo or a logic error.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SA_LOCAL_DOUBLE_ASSIGNMENT_none</key>
        <name>SpotBugs: Dodgy code : SA: Useless self-operation</name>
        <internalKey>STATIC_JAVA_FB.SA_LOCAL_DOUBLE_ASSIGNMENT_none</internalKey>
        <description>This method contains a double assignment of a local variable; e.g.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.CO_ABSTRACT_SELF_none</key>
        <name>SpotBugs: Bad practice : Co: Problems with implementation of compareTo()</name>
        <internalKey>STATIC_JAVA_FB.CO_ABSTRACT_SELF_none</internalKey>
        <description>This class defines a covariant version of compareTo().</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DB_DUPLICATE_BRANCHES_none</key>
        <name>SpotBugs: Dodgy code : DB: Duplicate Branches</name>
        <internalKey>STATIC_JAVA_FB.DB_DUPLICATE_BRANCHES_none</internalKey>
        <description>This method uses the same code to implement two branches of a conditional branch.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UC_USELESS_VOID_METHOD_none</key>
        <name>SpotBugs: Dodgy code : UC: Useless code</name>
        <internalKey>STATIC_JAVA_FB.UC_USELESS_VOID_METHOD_none</internalKey>
        <description>Our analysis shows that this non-empty void method does not actually perform any useful work.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.MF_CLASS_MASKS_FIELD_none</key>
        <name>SpotBugs: Correctness : MF: Masked Field</name>
        <internalKey>STATIC_JAVA_FB.MF_CLASS_MASKS_FIELD_none</internalKey>
        <description>This class defines a field with the same name as a visible instance field in a superclass.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.PT_ABSOLUTE_PATH_TRAVERSAL_none</key>
        <name>SpotBugs: Security : PT: Path traversal</name>
        <internalKey>STATIC_JAVA_FB.PT_ABSOLUTE_PATH_TRAVERSAL_none</internalKey>
        <description>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as &quot;/abs/path&quot; that can resolve to a location that is outside of that directory.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION_none</key>
        <name>SpotBugs: Performance : Bx: Questionable Boxing of primitive value</name>
        <internalKey>STATIC_JAVA_FB.BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION_none</internalKey>
        <description>A primitive boxed value constructed and then immediately converted into a different primitive type (e.g., new Double(d).intValue()).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.DMI_CONSTANT_DB_PASSWORD_none</key>
        <name>SpotBugs: Security : Dm: Dubious method used</name>
        <internalKey>STATIC_JAVA_FB.DMI_CONSTANT_DB_PASSWORD_none</internalKey>
        <description>This code creates a database connect using a hardcoded, constant password.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.NM_WRONG_PACKAGE_none</key>
        <name>SpotBugs: Correctness : Nm: Confusing name</name>
        <internalKey>STATIC_JAVA_FB.NM_WRONG_PACKAGE_none</internalKey>
        <description>The method in the subclass doesn&apos;t override a similar method in a superclass because the type of a parameter doesn&apos;t exactly match the type of the corresponding parameter in the superclass.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.SE_NO_SUITABLE_CONSTRUCTOR_none</key>
        <name>SpotBugs: Bad practice : Se: Incorrect definition of Serializable class</name>
        <internalKey>STATIC_JAVA_FB.SE_NO_SUITABLE_CONSTRUCTOR_none</internalKey>
        <description>This class implements the Serializable interface and its superclass does not.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD_none</key>
        <name>SpotBugs: Dodgy code : UuF: Unused field</name>
        <internalKey>STATIC_JAVA_FB.UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD_none</internalKey>
        <description>This field is never used.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.INT_VACUOUS_BIT_OPERATION_none</key>
        <name>SpotBugs: Dodgy code : INT: Suspicious integer expression</name>
        <internalKey>STATIC_JAVA_FB.INT_VACUOUS_BIT_OPERATION_none</internalKey>
        <description>This is an integer bit operation (and, or, or exclusive or) that doesn&apos;t do any useful work (e.g., v &amp;amp; 0xffffffff).</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_FB.VA_FORMAT_STRING_ARG_MISMATCH_none</key>
        <name>SpotBugs: Correctness : FS: Format string problem</name>
        <internalKey>STATIC_JAVA_FB.VA_FORMAT_STRING_ARG_MISMATCH_none</internalKey>
        <description>A format-string method with a variable number of arguments is called, but the number of arguments passed does not match with the number of % placeholders in the format string. (&lt;i&gt;SpotBugs Deprecated&lt;/i&gt;)</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_MISSING_PERMISSION_FOR_BROADCAST_none</key>
        <name>Low impact security : Missing permission for broadcast</name>
        <internalKey>STATIC_JAVA_MISSING_PERMISSION_FOR_BROADCAST_none</internalKey>
        <description>A broadcast is sent or received without appropriate permissions.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ATTRIBUTE_NAME_CONFLICT_jsp_tag</key>
        <name>Rule violations : Duplicate JSP tag attribute</name>
        <internalKey>STATIC_JAVA_ATTRIBUTE_NAME_CONFLICT_jsp_tag</internalKey>
        <description>Duplicated attributes are prohibited in JSP tags.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>STATIC_JAVA_ATTRIBUTE_NAME_CONFLICT_none</key>
        <name>Rule violations : Duplicate JSP tag attribute</name>
        <internalKey>STATIC_JAVA_ATTRIBUTE_NAME_CONFLICT_none</internalKey>
        <description>Duplicated attributes are prohibited in JSP tags.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>java</tag>
        <tag>coverity-quality</tag>
    </rule>
</rules>
