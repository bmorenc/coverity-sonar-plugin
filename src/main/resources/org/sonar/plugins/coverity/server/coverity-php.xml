<rules>
    <rule>
        <key>OTHER_MISSING_BREAK_none</key>
        <name>Control flow issues : Missing break in switch</name>
        <internalKey>OTHER_MISSING_BREAK_none</internalKey>
        <description>Missing break statement between cases in switch statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_OS_CMD_INJECTION_none</key>
        <name>High impact security : OS Command Injection</name>
        <internalKey>OTHER_OS_CMD_INJECTION_none</internalKey>
        <description>Untrusted user-supplied data is inserted into an operating system command without adequate validation, escaping, or filtering. This inserted data can change the intent of the operating system command. The change to the operating system command may result in the unauthorized disclosure, destruction, or modification of sensitive data or operating system resources.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SCRIPT_CODE_INJECTION_none</key>
        <name>High impact security : Script code injection</name>
        <internalKey>OTHER_SCRIPT_CODE_INJECTION_none</internalKey>
        <description>Script code interpreted or executed on the server is constructed from user-controllable data.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SYMFONY_EL_INJECTION_none</key>
        <name>Medium impact security : Symfony EL injection</name>
        <internalKey>OTHER_SYMFONY_EL_INJECTION_none</internalKey>
        <description>Executing a tainted string as a Symfony Expression Language expression.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_PATH_MANIPULATION_none</key>
        <name>High impact security : Filesystem path, filename, or URI manipulation</name>
        <internalKey>OTHER_PATH_MANIPULATION_none</internalKey>
        <description>A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier).</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_OPEN_REDIRECT_none</key>
        <name>Medium impact security : Open redirect</name>
        <internalKey>OTHER_OPEN_REDIRECT_none</internalKey>
        <description>User-controlled input is used to specify an address that is used as a URL redirect or forward. An attacker can create a link to the trusted site that redirects to a malicious Web site. This could enable the attacker to steal user credentials.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_NO_EFFECT_none</key>
        <name>Incorrect expression : Expression with no effect</name>
        <internalKey>OTHER_NO_EFFECT_none</internalKey>
        <description>An expression is useless because it has no side effects and its result is ignored.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_NO_EFFECT_self_assign</key>
        <name>Incorrect expression : Self assignment</name>
        <internalKey>OTHER_NO_EFFECT_self_assign</internalKey>
        <description>Assignment of a variable or expression to itself has no effect</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_UNSAFE_DESERIALIZATION_none</key>
        <name>High impact security : Unsafe deserialization</name>
        <internalKey>OTHER_UNSAFE_DESERIALIZATION_none</internalKey>
        <description>A user-controllable string is deserialized.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_IDENTICAL_BRANCHES_case</key>
        <name>Incorrect expression : Identical code for different cases</name>
        <internalKey>OTHER_IDENTICAL_BRANCHES_case</internalKey>
        <description>The same code is executed for two cases in the same switch statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_IDENTICAL_BRANCHES_chain</key>
        <name>Incorrect expression : Identical code for different branches of an else-if chain</name>
        <internalKey>OTHER_IDENTICAL_BRANCHES_chain</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_IDENTICAL_BRANCHES_if</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>OTHER_IDENTICAL_BRANCHES_if</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_IDENTICAL_BRANCHES_ternary</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>OTHER_IDENTICAL_BRANCHES_ternary</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_IDENTICAL_BRANCHES_none</key>
        <name>Incorrect expression : Identical code for different branches</name>
        <internalKey>OTHER_IDENTICAL_BRANCHES_none</internalKey>
        <description>The same code is executed regardless of the condition</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_STRAY_SEMICOLON_none</key>
        <name>Control flow issues : Stray semicolon</name>
        <internalKey>OTHER_STRAY_SEMICOLON_none</internalKey>
        <description>The code contains a semicolon where it is probably not intended, such as between a &apos;for&apos;, &apos;while&apos;, or &apos;if&apos; and a code block.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_exception_storage_in_gui</key>
        <name>Medium impact security : Exception leaked to user interface</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_exception_storage_in_gui</internalKey>
        <description>Displaying an exception message or stack trace in the user interface.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_cookie</key>
        <name>High impact security : Cleartext sensitive data in a cookie</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_cookie</internalKey>
        <description>Storing unencrypted sensitive data in a cookie.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_database</key>
        <name>Medium impact security : Cleartext sensitive data in a database</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_database</internalKey>
        <description>Storing unencrypted sensitive data to a database.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_file</key>
        <name>Low impact security : Cleartext sensitive data in a file</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_file</internalKey>
        <description>Storing unencrypted sensitive data to a file.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_gui</key>
        <name>High impact security : Display of sensitive data in the user interface</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_gui</internalKey>
        <description>Displaying sensitive data in the user interface.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_log</key>
        <name>Low impact security : Information exposure to log file</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_log</internalKey>
        <description>Logging sensitive data.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_registry</key>
        <name>Medium impact security : Cleartext sensitive data in the registry</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_storage_in_registry</internalKey>
        <description>Storing unencrypted sensitive data in the system registry.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_cleartext_transmission</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_cleartext_transmission</internalKey>
        <description>Transmitting sensitive data in cleartext.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SENSITIVE_DATA_LEAK_none</key>
        <name>High impact security : Cleartext transmission of sensitive data</name>
        <internalKey>OTHER_SENSITIVE_DATA_LEAK_none</internalKey>
        <description>Transmitting sensitive data in cleartext.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_UNEXPECTED_CONTROL_FLOW_continue_in_do_while_false</key>
        <name>Control flow issues : Unexpected control flow</name>
        <internalKey>OTHER_UNEXPECTED_CONTROL_FLOW_continue_in_do_while_false</internalKey>
        <description>Loop body does not re-execute on &apos;continue&apos; statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_UNEXPECTED_CONTROL_FLOW_none</key>
        <name>Control flow issues : Unexpected control flow</name>
        <internalKey>OTHER_UNEXPECTED_CONTROL_FLOW_none</internalKey>
        <description>Loop body does not re-execute on &apos;continue&apos; statement</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_coverity-php</key>
        <name>Coverity General PHP</name>
        <internalKey>OTHER_coverity-php</internalKey>
        <description>Coverity General PHP</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_MISSING_AUTHZ_none</key>
        <name>Medium impact security : Missing authorization check</name>
        <internalKey>OTHER_MISSING_AUTHZ_none</internalKey>
        <description>Calling a method that performs a sensitive action without first checking authorization, as is done elsewhere.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_NOSQL_QUERY_INJECTION_none</key>
        <name>Medium impact security : NoSQL query injection</name>
        <internalKey>OTHER_NOSQL_QUERY_INJECTION_none</internalKey>
        <description>A user-controllable string is injected into a NoSQL query.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_FORWARD_NULL_bad_null_value_use</key>
        <name>Null pointer dereferences : Bad use of null-like value</name>
        <internalKey>OTHER_FORWARD_NULL_bad_null_value_use</internalKey>
        <description>Performing an operation that would be invalid on a null or undefined value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_FORWARD_NULL_none</key>
        <name>Null pointer dereferences : Bad use of null-like value</name>
        <internalKey>OTHER_FORWARD_NULL_none</internalKey>
        <description>Performing an operation that would be invalid on a null or undefined value.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_COPY_PASTE_ERROR_none</key>
        <name>Incorrect expression : Copy-paste error</name>
        <internalKey>OTHER_COPY_PASTE_ERROR_none</internalKey>
        <description>A copied piece of code is inconsistent with the original</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_HEADER_INJECTION_none</key>
        <name>Medium impact security : HTTP header injection</name>
        <internalKey>OTHER_HEADER_INJECTION_none</internalKey>
        <description>A user-controllable string is used to construct an HTTP header name.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_IDENTIFIER_TYPO_none</key>
        <name>Incorrect expression : Typo in identifier</name>
        <internalKey>OTHER_IDENTIFIER_TYPO_none</internalKey>
        <description>This code uniquely references a named entity that is suspiciously close in spelling to another, more commonly referenced entity.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_NESTING_INDENT_MISMATCH_bad_indentation</key>
        <name>Code maintainability issues : Indentation does not match nesting level</name>
        <internalKey>OTHER_NESTING_INDENT_MISMATCH_bad_indentation</internalKey>
        <description>The indentation of this code does not reflect its syntactic nesting level.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_NESTING_INDENT_MISMATCH_none</key>
        <name>Control flow issues : Nesting level does not match indentation</name>
        <internalKey>OTHER_NESTING_INDENT_MISMATCH_none</internalKey>
        <description>The indentation of this code suggests it is nested when it is not.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONFIG.SYMFONY_CSRF_PROTECTION_DISABLED_none</key>
        <name>Medium impact security : CSRF protection disabled</name>
        <internalKey>OTHER_CONFIG.SYMFONY_CSRF_PROTECTION_DISABLED_none</internalKey>
        <description>Disabling Symfony&apos;s built-in cross-site request forgery protection.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_XML_EXTERNAL_ENTITY_external_entities</key>
        <name>Medium impact security : Unrestricted external entity references</name>
        <internalKey>OTHER_XML_EXTERNAL_ENTITY_external_entities</internalKey>
        <description>Passing tainted input data with possibly arbitrary external entity references to a weakly configured XML parser.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_XML_EXTERNAL_ENTITY_none</key>
        <name>Medium impact security : Unrestricted external entity references</name>
        <internalKey>OTHER_XML_EXTERNAL_ENTITY_none</internalKey>
        <description>Passing tainted input data with possibly arbitrary external entity references to a weakly configured XML parser.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_bit_and_with_zero</key>
        <name>Integer handling issues : Bitwise-and with zero</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_bit_and_with_zero</internalKey>
        <description>Bitwise-and (&apos;&amp;amp;&apos;) operation applied to zero always produces zero</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_logical_vs_bitwise</key>
        <name>Integer handling issues : Logical vs. bitwise operator</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_logical_vs_bitwise</internalKey>
        <description>Logical operator used in place of bitwise operator or vice versa</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_missing_parentheses</key>
        <name>Incorrect expression : Missing parentheses</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_missing_parentheses</internalKey>
        <description>Missing parentheses caused unintended operator precedence</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_none</key>
        <name>Integer handling issues : Constant expression result</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_none</internalKey>
        <description>An operation with non-constant operands that computes a result with constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_operator_confusion</key>
        <name>Integer handling issues : Wrong operator used</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_operator_confusion</internalKey>
        <description>Wrong operator used in expression</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_result_independent_of_operands</key>
        <name>Integer handling issues : Operands don&apos;t affect result</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_result_independent_of_operands</internalKey>
        <description>An operation with non-constant operands that computes a result with constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_same_on_both_sides</key>
        <name>Incorrect expression : Same on both sides</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_same_on_both_sides</internalKey>
        <description>The same expression occurs on both sides of an operator.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_CONSTANT_EXPRESSION_RESULT_unnecessary_op_assign</key>
        <name>Integer handling issues : Suspicious &amp;= or |=</name>
        <internalKey>OTHER_CONSTANT_EXPRESSION_RESULT_unnecessary_op_assign</internalKey>
        <description>Using a bitwise assignment operator to assign a constant value</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_DEADCODE_none</key>
        <name>Control flow issues : Logically dead code</name>
        <internalKey>OTHER_DEADCODE_none</internalKey>
        <description>Code can never be reached because of a logical contradiction</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_DEADCODE_redundant_test</key>
        <name>Possible Control flow issues : Redundant test</name>
        <internalKey>OTHER_DEADCODE_redundant_test</internalKey>
        <description>Test always evaluates the same</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
    <rule>
        <key>OTHER_HARDCODED_CREDENTIALS_none</key>
        <name>Medium impact security : Use of hard-coded credentials</name>
        <internalKey>OTHER_HARDCODED_CREDENTIALS_none</internalKey>
        <description>Credentials are stored directly in the source code</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_HARDCODED_CREDENTIALS_uri</key>
        <name>Medium impact security : Use of hard-coded URI password</name>
        <internalKey>OTHER_HARDCODED_CREDENTIALS_uri</internalKey>
        <description>A URI with a password component is stored directly in the source code.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_XSS_none</key>
        <name>High impact security : Cross-site scripting</name>
        <internalKey>OTHER_XSS_none</internalKey>
        <description>Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SQLI_none</key>
        <name>High impact security : SQL injection</name>
        <internalKey>OTHER_SQLI_none</internalKey>
        <description>Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SQLI_nosink</key>
        <name>Medium impact security : SQL injection</name>
        <internalKey>OTHER_SQLI_nosink</internalKey>
        <description>Untrusted user-supplied data is inserted into an apparent SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_SQLI_sink</key>
        <name>High impact security : SQL injection</name>
        <internalKey>OTHER_SQLI_sink</internalKey>
        <description>Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering.</description>
        <severity>BLOCKER</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_UNSAFE_REFLECTION_none</key>
        <name>Low impact security : Unsafe reflection</name>
        <internalKey>OTHER_UNSAFE_REFLECTION_none</internalKey>
        <description>A user-controllable string is passed to a reflection API.</description>
        <severity>MAJOR</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>VULNERABILITY</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-security</tag>
    </rule>
    <rule>
        <key>OTHER_UNREACHABLE_none</key>
        <name>Control flow issues : Structurally dead code</name>
        <internalKey>OTHER_UNREACHABLE_none</internalKey>
        <description>Code block is unreachable because of the syntactic structure of the code</description>
        <severity>CRITICAL</severity>
        <cardinality>SINGLE</cardinality>
        <status>READY</status>
        <type>BUG</type>
        <tag>coverity</tag>
        <tag>php</tag>
        <tag>coverity-quality</tag>
    </rule>
</rules>
